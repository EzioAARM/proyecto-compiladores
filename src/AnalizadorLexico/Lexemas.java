/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexemas.flex</tt>
 */
public class Lexemas {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\17\1\20\1\20\1\17\22\0\1\21\6\0\1\16"+
    "\2\2\1\0\1\11\1\0\1\11\1\6\1\0\1\12\1\12\10\1"+
    "\7\0\2\4\1\23\1\4\1\7\6\4\1\15\1\4\1\13\4\4"+
    "\1\22\1\24\1\14\5\4\4\0\1\3\1\0\4\4\1\10\25\4"+
    "\12\0\1\20\u05da\0\12\5\206\0\12\5\306\0\12\5\u019c\0\12\5"+
    "\166\0\12\5\166\0\12\5\166\0\12\5\166\0\12\5\166\0\12\5"+
    "\166\0\12\5\166\0\12\5\166\0\12\5\166\0\12\5\140\0\12\5"+
    "\166\0\12\5\106\0\12\5\u0116\0\12\5\106\0\12\5\u0746\0\12\5"+
    "\46\0\12\5\u012c\0\12\5\200\0\12\5\246\0\12\5\6\0\12\5"+
    "\266\0\12\5\126\0\12\5\206\0\12\5\6\0\12\5\u03ce\0\1\20"+
    "\1\20\u85f6\0\12\5\u02a6\0\12\5\46\0\12\5\306\0\12\5\26\0"+
    "\12\5\126\0\12\5\u0196\0\12\5\u5316\0\12\5\u0586\0\12\5\u0bbc\0"+
    "\12\5\200\0\12\5\74\0\12\5\220\0\12\5\u0116\0\12\5\u0156\0"+
    "\12\5\166\0\12\5\u0176\0\12\5\146\0\12\5\146\0\12\5\u01a6\0"+
    "\12\5\u0366\0\12\5\u4e06\0\12\5\346\0\12\5\u6c74\0\62\5\u1150\0"+
    "\12\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\1\1\2\1\0\1\3"+
    "\1\2\1\4\1\2\1\5\1\0\1\2\1\6\1\2"+
    "\1\0\1\2\1\0\2\2\1\4\1\0\1\2\1\0"+
    "\1\5\1\2\1\4\1\2\2\5\3\2\1\7\72\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\25\0\52\0\25\0\77\0\124\0\151\0\176"+
    "\0\223\0\250\0\275\0\77\0\322\0\347\0\151\0\374"+
    "\0\u0111\0\u0126\0\u013b\0\u0150\0\u0165\0\u017a\0\u018f\0\u01a4"+
    "\0\u01b9\0\u01ce\0\u01e3\0\u01f8\0\u020d\0\u0222\0\u0237\0\u024c"+
    "\0\u0261\0\u0276\0\52\0\u028b\0\u02a0\0\u02b5\0\u02ca\0\u02df"+
    "\0\u02f4\0\u0309\0\u031e\0\u0333\0\u0348\0\u035d\0\u0372\0\u0387"+
    "\0\u039c\0\u03b1\0\u03c6\0\u03db\0\u03f0\0\u0405\0\u041a\0\u042f"+
    "\0\u0444\0\u0459\0\u046e\0\u0483\0\u0498\0\u04ad\0\u04c2\0\u04d7"+
    "\0\u04ec\0\u0501\0\u0516\0\u052b\0\u0540\0\u0555\0\u056a\0\u057f"+
    "\0\u0594\0\u05a9\0\u05be\0\u05d3\0\u05e8\0\u05fd\0\u0612\0\u0627"+
    "\0\u063c\0\u0651\0\u0666\0\u067b\0\u0690\0\u06a5\0\u06ba\0\u06cf"+
    "\0\u06e4\0\u06f9\0\u070e\0\u0723\0\u0738";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\0\1\3\1\4\1\0\2\3"+
    "\1\0\1\5\1\6\2\3\1\7\1\10\1\0\1\10"+
    "\1\11\2\3\1\0\1\4\3\0\1\4\1\12\3\0"+
    "\1\4\13\0\1\13\1\3\1\13\1\3\2\0\2\3"+
    "\1\0\1\13\3\3\4\0\3\3\1\0\1\4\3\0"+
    "\1\4\1\12\3\0\1\14\1\15\12\0\1\13\1\3"+
    "\1\13\1\3\2\0\2\3\1\0\1\13\1\3\1\16"+
    "\1\3\4\0\3\3\16\7\1\17\2\0\4\7\26\0"+
    "\1\13\1\3\1\13\1\3\2\0\1\20\1\3\1\0"+
    "\1\13\3\3\4\0\3\3\1\0\1\12\3\0\1\12"+
    "\1\0\2\21\1\0\1\12\13\0\1\13\1\22\2\13"+
    "\2\0\2\13\1\0\4\13\4\0\3\13\14\0\1\23"+
    "\11\0\1\13\1\3\1\13\1\3\2\0\2\3\1\0"+
    "\1\13\2\3\1\24\4\0\3\3\1\0\1\13\1\3"+
    "\1\13\1\3\2\0\2\3\1\0\1\13\2\3\1\25"+
    "\4\0\3\3\1\0\1\26\3\0\1\26\1\0\2\21"+
    "\1\27\1\26\13\0\1\30\1\22\1\30\1\22\2\0"+
    "\2\22\1\0\1\30\3\22\4\0\3\22\15\0\1\31"+
    "\10\0\1\13\1\3\1\13\1\3\2\0\2\3\1\0"+
    "\1\13\2\3\1\32\4\0\3\3\1\0\1\13\1\3"+
    "\1\13\1\3\2\0\1\33\1\3\1\0\1\13\3\3"+
    "\4\0\3\3\1\0\1\26\3\0\1\26\1\34\2\21"+
    "\1\0\1\26\13\0\1\26\3\0\1\26\3\0\1\27"+
    "\1\26\13\0\1\30\1\35\2\30\2\0\2\30\1\0"+
    "\4\30\4\0\3\30\15\0\1\36\10\0\1\13\1\3"+
    "\1\13\1\3\2\0\2\3\1\0\1\37\1\6\2\3"+
    "\4\0\3\3\1\0\1\13\1\3\1\13\1\3\2\0"+
    "\2\3\1\0\1\13\3\3\4\0\1\3\1\40\1\3"+
    "\1\0\1\12\3\0\1\12\1\34\2\21\1\0\1\12"+
    "\13\0\1\41\1\35\1\41\1\35\2\0\2\35\1\0"+
    "\1\41\3\35\4\0\3\35\12\0\1\36\1\15\12\0"+
    "\1\13\1\22\2\13\2\0\2\13\1\0\1\37\1\42"+
    "\2\13\4\0\3\13\1\0\1\13\1\3\1\13\1\3"+
    "\2\0\2\3\1\0\1\13\3\3\4\0\2\3\1\43"+
    "\1\0\1\41\1\44\2\41\2\0\2\41\1\0\4\41"+
    "\4\0\3\41\1\0\1\13\1\22\2\13\2\0\2\13"+
    "\1\0\2\13\1\45\1\13\4\0\3\13\1\0\1\46"+
    "\1\44\1\46\1\44\2\0\2\44\1\0\1\46\3\44"+
    "\4\0\3\44\1\0\1\13\1\22\2\13\2\0\2\13"+
    "\1\0\3\13\1\47\4\0\3\13\1\0\1\46\1\50"+
    "\2\46\2\0\2\46\1\0\4\46\4\0\3\46\1\0"+
    "\1\13\1\22\2\13\2\0\2\13\1\0\3\13\1\37"+
    "\4\0\3\13\1\0\1\51\1\50\1\51\1\50\2\0"+
    "\2\50\1\0\1\51\3\50\4\0\3\50\1\0\1\51"+
    "\1\52\2\51\2\0\2\51\1\0\4\51\4\0\3\51"+
    "\1\0\1\53\1\52\1\53\1\52\2\0\2\52\1\0"+
    "\1\53\3\52\4\0\3\52\1\0\1\53\1\54\2\53"+
    "\2\0\2\53\1\0\4\53\4\0\3\53\1\0\1\55"+
    "\1\54\1\55\1\54\2\0\2\54\1\0\1\55\3\54"+
    "\4\0\3\54\1\0\1\55\1\56\2\55\2\0\2\55"+
    "\1\0\4\55\4\0\3\55\1\0\1\57\1\56\1\57"+
    "\1\56\2\0\2\56\1\0\1\57\3\56\4\0\3\56"+
    "\1\0\1\57\1\60\2\57\2\0\2\57\1\0\4\57"+
    "\4\0\3\57\1\0\1\61\1\60\1\61\1\60\2\0"+
    "\2\60\1\0\1\61\3\60\4\0\3\60\1\0\1\61"+
    "\1\62\2\61\2\0\2\61\1\0\4\61\4\0\3\61"+
    "\1\0\1\63\1\62\1\63\1\62\2\0\2\62\1\0"+
    "\1\63\3\62\4\0\3\62\1\0\1\63\1\64\2\63"+
    "\2\0\2\63\1\0\4\63\4\0\3\63\1\0\1\65"+
    "\1\64\1\65\1\64\2\0\2\64\1\0\1\65\3\64"+
    "\4\0\3\64\1\0\1\65\1\66\2\65\2\0\2\65"+
    "\1\0\4\65\4\0\3\65\1\0\1\67\1\66\1\67"+
    "\1\66\2\0\2\66\1\0\1\67\3\66\4\0\3\66"+
    "\1\0\1\67\1\70\2\67\2\0\2\67\1\0\4\67"+
    "\4\0\3\67\1\0\1\71\1\70\1\71\1\70\2\0"+
    "\2\70\1\0\1\71\3\70\4\0\3\70\1\0\1\71"+
    "\1\72\2\71\2\0\2\71\1\0\4\71\4\0\3\71"+
    "\1\0\1\73\1\72\1\73\1\72\2\0\2\72\1\0"+
    "\1\73\3\72\4\0\3\72\1\0\1\73\1\74\2\73"+
    "\2\0\2\73\1\0\4\73\4\0\3\73\1\0\1\75"+
    "\1\74\1\75\1\74\2\0\2\74\1\0\1\75\3\74"+
    "\4\0\3\74\1\0\1\75\1\76\2\75\2\0\2\75"+
    "\1\0\4\75\4\0\3\75\1\0\1\77\1\76\1\77"+
    "\1\76\2\0\2\76\1\0\1\77\3\76\4\0\3\76"+
    "\1\0\1\77\1\100\2\77\2\0\2\77\1\0\4\77"+
    "\4\0\3\77\1\0\1\101\1\100\1\101\1\100\2\0"+
    "\2\100\1\0\1\101\3\100\4\0\3\100\1\0\1\101"+
    "\1\102\2\101\2\0\2\101\1\0\4\101\4\0\3\101"+
    "\1\0\1\103\1\102\1\103\1\102\2\0\2\102\1\0"+
    "\1\103\3\102\4\0\3\102\1\0\1\103\1\104\2\103"+
    "\2\0\2\103\1\0\4\103\4\0\3\103\1\0\1\105"+
    "\1\104\1\105\1\104\2\0\2\104\1\0\1\105\3\104"+
    "\4\0\3\104\1\0\1\105\1\106\2\105\2\0\2\105"+
    "\1\0\4\105\4\0\3\105\1\0\1\107\1\106\1\107"+
    "\1\106\2\0\2\106\1\0\1\107\3\106\4\0\3\106"+
    "\1\0\1\107\1\110\2\107\2\0\2\107\1\0\4\107"+
    "\4\0\3\107\1\0\1\111\1\110\1\111\1\110\2\0"+
    "\2\110\1\0\1\111\3\110\4\0\3\110\1\0\1\111"+
    "\1\112\2\111\2\0\2\111\1\0\4\111\4\0\3\111"+
    "\1\0\1\113\1\112\1\113\1\112\2\0\2\112\1\0"+
    "\1\113\3\112\4\0\3\112\1\0\1\113\1\114\2\113"+
    "\2\0\2\113\1\0\4\113\4\0\3\113\1\0\1\115"+
    "\1\114\1\115\1\114\2\0\2\114\1\0\1\115\3\114"+
    "\4\0\3\114\1\0\1\115\1\116\2\115\2\0\2\115"+
    "\1\0\4\115\4\0\3\115\1\0\1\117\1\116\1\117"+
    "\1\116\2\0\2\116\1\0\1\117\3\116\4\0\3\116"+
    "\1\0\1\117\1\120\2\117\2\0\2\117\1\0\4\117"+
    "\4\0\3\117\1\0\1\121\1\120\1\121\1\120\2\0"+
    "\2\120\1\0\1\121\3\120\4\0\3\120\1\0\1\121"+
    "\1\122\2\121\2\0\2\121\1\0\4\121\4\0\3\121"+
    "\1\0\1\123\1\122\1\123\1\122\2\0\2\122\1\0"+
    "\1\123\3\122\4\0\3\122\1\0\1\123\1\124\2\123"+
    "\2\0\2\123\1\0\4\123\4\0\3\123\1\0\1\125"+
    "\1\124\1\125\1\124\2\0\2\124\1\0\1\125\3\124"+
    "\4\0\3\124\1\0\1\125\1\126\2\125\2\0\2\125"+
    "\1\0\4\125\4\0\3\125\1\0\1\127\1\126\1\127"+
    "\1\126\2\0\2\126\1\0\1\127\3\126\4\0\3\126"+
    "\1\0\1\127\1\130\2\127\2\0\2\127\1\0\4\127"+
    "\4\0\3\127\1\0\1\131\1\130\1\131\1\130\2\0"+
    "\2\130\1\0\1\131\3\130\4\0\3\130\1\0\1\131"+
    "\1\132\2\131\2\0\2\131\1\0\4\131\4\0\3\131"+
    "\1\0\1\133\1\132\1\133\1\132\2\0\2\132\1\0"+
    "\1\133\3\132\4\0\3\132\1\0\1\133\1\134\2\133"+
    "\2\0\2\133\1\0\4\133\4\0\3\133\1\0\1\135"+
    "\1\134\1\135\1\134\2\0\2\134\1\0\1\135\3\134"+
    "\4\0\3\134\1\0\1\135\1\0\2\135\2\0\2\135"+
    "\1\0\4\135\4\0\3\135";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1869];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\2\1\1\0\1\11\4\1\1\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private boolean _existenTokens = false;

    public boolean existenTokens() {
        return this._existenTokens;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexemas(java.io.Reader in) {
  
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 334) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        this._existenTokens = false;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MyToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { MyToken token = new MyToken("DatoEntero", yytext(), yyline, yycolumn, yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 8: break;
          case 2: 
            { MyToken token = new MyToken("Identificador", yytext(), yyline, yycolumn, yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 9: break;
          case 3: 
            { // No hacer nada
            } 
            // fall through
          case 10: break;
          case 4: 
            { MyToken token = new MyToken("DatoFloat", yytext(), yyline, yycolumn, yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 11: break;
          case 5: 
            { MyToken token = new MyToken("DatoBit", yytext(), yyline, yycolumn, yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 12: break;
          case 6: 
            { MyToken token = new MyToken("DatoString", yytext(), yyline, yycolumn, yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 13: break;
          case 7: 
            { MyToken token = new MyToken("PalabraReservada", yytext(), yyline, yycolumn, yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
