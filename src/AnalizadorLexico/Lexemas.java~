/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexemas.flex</tt>
 */
public class Lexemas {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIOMULTI = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\16\2\0\1\20\22\0\1\20\1\26\1\0\1\37"+
    "\1\0\1\23\1\27\1\15\1\34\1\34\1\21\1\1\1\32\1\2"+
    "\1\7\1\22\1\3\1\3\10\3\1\0\1\31\1\24\1\24\1\25"+
    "\1\0\1\36\1\40\1\53\1\46\1\41\1\10\1\62\1\56\1\47"+
    "\1\51\1\64\1\54\1\14\1\60\1\12\1\50\1\55\1\65\1\43"+
    "\1\45\1\42\1\13\1\61\1\57\1\63\1\44\1\52\1\33\1\0"+
    "\1\33\1\0\1\5\1\0\4\4\1\11\25\4\1\35\1\30\1\35"+
    "\66\0\1\17\u05ab\0\12\6\206\0\12\6\306\0\12\6\u019c\0\12\6"+
    "\166\0\12\6\166\0\12\6\166\0\12\6\166\0\12\6\166\0\12\6"+
    "\166\0\12\6\166\0\12\6\166\0\12\6\166\0\12\6\140\0\12\6"+
    "\166\0\12\6\106\0\12\6\u0116\0\12\6\106\0\12\6\u0746\0\12\6"+
    "\46\0\12\6\u012c\0\12\6\200\0\12\6\246\0\12\6\6\0\12\6"+
    "\266\0\12\6\126\0\12\6\206\0\12\6\6\0\12\6\u89c6\0\12\6"+
    "\u02a6\0\12\6\46\0\12\6\306\0\12\6\26\0\12\6\126\0\12\6"+
    "\u0196\0\12\6\u5316\0\12\6\u0586\0\12\6\u0bbc\0\12\6\200\0\12\6"+
    "\74\0\12\6\220\0\12\6\u0116\0\12\6\u0156\0\12\6\166\0\12\6"+
    "\u0176\0\12\6\146\0\12\6\146\0\12\6\u01a6\0\12\6\u0366\0\12\6"+
    "\u4e06\0\12\6\346\0\12\6\u6c74\0\62\6\u1150\0\12\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\4\6\1\2\1\10\1\2\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\24\6\1\30\1\11\1\12"+
    "\1\0\1\31\1\32\1\0\11\6\1\33\7\6\1\34"+
    "\1\35\2\34\1\36\4\6\1\33\1\6\1\33\17\6"+
    "\1\33\33\6\1\33\1\6\1\33\3\6\2\33\1\6"+
    "\1\33\24\6\1\33\24\6\1\37\1\0\1\32\1\33"+
    "\16\6\1\33\13\6\1\33\6\6\1\33\40\6\1\33"+
    "\13\6\1\33\24\6\1\33\1\6\1\33\15\6\1\33"+
    "\23\6\1\33\12\6\1\33\2\6\1\32\1\0\6\6"+
    "\1\33\21\6\1\33\13\6\1\33\4\6\1\33\1\6"+
    "\1\33\40\6\1\33\14\6\2\33\21\6\1\33\4\6"+
    "\2\33\6\6\1\0\23\6\1\33\34\6\1\33\35\6"+
    "\1\33\3\6\1\0\1\33\51\6\1\0\10\6\1\33"+
    "\4\6\1\33\1\6\1\33\14\6\1\33\11\6\1\33"+
    "\3\6\1\33\33\6\1\33\21\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[672];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\154\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\154\0\u02be"+
    "\0\154\0\u02f4\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\154\0\u0762\0\154\0\u017a\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0288\0\154\0\154\0\u02be\0\154"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0144\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584"+
    "\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4"+
    "\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44"+
    "\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\154\0\u20e8\0\u211e"+
    "\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce"+
    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e"+
    "\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e"+
    "\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u103e\0\u28ec\0\u2922\0\u2958"+
    "\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8"+
    "\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68"+
    "\0\u2e9e\0\u247e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2"+
    "\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192"+
    "\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342"+
    "\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2"+
    "\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2"+
    "\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852"+
    "\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02"+
    "\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2"+
    "\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62"+
    "\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12"+
    "\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2"+
    "\0\u40f8\0\u412e\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272"+
    "\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422"+
    "\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2"+
    "\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782"+
    "\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932"+
    "\0\u4968\0\u499e\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2"+
    "\0\u4b18\0\u4b4e\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92"+
    "\0\u4cc8\0\u4cfe\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42"+
    "\0\u4e78\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2"+
    "\0\u5028\0\u505e\0\u5094\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2"+
    "\0\u51d8\0\u520e\0\u5244\0\u527a\0\u52b0\0\u3d98\0\u52e6\0\u531c"+
    "\0\u5352\0\u5388\0\u53be\0\u53f4\0\u542a\0\u5460\0\u5496\0\u54cc"+
    "\0\u5502\0\u5538\0\u556e\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c"+
    "\0\u56b2\0\u56e8\0\u571e\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c"+
    "\0\u5862\0\u5898\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc"+
    "\0\u5a12\0\u5a48\0\u5a7e\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c"+
    "\0\u5bc2\0\u2706\0\u5bf8\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06"+
    "\0\u5d3c\0\u5d72\0\u5da8\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6"+
    "\0\u5eec\0\u5f22\0\u5f58\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030\0\u6066"+
    "\0\u609c\0\u60d2\0\u6108\0\u613e\0\u6174\0\u61aa\0\u61e0\0\u6216"+
    "\0\u624c\0\u6282\0\u62b8\0\u62ee\0\u6324\0\u635a\0\u6390\0\u63c6"+
    "\0\u63fc\0\u6432\0\u6468\0\u649e\0\u64d4\0\u650a\0\u6540\0\u6576"+
    "\0\u65ac\0\u65e2\0\u6618\0\u664e\0\u3960\0\u6684\0\u66ba\0\u66f0"+
    "\0\u6726\0\u675c\0\u6792\0\u67c8\0\u67fe\0\u6834\0\u686a\0\u68a0"+
    "\0\u68d6\0\u690c\0\u6942\0\u6978\0\u69ae\0\u69e4\0\u6a1a\0\u6a50"+
    "\0\u4314\0\u6a86\0\u6abc\0\u6af2\0\u6b28\0\u2772\0\u6b5e\0\u6b94"+
    "\0\u6bca\0\u6c00\0\u6c36\0\u6c6c\0\u6ca2\0\u6cd8\0\u6d0e\0\u6d44"+
    "\0\u6d7a\0\u6db0\0\u6de6\0\u6e1c\0\u6e52\0\u6e88\0\u6ebe\0\u6ef4"+
    "\0\u6f2a\0\u6f60\0\u6f96\0\u6fcc\0\u7002\0\u7038\0\u706e\0\u70a4"+
    "\0\u70da\0\u7110\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e\0\u7254"+
    "\0\u728a\0\u72c0\0\u72f6\0\u732c\0\u7362\0\u7398\0\u73ce\0\u7404"+
    "\0\u743a\0\u7470\0\u74a6\0\u74dc\0\u7512\0\u7548\0\u757e\0\u75b4"+
    "\0\u6ebe\0\u75ea\0\u7620\0\u7656\0\u2f0a\0\u768c\0\u76c2\0\u262e"+
    "\0\u76f8\0\u772e\0\u7764\0\u779a\0\u77d0\0\u1626\0\u7806\0\u783c"+
    "\0\u7872\0\u78a8\0\u78de\0\u7914\0\154\0\u794a\0\u7980\0\u79b6"+
    "\0\u79ec\0\u7a22\0\u7a58\0\u7a8e\0\u7ac4\0\u7afa\0\u7b30\0\u7b66"+
    "\0\u7b9c\0\u7bd2\0\u7c08\0\u7c3e\0\u7c74\0\u7caa\0\u7ce0\0\u7d16"+
    "\0\u7d4c\0\u7d82\0\u7db8\0\u7dee\0\u7e24\0\u7e5a\0\u7e90\0\u7ec6"+
    "\0\u7efc\0\u7f32\0\u7f68\0\u7f9e\0\u7fd4\0\u800a\0\u8040\0\u8076"+
    "\0\u80ac\0\u80e2\0\u8118\0\u814e\0\u8184\0\u81ba\0\u81f0\0\u8226"+
    "\0\u825c\0\u8292\0\u82c8\0\u82fe\0\u8334\0\u836a\0\u83a0\0\u83d6"+
    "\0\u7b30\0\u840c\0\u8442\0\u8478\0\u84ae\0\u84e4\0\u851a\0\u8550";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[672];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\7\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\17\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\7\1\63\1\7\21\64\1\65"+
    "\1\66\43\64\71\0\1\6\2\0\1\67\61\0\1\70"+
    "\1\6\2\0\1\67\62\0\1\6\2\0\1\67\1\71"+
    "\2\72\57\0\3\7\2\0\5\7\23\0\26\7\3\0"+
    "\1\67\2\0\1\67\1\71\2\72\57\0\3\7\2\0"+
    "\2\7\1\73\1\7\1\74\23\0\3\7\1\75\1\7"+
    "\1\76\15\7\1\77\2\7\3\0\3\7\2\0\1\100"+
    "\2\7\1\101\1\7\23\0\1\102\5\7\1\103\1\7"+
    "\1\104\15\7\3\0\3\7\2\0\2\7\1\105\2\7"+
    "\23\0\5\7\1\106\7\7\1\107\10\7\3\0\3\7"+
    "\2\0\1\110\4\7\23\0\1\111\7\7\1\112\1\113"+
    "\14\7\15\114\1\115\1\116\47\114\16\117\1\116\1\115"+
    "\46\117\21\0\1\120\47\0\3\7\2\0\2\7\1\121"+
    "\1\122\1\123\23\0\1\7\1\124\1\125\1\126\1\7"+
    "\1\127\1\130\4\7\1\131\5\7\1\132\4\7\3\0"+
    "\3\7\2\0\1\133\2\7\1\134\1\7\23\0\1\135"+
    "\2\7\1\136\4\7\1\137\1\140\1\7\1\141\12\7"+
    "\3\0\3\7\2\0\1\142\4\7\23\0\1\143\2\7"+
    "\1\144\1\7\1\145\1\7\1\146\1\147\1\150\14\7"+
    "\3\0\3\7\2\0\1\151\2\7\1\152\1\7\23\0"+
    "\1\153\7\7\1\154\1\155\14\7\3\0\3\7\2\0"+
    "\1\156\4\7\23\0\26\7\3\0\3\7\2\0\1\157"+
    "\2\7\1\160\1\7\23\0\1\161\1\7\1\162\1\7"+
    "\1\163\1\7\1\164\1\165\1\166\1\167\3\7\1\170"+
    "\2\7\1\171\4\7\1\172\3\0\3\7\2\0\3\7"+
    "\1\173\1\174\23\0\1\175\2\7\1\176\3\7\1\177"+
    "\1\200\15\7\3\0\3\7\2\0\5\7\23\0\1\201"+
    "\7\7\1\202\15\7\3\0\3\7\2\0\2\7\1\203"+
    "\1\204\1\7\23\0\3\7\1\205\2\7\1\206\6\7"+
    "\1\207\3\7\1\210\1\211\3\7\3\0\3\7\2\0"+
    "\2\7\1\212\2\7\23\0\1\7\1\213\3\7\1\214"+
    "\12\7\1\215\1\7\1\125\3\7\3\0\3\7\2\0"+
    "\5\7\23\0\10\7\1\216\15\7\3\0\3\7\2\0"+
    "\1\217\2\7\1\220\1\7\23\0\1\221\2\7\1\222"+
    "\1\125\3\7\1\223\1\224\14\7\3\0\3\7\2\0"+
    "\1\225\4\7\23\0\11\7\1\226\14\7\3\0\3\7"+
    "\2\0\1\227\2\7\1\230\1\231\23\0\1\232\2\7"+
    "\1\233\4\7\1\234\1\235\14\7\3\0\3\7\2\0"+
    "\1\236\3\7\1\237\23\0\3\7\1\240\4\7\1\241"+
    "\15\7\3\0\3\7\2\0\5\7\23\0\1\242\2\7"+
    "\1\243\3\7\1\244\1\245\1\246\14\7\3\0\3\7"+
    "\2\0\1\247\4\7\23\0\1\250\7\7\1\251\1\252"+
    "\14\7\3\0\3\7\2\0\1\253\4\7\23\0\1\254"+
    "\10\7\1\255\14\7\3\0\3\7\2\0\1\256\2\7"+
    "\1\257\1\260\23\0\1\261\2\7\1\262\4\7\1\263"+
    "\1\264\14\7\3\0\3\7\2\0\5\7\23\0\10\7"+
    "\1\265\15\7\22\0\1\266\43\0\66\70\3\0\1\71"+
    "\2\0\1\71\1\0\2\72\55\0\2\267\1\270\2\0"+
    "\1\270\62\0\3\7\2\0\5\7\23\0\1\7\1\271"+
    "\24\7\3\0\3\7\2\0\5\7\23\0\5\7\1\126"+
    "\20\7\3\0\3\7\2\0\5\7\23\0\3\7\1\272"+
    "\22\7\3\0\3\7\2\0\5\7\23\0\6\7\1\273"+
    "\17\7\3\0\3\7\2\0\1\274\4\7\23\0\2\7"+
    "\1\275\3\7\1\276\2\7\1\277\14\7\3\0\3\7"+
    "\2\0\5\7\23\0\23\7\1\236\2\7\3\0\3\7"+
    "\2\0\4\7\1\300\23\0\20\7\1\301\5\7\3\0"+
    "\3\7\2\0\5\7\23\0\2\7\1\302\15\7\1\303"+
    "\5\7\3\0\3\7\2\0\5\7\23\0\7\7\1\156"+
    "\16\7\3\0\3\7\2\0\2\7\1\126\2\7\23\0"+
    "\2\7\1\125\3\7\1\304\17\7\3\0\3\7\2\0"+
    "\5\7\23\0\11\7\1\305\2\7\1\306\1\307\10\7"+
    "\3\0\3\7\2\0\1\310\4\7\23\0\1\311\10\7"+
    "\1\312\14\7\3\0\3\7\2\0\5\7\23\0\1\7"+
    "\1\313\13\7\1\314\10\7\3\0\3\7\2\0\5\7"+
    "\23\0\1\315\20\7\1\316\1\236\3\7\3\0\3\7"+
    "\2\0\2\7\1\317\2\7\23\0\5\7\1\236\20\7"+
    "\3\0\3\7\2\0\5\7\23\0\1\320\5\7\1\321"+
    "\10\7\1\314\6\7\3\0\3\7\2\0\2\7\1\322"+
    "\2\7\23\0\14\7\1\126\11\7\3\0\3\7\2\0"+
    "\5\7\23\0\1\7\1\125\2\7\1\125\21\7\3\0"+
    "\3\7\2\0\5\7\23\0\2\7\1\323\23\7\3\0"+
    "\3\7\2\0\4\7\1\324\23\0\2\7\1\314\23\7"+
    "\3\0\3\7\2\0\5\7\23\0\2\125\24\7\3\0"+
    "\3\7\2\0\1\125\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\325\1\125\17\7\3\0"+
    "\3\7\2\0\5\7\23\0\2\7\1\326\23\7\3\0"+
    "\3\7\2\0\5\7\23\0\5\7\1\327\20\7\3\0"+
    "\3\7\2\0\5\7\23\0\16\7\1\125\7\7\3\0"+
    "\3\7\2\0\2\7\1\225\1\7\1\330\23\0\1\331"+
    "\4\7\1\332\1\333\13\7\1\334\3\7\3\0\3\7"+
    "\2\0\5\7\23\0\20\7\1\335\5\7\3\0\3\7"+
    "\2\0\5\7\23\0\2\7\1\336\1\7\1\125\21\7"+
    "\3\0\3\7\2\0\5\7\23\0\10\7\1\335\15\7"+
    "\3\0\3\7\2\0\3\7\1\337\1\7\23\0\20\7"+
    "\1\340\5\7\3\0\3\7\2\0\5\7\23\0\1\341"+
    "\4\7\1\342\20\7\3\0\3\7\2\0\5\7\23\0"+
    "\6\7\1\343\17\7\3\0\3\7\2\0\5\7\23\0"+
    "\20\7\1\344\2\7\1\345\2\7\3\0\3\7\2\0"+
    "\5\7\23\0\13\7\1\346\12\7\3\0\3\7\2\0"+
    "\3\7\1\347\1\7\23\0\1\350\3\7\1\351\4\7"+
    "\1\352\14\7\3\0\3\7\2\0\1\353\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\1\354\4\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\15\7\1\125\10\7"+
    "\3\0\3\7\2\0\5\7\23\0\20\7\1\355\5\7"+
    "\3\0\3\7\2\0\4\7\1\356\23\0\1\357\1\7"+
    "\1\360\2\7\1\361\1\362\6\7\1\363\3\7\1\364"+
    "\1\365\3\7\3\0\3\7\2\0\4\7\1\126\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\11\7\1\366"+
    "\14\7\3\0\3\7\2\0\4\7\1\367\23\0\17\7"+
    "\1\370\6\7\3\0\3\7\2\0\5\7\23\0\16\7"+
    "\1\371\7\7\3\0\3\7\2\0\5\7\23\0\1\372"+
    "\25\7\3\0\3\7\2\0\4\7\1\373\23\0\2\7"+
    "\1\374\2\7\1\375\1\376\11\7\1\377\5\7\3\0"+
    "\3\7\2\0\5\7\23\0\13\7\1\u0100\4\7\1\125"+
    "\5\7\3\0\3\7\2\0\5\7\23\0\21\7\1\126"+
    "\4\7\3\0\3\7\2\0\5\7\23\0\1\u0101\25\7"+
    "\3\0\3\7\2\0\5\7\23\0\5\7\1\u0102\20\7"+
    "\3\0\3\7\2\0\5\7\23\0\3\7\1\u0103\3\7"+
    "\1\u0104\16\7\3\0\3\7\2\0\3\7\1\u0105\1\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\20\7"+
    "\1\126\5\7\3\0\3\7\2\0\5\7\23\0\12\7"+
    "\1\126\13\7\3\0\3\7\2\0\5\7\23\0\1\u0106"+
    "\25\7\3\0\3\7\2\0\5\7\23\0\1\u0107\25\7"+
    "\3\0\3\7\2\0\4\7\1\u0108\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\3\7\1\u0109\22\7\3\0"+
    "\3\7\2\0\3\7\1\u010a\1\7\23\0\10\7\1\74"+
    "\15\7\3\0\3\7\2\0\5\7\23\0\2\7\1\u010b"+
    "\2\7\1\u010c\20\7\3\0\3\7\2\0\1\u010d\4\7"+
    "\23\0\10\7\1\u010e\15\7\3\0\3\7\2\0\1\u010f"+
    "\4\7\23\0\1\u0110\25\7\3\0\3\7\2\0\2\7"+
    "\1\u0111\1\u0112\1\u0113\23\0\1\u0114\2\7\1\u0115\14\7"+
    "\1\u0116\5\7\3\0\3\7\2\0\5\7\23\0\21\7"+
    "\1\u0117\4\7\3\0\3\7\2\0\3\7\1\372\1\u0118"+
    "\23\0\26\7\3\0\3\7\2\0\4\7\1\225\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\2\7\1\u0119"+
    "\23\7\3\0\3\7\2\0\5\7\23\0\1\7\1\314"+
    "\24\7\3\0\3\7\2\0\5\7\23\0\2\7\1\u011a"+
    "\23\7\3\0\3\7\2\0\1\u011b\4\7\23\0\2\7"+
    "\1\326\23\7\3\0\3\7\2\0\1\u011c\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\22\7\1\u011d"+
    "\3\7\3\0\3\7\2\0\2\7\1\314\2\7\23\0"+
    "\1\7\1\u011e\1\u011f\2\7\1\u0120\1\u0121\2\7\1\u0122"+
    "\3\7\1\u0123\10\7\3\0\3\7\2\0\1\u0124\4\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\10\7"+
    "\1\u0125\15\7\3\0\3\7\2\0\5\7\23\0\20\7"+
    "\1\u0126\5\7\3\0\3\7\2\0\2\7\1\126\2\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\2\7"+
    "\1\u0127\13\7\1\265\7\7\3\0\3\7\2\0\4\7"+
    "\1\u0128\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\6\7\1\u0129\17\7\3\0\3\7\2\0\1\u012a\4\7"+
    "\23\0\10\7\1\u012b\15\7\3\0\3\7\2\0\5\7"+
    "\23\0\2\7\1\u012c\23\7\3\0\3\7\2\0\5\7"+
    "\23\0\2\7\1\u012d\23\7\3\0\3\7\2\0\5\7"+
    "\23\0\4\7\1\125\21\7\3\0\3\7\2\0\4\7"+
    "\1\u012e\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\3\7\1\u012f\22\7\3\0\3\7\2\0\5\7\23\0"+
    "\13\7\1\u0130\12\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\354\25\7\3\0\3\7\2\0\5\7\23\0\1\7"+
    "\1\125\1\7\1\u0131\1\7\1\u0132\20\7\3\0\3\7"+
    "\2\0\1\u0133\4\7\23\0\10\7\1\u0134\1\u0135\14\7"+
    "\3\0\3\7\2\0\5\7\23\0\5\7\1\u0136\20\7"+
    "\3\0\3\7\2\0\5\7\23\0\21\7\1\u0137\4\7"+
    "\3\0\3\7\2\0\5\7\23\0\2\7\1\125\23\7"+
    "\3\0\3\7\2\0\5\7\23\0\10\7\1\u0138\15\7"+
    "\3\0\3\7\2\0\5\7\23\0\1\u0112\7\7\1\u0139"+
    "\15\7\3\0\3\7\2\0\5\7\23\0\2\7\1\u013a"+
    "\23\7\3\0\3\7\2\0\5\7\23\0\11\7\1\u013b"+
    "\14\7\3\0\3\7\2\0\5\7\23\0\11\7\1\u013c"+
    "\14\7\3\0\3\7\2\0\1\u013d\4\7\23\0\11\7"+
    "\1\152\14\7\3\0\3\7\2\0\5\7\23\0\3\7"+
    "\1\u0128\22\7\3\0\3\7\2\0\5\7\23\0\2\7"+
    "\1\u013e\23\7\3\0\3\7\2\0\5\7\23\0\3\7"+
    "\1\311\22\7\3\0\3\7\2\0\5\7\23\0\2\7"+
    "\1\u013f\20\7\1\125\2\7\3\0\3\7\2\0\2\7"+
    "\1\223\2\7\23\0\1\7\1\u0140\24\7\3\0\3\7"+
    "\2\0\2\7\1\u0141\2\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\3\7\1\u0142\22\7\3\0\3\7"+
    "\2\0\4\7\1\u0143\23\0\3\7\1\u0144\22\7\3\0"+
    "\3\7\2\0\1\u0145\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\2\7\1\u013f\23\7\3\0\3\7"+
    "\2\0\2\7\1\u0146\1\7\1\u012e\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\10\7\1\u0147\15\7\3\0"+
    "\3\7\2\0\4\7\1\u0148\23\0\26\7\3\0\3\7"+
    "\2\0\1\u0149\4\7\23\0\10\7\1\u014a\15\7\3\0"+
    "\3\7\2\0\3\7\1\u014b\1\7\23\0\3\7\1\u014c"+
    "\22\7\3\0\3\7\2\0\4\7\1\u014d\23\0\3\7"+
    "\1\u014e\22\7\3\0\3\7\2\0\5\7\23\0\11\7"+
    "\1\354\14\7\3\0\1\270\2\0\1\270\62\0\1\270"+
    "\2\0\1\270\1\u014f\60\0\1\u0150\3\7\2\0\5\7"+
    "\23\0\26\7\3\0\3\7\2\0\4\7\1\u0151\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\1\u0152\25\7"+
    "\3\0\3\7\2\0\5\7\23\0\6\7\1\u0141\17\7"+
    "\3\0\3\7\2\0\1\u0153\4\7\23\0\3\7\1\u0154"+
    "\22\7\3\0\3\7\2\0\1\u0155\4\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\2\7\1\125\2\7"+
    "\1\u0156\20\7\3\0\3\7\2\0\4\7\1\u0157\23\0"+
    "\26\7\3\0\3\7\2\0\1\u0158\4\7\23\0\26\7"+
    "\3\0\3\7\2\0\3\7\1\u0159\1\7\23\0\11\7"+
    "\1\u015a\14\7\3\0\3\7\2\0\1\u015b\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\4\7\1\u015c\23\0\7\7"+
    "\1\u015d\16\7\3\0\3\7\2\0\5\7\23\0\10\7"+
    "\1\354\14\7\1\u015e\3\0\3\7\2\0\2\7\1\u015f"+
    "\2\7\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\11\7\1\235\14\7\3\0\3\7\2\0\5\7\23\0"+
    "\3\7\1\125\22\7\3\0\3\7\2\0\5\7\23\0"+
    "\16\7\1\126\7\7\3\0\3\7\2\0\2\7\1\132"+
    "\2\7\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\u013c\25\7\3\0\3\7\2\0\1\372\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\1\7\1\u0117"+
    "\24\7\3\0\3\7\2\0\1\u012e\4\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\16\7\1\u0160\7\7"+
    "\3\0\3\7\2\0\5\7\23\0\1\7\1\125\24\7"+
    "\3\0\3\7\2\0\5\7\23\0\1\u012e\25\7\3\0"+
    "\3\7\2\0\1\u0161\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\7\7\1\u0162\16\7\3\0\3\7"+
    "\2\0\5\7\23\0\10\7\1\u0163\15\7\3\0\3\7"+
    "\2\0\1\u0164\4\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\11\7\1\u0165\14\7\3\0\3\7\2\0"+
    "\5\7\23\0\10\7\1\u0166\15\7\3\0\3\7\2\0"+
    "\1\u0167\4\7\23\0\26\7\3\0\3\7\2\0\4\7"+
    "\1\u0168\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\6\7\1\u0169\17\7\3\0\3\7\2\0\4\7\1\u016a"+
    "\23\0\11\7\1\u016b\14\7\3\0\3\7\2\0\1\u016c"+
    "\4\7\23\0\1\u016d\25\7\3\0\3\7\2\0\1\125"+
    "\4\7\23\0\1\u016e\25\7\3\0\3\7\2\0\5\7"+
    "\23\0\13\7\1\152\12\7\3\0\3\7\2\0\5\7"+
    "\23\0\1\265\25\7\3\0\3\7\2\0\5\7\23\0"+
    "\16\7\1\u016f\7\7\3\0\3\7\2\0\5\7\23\0"+
    "\2\7\1\u0170\3\7\1\u0171\5\7\1\125\11\7\3\0"+
    "\3\7\2\0\5\7\23\0\6\7\1\125\17\7\3\0"+
    "\3\7\2\0\5\7\23\0\15\7\1\u0172\10\7\3\0"+
    "\3\7\2\0\5\7\23\0\2\7\1\u0173\23\7\3\0"+
    "\3\7\2\0\4\7\1\u0174\23\0\26\7\3\0\3\7"+
    "\2\0\2\7\1\u0163\2\7\23\0\26\7\3\0\3\7"+
    "\2\0\2\7\1\u0175\2\7\23\0\11\7\1\u0176\14\7"+
    "\3\0\2\7\1\u0177\2\0\5\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\16\7\1\u0178\1\7\1\125"+
    "\5\7\3\0\3\7\2\0\5\7\23\0\25\7\1\u0179"+
    "\3\0\3\7\2\0\2\7\1\125\2\7\23\0\26\7"+
    "\3\0\3\7\2\0\1\u017a\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\1\u017b\25\7\3\0\3\7"+
    "\2\0\4\7\1\125\23\0\1\7\1\u017c\24\7\3\0"+
    "\3\7\2\0\3\7\1\u017d\1\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\2\7\1\u017e\23\7\3\0"+
    "\3\7\2\0\5\7\23\0\10\7\1\u017f\15\7\3\0"+
    "\3\7\2\0\4\7\1\u0180\23\0\26\7\3\0\3\7"+
    "\2\0\1\u0181\4\7\23\0\10\7\1\u0182\15\7\3\0"+
    "\3\7\2\0\1\u0183\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\u0184\20\7\3\0\3\7"+
    "\2\0\4\7\1\u0185\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\5\7\1\125\1\u0186\7\7\1\u0187\7\7"+
    "\3\0\3\7\2\0\5\7\23\0\7\7\1\236\16\7"+
    "\3\0\3\7\2\0\1\u0188\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\3\7\1\u0189\1\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\5\7\1\u018a\20\7\3\0"+
    "\3\7\2\0\3\7\1\u018b\1\7\23\0\2\7\1\326"+
    "\5\7\1\u014b\15\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\u018c\25\7\3\0\3\7\2\0\5\7\23\0\5\7"+
    "\1\u018d\20\7\3\0\3\7\2\0\5\7\23\0\2\7"+
    "\1\u018e\23\7\3\0\3\7\2\0\5\7\23\0\2\7"+
    "\1\u018f\23\7\3\0\3\7\2\0\5\7\23\0\10\7"+
    "\1\226\15\7\3\0\3\7\2\0\1\u0190\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\2\7\1\u0191"+
    "\23\7\3\0\3\7\2\0\5\7\23\0\6\7\1\126"+
    "\17\7\3\0\3\7\2\0\4\7\1\u0192\23\0\26\7"+
    "\3\0\3\7\2\0\1\u0193\4\7\23\0\5\7\1\u0194"+
    "\1\u0195\10\7\1\u0196\6\7\3\0\3\7\2\0\5\7"+
    "\23\0\3\7\1\u0197\1\7\1\u0198\20\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\u0199\20\7\3\0\3\7"+
    "\2\0\5\7\23\0\1\u019a\25\7\3\0\3\7\2\0"+
    "\1\125\4\7\23\0\2\7\1\125\3\7\1\u019b\17\7"+
    "\3\0\3\7\2\0\5\7\23\0\1\u0167\25\7\3\0"+
    "\3\7\2\0\5\7\23\0\5\7\1\u015b\20\7\3\0"+
    "\3\7\2\0\5\7\23\0\6\7\1\u019c\17\7\3\0"+
    "\3\7\2\0\5\7\23\0\3\7\1\u019d\22\7\3\0"+
    "\3\7\2\0\2\7\1\u019e\2\7\23\0\2\7\1\u019f"+
    "\2\7\1\u01a0\13\7\1\u01a1\4\7\3\0\3\7\2\0"+
    "\2\7\1\236\2\7\23\0\26\7\3\0\3\7\2\0"+
    "\3\7\1\u01a2\1\u01a3\23\0\26\7\3\0\3\7\2\0"+
    "\4\7\1\u01a4\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\3\7\1\u01a5\22\7\3\0\3\7\2\0\5\7"+
    "\23\0\15\7\1\u01a6\2\7\1\u01a7\5\7\3\0\3\7"+
    "\2\0\5\7\23\0\11\7\1\312\14\7\3\0\3\7"+
    "\2\0\5\7\23\0\1\7\1\u01a8\24\7\3\0\3\7"+
    "\2\0\1\372\4\7\23\0\15\7\1\u0123\10\7\3\0"+
    "\3\7\2\0\1\u01a9\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\2\7\1\u01aa\2\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\3\7\1\u01ab\22\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\u01ac\20\7\3\0\3\7"+
    "\2\0\1\u01ad\4\7\23\0\11\7\1\u01ae\14\7\3\0"+
    "\3\7\2\0\1\u01af\4\7\23\0\10\7\1\125\15\7"+
    "\3\0\3\7\2\0\1\u01b0\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\4\7\1\u01b1\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\2\7\1\u01b2\23\7\3\0\3\7"+
    "\2\0\3\7\1\236\1\7\23\0\26\7\3\0\3\7"+
    "\2\0\2\7\1\u01b3\2\7\23\0\26\7\3\0\3\7"+
    "\2\0\4\7\1\u01b4\23\0\26\7\3\0\3\7\2\0"+
    "\1\u01b5\4\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\17\7\1\u01b6\6\7\3\0\3\7\2\0\5\7"+
    "\23\0\14\7\1\125\11\7\3\0\3\7\2\0\5\7"+
    "\23\0\14\7\1\u0139\11\7\3\0\3\7\2\0\5\7"+
    "\23\0\1\u0128\25\7\3\0\3\7\2\0\5\7\23\0"+
    "\17\7\1\74\6\7\3\0\3\7\2\0\5\7\23\0"+
    "\7\7\1\125\16\7\3\0\2\7\1\u01b7\2\0\5\7"+
    "\23\0\26\7\3\0\3\7\2\0\4\7\1\125\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\6\7\1\u01b8"+
    "\17\7\3\0\3\7\2\0\4\7\1\u01b9\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\2\7\1\u01ba\23\7"+
    "\3\0\3\7\2\0\5\7\23\0\6\7\1\321\17\7"+
    "\3\0\3\7\2\0\5\7\23\0\5\7\1\u01bb\1\u01bc"+
    "\6\7\1\u016a\10\7\3\0\3\7\2\0\5\7\23\0"+
    "\6\7\1\u01bd\17\7\3\0\3\7\2\0\2\7\1\236"+
    "\2\7\23\0\10\7\1\372\7\7\1\u01be\1\u01bf\4\7"+
    "\3\0\3\7\2\0\5\7\23\0\11\7\1\130\14\7"+
    "\3\0\3\7\2\0\5\7\23\0\10\7\1\236\15\7"+
    "\3\0\3\7\2\0\5\7\23\0\13\7\1\321\12\7"+
    "\3\0\3\7\2\0\3\7\1\335\1\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\10\7\1\125\15\7"+
    "\3\0\3\7\2\0\5\7\23\0\2\7\1\u01c0\23\7"+
    "\3\0\3\7\2\0\5\7\23\0\2\7\1\u01c1\23\7"+
    "\3\0\3\7\2\0\2\7\1\u01c2\2\7\23\0\3\7"+
    "\1\126\22\7\3\0\3\7\2\0\5\7\23\0\7\7"+
    "\1\u01c3\16\7\3\0\3\7\2\0\5\7\23\0\6\7"+
    "\1\u012c\17\7\3\0\3\7\2\0\3\7\1\152\1\7"+
    "\23\0\26\7\3\0\3\7\2\0\3\7\1\u0167\1\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\1\7"+
    "\1\u01c4\24\7\3\0\3\7\2\0\3\7\1\u01c5\1\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\4\7"+
    "\1\u0117\1\7\1\103\17\7\3\0\3\7\2\0\5\7"+
    "\23\0\17\7\1\125\6\7\3\0\3\7\2\0\5\7"+
    "\23\0\6\7\1\130\17\7\3\0\3\7\2\0\5\7"+
    "\23\0\1\236\25\7\3\0\3\7\2\0\5\7\23\0"+
    "\5\7\1\u013a\20\7\3\0\3\7\2\0\1\u01c6\4\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\20\7"+
    "\1\125\5\7\3\0\3\7\2\0\2\7\1\320\2\7"+
    "\23\0\26\7\3\0\3\7\2\0\1\u01c7\4\7\23\0"+
    "\2\7\1\u01c8\23\7\3\0\3\7\2\0\1\125\3\7"+
    "\1\u01c9\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\5\7\1\236\20\7\3\0\1\u014f\2\0\1\u014f\67\0"+
    "\1\u01ca\60\0\3\7\2\0\5\7\23\0\21\7\1\u012e"+
    "\4\7\3\0\3\7\2\0\5\7\23\0\15\7\1\126"+
    "\10\7\3\0\3\7\2\0\5\7\23\0\3\7\1\u01cb"+
    "\22\7\3\0\3\7\2\0\5\7\23\0\1\u0188\25\7"+
    "\3\0\3\7\2\0\5\7\23\0\15\7\1\u01cc\10\7"+
    "\3\0\3\7\2\0\5\7\23\0\2\7\1\u015b\23\7"+
    "\3\0\3\7\2\0\5\7\23\0\11\7\1\u01cd\14\7"+
    "\3\0\3\7\2\0\5\7\23\0\3\7\1\u01b9\22\7"+
    "\3\0\3\7\2\0\5\7\23\0\3\7\1\321\22\7"+
    "\3\0\3\7\2\0\5\7\23\0\10\7\1\u01cb\15\7"+
    "\3\0\3\7\2\0\5\7\23\0\5\7\1\125\20\7"+
    "\3\0\3\7\2\0\3\7\1\u010a\1\7\23\0\26\7"+
    "\3\0\3\7\2\0\1\u01ce\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\3\7\1\126\1\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\10\7\1\u01cf\15\7\3\0"+
    "\3\7\2\0\3\7\1\u01d0\1\7\23\0\26\7\3\0"+
    "\3\7\2\0\2\7\1\u013a\2\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\10\7\1\u01d1\15\7\3\0"+
    "\3\7\2\0\5\7\23\0\6\7\1\u010d\17\7\3\0"+
    "\3\7\2\0\5\7\23\0\3\7\1\130\22\7\3\0"+
    "\3\7\2\0\5\7\23\0\10\7\1\354\15\7\3\0"+
    "\3\7\2\0\4\7\1\u01a6\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\2\7\1\126\23\7\3\0\3\7"+
    "\2\0\4\7\1\u01d2\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\3\7\1\u01d3\22\7\3\0\3\7\2\0"+
    "\5\7\23\0\1\u01d4\25\7\3\0\3\7\2\0\5\7"+
    "\23\0\20\7\1\321\5\7\3\0\3\7\2\0\5\7"+
    "\23\0\3\7\1\u01d5\22\7\3\0\3\7\2\0\3\7"+
    "\1\u01d6\1\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\13\7\1\u01d7\12\7\3\0\3\7\2\0\2\7"+
    "\1\u01d8\2\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\3\7\1\u01d9\5\7\1\u01da\14\7\3\0\3\7"+
    "\2\0\5\7\23\0\10\7\1\u01db\15\7\3\0\3\7"+
    "\2\0\5\7\23\0\10\7\1\u01dc\15\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\u01dd\20\7\3\0\3\7"+
    "\2\0\1\u01de\4\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\5\7\1\u01df\20\7\3\0\3\7\2\0"+
    "\4\7\1\u0117\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\6\7\1\u01e0\17\7\3\0\3\7\2\0\5\7"+
    "\23\0\16\7\1\314\7\7\3\0\3\7\2\0\3\7"+
    "\1\321\1\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\5\7\1\u01e1\4\7\1\u01e2\13\7\3\0\3\7"+
    "\2\0\5\7\23\0\2\7\1\u01e3\23\7\3\0\3\7"+
    "\2\0\5\7\23\0\2\7\1\u01e4\23\7\3\0\3\7"+
    "\2\0\5\7\23\0\3\7\1\354\22\7\3\0\3\7"+
    "\2\0\5\7\23\0\3\7\1\u01e5\4\7\1\u01d4\15\7"+
    "\3\0\3\7\2\0\2\7\1\u01e6\2\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\11\7\1\u01e7\14\7"+
    "\3\0\3\7\2\0\5\7\23\0\3\7\1\236\22\7"+
    "\3\0\3\7\2\0\5\7\23\0\14\7\1\126\11\7"+
    "\3\0\3\7\2\0\5\7\23\0\3\7\1\u01e8\22\7"+
    "\3\0\3\7\2\0\1\u0193\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\13\7\1\u01e9\12\7\3\0"+
    "\3\7\2\0\5\7\23\0\10\7\1\u01ea\15\7\3\0"+
    "\3\7\2\0\3\7\1\u01eb\1\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\6\7\1\236\17\7\3\0"+
    "\3\7\2\0\5\7\23\0\5\7\1\314\20\7\3\0"+
    "\3\7\2\0\5\7\23\0\11\7\1\u01ec\14\7\3\0"+
    "\3\7\2\0\5\7\23\0\3\7\1\u01ed\22\7\3\0"+
    "\3\7\2\0\2\7\1\u01ee\2\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\2\7\1\u01ef\23\7\3\0"+
    "\3\7\2\0\5\7\23\0\11\7\1\u01f0\14\7\3\0"+
    "\3\7\2\0\1\u01f1\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\20\7\1\u01f2\5\7\3\0\3\7"+
    "\2\0\5\7\23\0\1\7\1\u015f\24\7\3\0\3\7"+
    "\2\0\4\7\1\u01f3\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\3\7\1\u01f4\22\7\3\0\3\7\2\0"+
    "\5\7\23\0\2\7\1\u010d\23\7\3\0\3\7\2\0"+
    "\5\7\23\0\1\125\7\7\1\u01f5\15\7\3\0\3\7"+
    "\2\0\5\7\23\0\1\u01f6\25\7\3\0\3\7\2\0"+
    "\1\u01f7\4\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\10\7\1\372\15\7\3\0\3\7\2\0\5\7"+
    "\23\0\2\7\1\u01f8\23\7\3\0\3\7\2\0\4\7"+
    "\1\u01f9\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\u01fa\25\7\3\0\3\7\2\0\5\7\23\0\14\7"+
    "\1\u01fb\11\7\3\0\2\7\1\u01b7\2\0\5\7\23\0"+
    "\1\u01fc\25\7\3\0\3\7\2\0\1\u01fd\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\1\u01fe\10\7"+
    "\1\u01ff\14\7\3\0\3\7\2\0\5\7\23\0\2\7"+
    "\1\u0200\23\7\3\0\3\7\2\0\1\u0181\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\20\7\1\354"+
    "\5\7\3\0\3\7\2\0\5\7\23\0\1\u0201\25\7"+
    "\3\0\3\7\2\0\1\u0202\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\1\u0203\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\11\7\1\236\14\7\3\0\3\7"+
    "\2\0\4\7\1\u0204\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\2\7\1\u0205\23\7\3\0\3\7\2\0"+
    "\5\7\23\0\1\7\1\u0206\21\7\1\u0207\1\7\1\u0208"+
    "\3\0\3\7\2\0\4\7\1\u0209\23\0\26\7\3\0"+
    "\3\7\2\0\1\u0156\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\23\7\1\125\2\7\3\0\3\7"+
    "\2\0\5\7\23\0\6\7\1\u020a\17\7\3\0\3\7"+
    "\2\0\5\7\23\0\3\7\1\u020b\12\7\1\314\7\7"+
    "\3\0\3\7\2\0\2\7\1\u020c\2\7\23\0\3\7"+
    "\1\236\22\7\3\0\3\7\2\0\3\7\1\u01f5\1\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\11\7"+
    "\1\u020d\14\7\3\0\3\7\2\0\5\7\23\0\2\7"+
    "\1\u020e\23\7\3\0\3\7\2\0\5\7\23\0\1\130"+
    "\25\7\3\0\3\7\2\0\5\7\23\0\1\7\1\u020f"+
    "\24\7\3\0\3\7\2\0\1\146\4\7\23\0\26\7"+
    "\3\0\3\7\2\0\4\7\1\u0210\23\0\26\7\3\0"+
    "\3\7\2\0\1\u0112\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\11\7\1\343\14\7\3\0\3\7"+
    "\2\0\5\7\23\0\11\7\1\321\14\7\3\0\3\7"+
    "\2\0\1\u0211\4\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\11\7\1\u0212\14\7\3\0\3\7\2\0"+
    "\1\u0213\4\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\1\u0214\25\7\3\0\3\7\2\0\5\7\23\0"+
    "\11\7\1\u0215\14\7\3\0\3\7\2\0\5\7\23\0"+
    "\22\7\1\u0198\3\7\3\0\3\7\2\0\1\u017c\4\7"+
    "\23\0\26\7\3\0\3\7\2\0\1\u0216\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\11\7\1\u0217"+
    "\14\7\3\0\3\7\2\0\5\7\23\0\1\u0218\25\7"+
    "\3\0\3\7\2\0\1\u0219\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\2\7\1\u021a\23\7\3\0"+
    "\3\7\2\0\5\7\23\0\11\7\1\u021b\14\7\3\0"+
    "\3\7\2\0\5\7\23\0\3\7\1\231\22\7\3\0"+
    "\3\7\2\0\5\7\23\0\22\7\1\u021c\3\7\63\0"+
    "\1\u021d\5\0\3\7\2\0\2\7\1\321\2\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\2\7\1\u021e"+
    "\23\7\3\0\3\7\2\0\5\7\23\0\22\7\1\125"+
    "\3\7\3\0\3\7\2\0\5\7\23\0\6\7\1\u0128"+
    "\17\7\3\0\3\7\2\0\5\7\23\0\17\7\1\354"+
    "\6\7\3\0\3\7\2\0\5\7\23\0\1\311\25\7"+
    "\3\0\3\7\2\0\5\7\23\0\3\7\1\u021f\22\7"+
    "\3\0\3\7\2\0\5\7\23\0\11\7\1\u0220\14\7"+
    "\3\0\3\7\2\0\5\7\23\0\3\7\1\126\22\7"+
    "\3\0\3\7\2\0\5\7\23\0\3\7\1\u0221\22\7"+
    "\3\0\3\7\2\0\4\7\1\236\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\1\74\25\7\3\0\3\7"+
    "\2\0\5\7\23\0\10\7\1\u01f0\15\7\3\0\3\7"+
    "\2\0\5\7\23\0\11\7\1\u0222\14\7\3\0\3\7"+
    "\2\0\2\7\1\u0188\2\7\23\0\26\7\3\0\3\7"+
    "\2\0\2\7\1\u0223\2\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\3\7\1\u01be\22\7\3\0\3\7"+
    "\2\0\5\7\23\0\11\7\1\167\14\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\u0224\20\7\3\0\3\7"+
    "\2\0\4\7\1\u01a3\23\0\1\u0146\25\7\3\0\3\7"+
    "\2\0\5\7\23\0\10\7\1\u0225\15\7\3\0\3\7"+
    "\2\0\5\7\23\0\2\7\1\u0226\23\7\3\0\3\7"+
    "\2\0\5\7\23\0\10\7\1\u0227\15\7\3\0\3\7"+
    "\2\0\5\7\23\0\11\7\1\161\14\7\3\0\3\7"+
    "\2\0\1\100\4\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\11\7\1\u0188\14\7\3\0\3\7\2\0"+
    "\5\7\23\0\22\7\1\u0228\3\7\3\0\3\7\2\0"+
    "\5\7\23\0\6\7\1\u01b4\17\7\3\0\3\7\2\0"+
    "\1\u0229\4\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\1\u01ce\25\7\3\0\3\7\2\0\3\7\1\u0112"+
    "\1\7\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\11\7\1\u022a\14\7\3\0\3\7\2\0\5\7\23\0"+
    "\10\7\1\u022b\15\7\3\0\3\7\2\0\5\7\23\0"+
    "\11\7\1\u022c\14\7\3\0\3\7\2\0\5\7\23\0"+
    "\2\7\1\u022d\23\7\3\0\3\7\2\0\5\7\23\0"+
    "\3\7\1\u0117\22\7\3\0\3\7\2\0\5\7\23\0"+
    "\5\7\1\u022e\20\7\3\0\3\7\2\0\5\7\23\0"+
    "\20\7\1\u022f\5\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\125\25\7\3\0\3\7\2\0\5\7\23\0\11\7"+
    "\1\u0112\14\7\3\0\3\7\2\0\5\7\23\0\3\7"+
    "\1\u0198\22\7\3\0\3\7\2\0\5\7\23\0\1\7"+
    "\1\126\24\7\3\0\3\7\2\0\5\7\23\0\3\7"+
    "\1\u0230\22\7\3\0\3\7\2\0\2\7\1\u0231\2\7"+
    "\23\0\26\7\3\0\3\7\2\0\1\u0232\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\10\7\1\132"+
    "\15\7\3\0\3\7\2\0\5\7\23\0\1\7\1\u0233"+
    "\24\7\3\0\3\7\2\0\5\7\23\0\15\7\1\u0234"+
    "\10\7\3\0\3\7\2\0\5\7\23\0\6\7\1\u0235"+
    "\17\7\3\0\3\7\2\0\5\7\23\0\6\7\1\u01cc"+
    "\17\7\3\0\3\7\2\0\5\7\23\0\11\7\1\u0236"+
    "\14\7\3\0\3\7\2\0\2\7\1\u015e\2\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\3\7\1\u0237"+
    "\22\7\3\0\3\7\2\0\5\7\23\0\2\7\1\u0238"+
    "\23\7\3\0\3\7\2\0\5\7\23\0\5\7\1\u0106"+
    "\20\7\3\0\3\7\2\0\5\7\23\0\5\7\1\u0239"+
    "\20\7\3\0\3\7\2\0\5\7\23\0\10\7\1\u01ce"+
    "\15\7\3\0\3\7\2\0\5\7\23\0\1\u023a\25\7"+
    "\3\0\3\7\2\0\5\7\23\0\20\7\1\u012e\5\7"+
    "\3\0\3\7\2\0\3\7\1\u023b\1\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\1\u023c\25\7\3\0"+
    "\3\7\2\0\5\7\23\0\1\u023d\25\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\373\13\7\1\321\4\7"+
    "\3\0\3\7\2\0\5\7\23\0\5\7\1\u023e\20\7"+
    "\3\0\3\7\2\0\5\7\23\0\1\u023f\25\7\3\0"+
    "\3\7\2\0\5\7\23\0\11\7\1\u0240\14\7\3\0"+
    "\3\7\2\0\5\7\23\0\11\7\1\u010d\14\7\3\0"+
    "\3\7\2\0\1\u0241\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\3\7\1\161\22\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\326\20\7\3\0\3\7"+
    "\2\0\5\7\23\0\1\7\1\u0242\24\7\3\0\3\7"+
    "\2\0\5\7\23\0\3\7\1\225\22\7\3\0\3\7"+
    "\2\0\4\7\1\u0243\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\21\7\1\314\4\7\3\0\3\7\2\0"+
    "\2\7\1\u0244\2\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\1\7\1\u0245\24\7\3\0\3\7\2\0"+
    "\1\u0246\4\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\16\7\1\354\7\7\3\0\3\7\2\0\5\7"+
    "\23\0\1\u0247\25\7\10\0\1\u0248\60\0\3\7\2\0"+
    "\5\7\23\0\11\7\1\u0249\14\7\3\0\3\7\2\0"+
    "\5\7\23\0\13\7\1\126\1\7\1\u023d\10\7\3\0"+
    "\3\7\2\0\1\320\4\7\23\0\1\337\25\7\3\0"+
    "\3\7\2\0\5\7\23\0\13\7\1\u024a\12\7\3\0"+
    "\3\7\2\0\2\7\1\373\2\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\1\u024b\25\7\3\0\3\7"+
    "\2\0\2\7\1\u024c\2\7\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\1\134\25\7\3\0\3\7\2\0"+
    "\2\7\1\u024d\2\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\11\7\1\u024e\14\7\3\0\3\7\2\0"+
    "\2\7\1\u024f\2\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\1\7\1\u0250\24\7\3\0\3\7\2\0"+
    "\2\7\1\u0251\2\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\2\7\1\u0252\23\7\3\0\3\7\2\0"+
    "\5\7\23\0\11\7\1\u0253\14\7\3\0\3\7\2\0"+
    "\5\7\23\0\2\7\1\u0254\23\7\3\0\2\7\1\u0255"+
    "\2\0\5\7\23\0\26\7\3\0\3\7\2\0\2\7"+
    "\1\u0117\2\7\23\0\26\7\3\0\3\7\2\0\5\7"+
    "\23\0\2\7\1\u0256\23\7\3\0\3\7\2\0\5\7"+
    "\23\0\3\7\1\u0257\22\7\3\0\3\7\2\0\1\u0258"+
    "\4\7\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\10\7\1\u01f3\15\7\3\0\3\7\2\0\5\7\23\0"+
    "\2\7\1\u0259\23\7\3\0\3\7\2\0\2\7\1\u025a"+
    "\2\7\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\u025b\25\7\3\0\3\7\2\0\1\125\4\7\23\0"+
    "\11\7\1\u0165\14\7\3\0\3\7\2\0\5\7\23\0"+
    "\15\7\1\u025c\10\7\3\0\3\7\2\0\5\7\23\0"+
    "\2\7\1\u025d\23\7\3\0\3\7\2\0\1\u0214\4\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\15\7"+
    "\1\u015b\10\7\3\0\3\7\2\0\5\7\23\0\2\7"+
    "\1\u0198\23\7\3\0\3\7\2\0\5\7\23\0\11\7"+
    "\1\u017b\14\7\3\0\3\7\2\0\4\7\1\u025e\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\2\7\1\u025f"+
    "\23\7\3\0\3\7\2\0\2\7\1\u0260\2\7\23\0"+
    "\26\7\3\0\3\7\2\0\3\7\1\u01d4\1\7\23\0"+
    "\26\7\3\0\3\7\2\0\1\u0261\4\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\16\7\1\u0262\7\7"+
    "\3\0\3\7\2\0\1\u0263\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\23\7\1\u0264\2\7\3\0"+
    "\3\7\2\0\5\7\23\0\6\7\1\u023d\17\7\46\0"+
    "\1\u0265\22\0\3\7\2\0\5\7\23\0\12\7\1\u01b4"+
    "\13\7\3\0\3\7\2\0\3\7\1\u0266\1\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\20\7\1\u0267"+
    "\5\7\3\0\3\7\2\0\5\7\23\0\21\7\1\u01a1"+
    "\4\7\3\0\3\7\2\0\1\u0268\4\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\16\7\1\u0242\7\7"+
    "\3\0\3\7\2\0\5\7\23\0\6\7\1\303\17\7"+
    "\3\0\3\7\2\0\5\7\23\0\6\7\1\u0269\17\7"+
    "\3\0\3\7\2\0\5\7\23\0\4\7\1\u026a\21\7"+
    "\3\0\3\7\2\0\5\7\23\0\6\7\1\u026b\17\7"+
    "\3\0\3\7\2\0\5\7\23\0\11\7\1\u026c\14\7"+
    "\3\0\2\7\1\u026d\2\0\5\7\23\0\26\7\3\0"+
    "\3\7\2\0\1\320\4\7\23\0\26\7\3\0\3\7"+
    "\2\0\1\u026e\4\7\23\0\26\7\3\0\3\7\2\0"+
    "\5\7\23\0\5\7\1\u026f\20\7\3\0\3\7\2\0"+
    "\5\7\23\0\11\7\1\u0270\14\7\3\0\3\7\2\0"+
    "\5\7\23\0\10\7\1\u0271\15\7\3\0\3\7\2\0"+
    "\5\7\23\0\1\u0272\25\7\3\0\3\7\2\0\5\7"+
    "\23\0\4\7\1\u0273\21\7\3\0\3\7\2\0\5\7"+
    "\23\0\16\7\1\223\7\7\3\0\3\7\2\0\5\7"+
    "\23\0\16\7\1\303\7\7\3\0\3\7\2\0\5\7"+
    "\23\0\3\7\1\u0274\22\7\3\0\3\7\2\0\5\7"+
    "\23\0\3\7\1\u013a\22\7\3\0\3\7\2\0\5\7"+
    "\23\0\2\7\1\u026f\23\7\3\0\3\7\2\0\5\7"+
    "\23\0\2\7\1\u0257\23\7\3\0\3\7\2\0\5\7"+
    "\23\0\15\7\1\152\10\7\3\0\2\7\1\u0275\2\0"+
    "\5\7\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\10\7\1\u012e\15\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\u0276\25\7\3\0\3\7\2\0\5\7\23\0\5\7"+
    "\1\u0277\6\7\1\u0278\11\7\3\0\3\7\2\0\5\7"+
    "\23\0\6\7\1\u015b\17\7\3\0\3\7\2\0\3\7"+
    "\1\u0189\1\7\23\0\1\7\1\u010d\1\u0279\23\7\3\0"+
    "\3\7\2\0\5\7\23\0\3\7\1\u012d\22\7\3\0"+
    "\3\7\2\0\5\7\23\0\2\7\1\u027a\23\7\3\0"+
    "\3\7\2\0\2\7\1\u027b\2\7\23\0\26\7\3\0"+
    "\3\7\2\0\2\7\1\315\2\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\5\7\1\u027c\20\7\3\0"+
    "\2\7\1\u027d\2\0\5\7\23\0\6\7\1\u0269\17\7"+
    "\3\0\3\7\2\0\5\7\23\0\10\7\1\u0139\15\7"+
    "\3\0\3\7\2\0\5\7\23\0\7\7\1\u027e\10\7"+
    "\1\u027f\5\7\3\0\3\7\2\0\3\7\1\u0280\1\7"+
    "\23\0\26\7\3\0\3\7\2\0\5\7\23\0\11\7"+
    "\1\u0281\14\7\3\0\3\7\2\0\1\u0282\4\7\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\11\7\1\u0283"+
    "\14\7\3\0\3\7\2\0\5\7\23\0\1\337\25\7"+
    "\3\0\3\7\2\0\5\7\23\0\2\7\1\u0219\23\7"+
    "\3\0\3\7\2\0\5\7\23\0\10\7\1\u0284\15\7"+
    "\3\0\3\7\2\0\5\7\23\0\11\7\1\u0285\14\7"+
    "\3\0\3\7\2\0\5\7\23\0\10\7\1\u0286\15\7"+
    "\3\0\3\7\2\0\5\7\23\0\11\7\1\u0287\14\7"+
    "\3\0\3\7\2\0\5\7\23\0\1\7\1\u01a7\24\7"+
    "\3\0\3\7\2\0\5\7\23\0\20\7\1\u0288\5\7"+
    "\3\0\3\7\2\0\5\7\23\0\4\7\1\u0289\21\7"+
    "\3\0\3\7\2\0\5\7\23\0\20\7\1\u028a\5\7"+
    "\3\0\3\7\2\0\3\7\1\u028b\1\7\23\0\26\7"+
    "\3\0\3\7\2\0\2\7\1\u028c\2\7\23\0\26\7"+
    "\3\0\3\7\2\0\3\7\1\372\1\7\23\0\26\7"+
    "\3\0\3\7\2\0\2\7\1\u01a6\2\7\23\0\26\7"+
    "\3\0\3\7\2\0\5\7\23\0\11\7\1\u028d\14\7"+
    "\3\0\3\7\2\0\5\7\23\0\15\7\1\u028e\10\7"+
    "\3\0\3\7\2\0\1\u028f\4\7\23\0\26\7\3\0"+
    "\3\7\2\0\5\7\23\0\3\7\1\u0106\22\7\3\0"+
    "\3\7\2\0\5\7\23\0\5\7\1\u01a1\20\7\3\0"+
    "\3\7\2\0\4\7\1\u0290\23\0\26\7\3\0\3\7"+
    "\2\0\5\7\23\0\7\7\1\u0291\16\7\3\0\3\7"+
    "\2\0\5\7\23\0\5\7\1\u01e1\20\7\3\0\3\7"+
    "\2\0\5\7\23\0\1\u0292\25\7\3\0\3\7\2\0"+
    "\5\7\23\0\3\7\1\u0293\22\7\3\0\3\7\2\0"+
    "\5\7\23\0\3\7\1\u0294\22\7\3\0\3\7\2\0"+
    "\5\7\23\0\1\u0295\25\7\3\0\3\7\2\0\5\7"+
    "\23\0\11\7\1\u0296\14\7\3\0\3\7\2\0\5\7"+
    "\23\0\5\7\1\u0297\20\7\3\0\3\7\2\0\5\7"+
    "\23\0\2\7\1\u0298\23\7\3\0\3\7\2\0\1\u0299"+
    "\4\7\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\4\7\1\u029a\21\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\7\1\u029b\1\u027a\23\7\3\0\3\7\2\0\1\u029c"+
    "\4\7\23\0\26\7\3\0\3\7\2\0\5\7\23\0"+
    "\2\7\1\u029d\23\7\3\0\3\7\2\0\5\7\23\0"+
    "\1\u029e\25\7\3\0\3\7\2\0\5\7\23\0\11\7"+
    "\1\u029f\14\7\3\0\3\7\2\0\4\7\1\u02a0\23\0"+
    "\26\7\3\0\3\7\2\0\5\7\23\0\5\7\1\u0299"+
    "\20\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34182];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\5\1\1\11\5\1\1\11\1\1"+
    "\1\11\1\1\15\11\24\1\1\11\1\1\1\11\1\0"+
    "\2\1\1\0\22\1\2\11\1\1\1\11\145\1\1\11"+
    "\1\0\230\1\1\0\171\1\1\0\122\1\1\0\52\1"+
    "\1\0\34\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[672];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private boolean _existenTokens = false;
    StringBuffer _cadenaComentario = new StringBuffer();
    private boolean _comentarioActivo = false;

    public boolean comentarioActivo() {
        return this._comentarioActivo;
    }

    public boolean existenTokens() {
        return this._existenTokens;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexemas(java.io.Reader in) {
  
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 388) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        this._existenTokens = false;
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MyToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMENTARIOMULTI: {
              System.out.println(_cadenaComentario);
        MyToken token = new MyToken("ComentarioNoCerrado", _cadenaComentario.toString(), yyline + 1, yylength(), yycolumn + 1);
        this._existenTokens = false;
        return token;
            }  // fall though
            case 673: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { MyToken token = new MyToken("DatoBit", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 32: break;
          case 2: 
            { MyToken token = new MyToken("Error", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 33: break;
          case 3: 
            { MyToken token = new MyToken("Simbolo.Mas", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 34: break;
          case 4: 
            { MyToken token = new MyToken("Simbolo.Menos", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 35: break;
          case 5: 
            { MyToken token = new MyToken("DatoEntero", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 36: break;
          case 6: 
            { if (yytext().length() <= 31) {
        MyToken token = new MyToken("Identificador", yytext(), yyline + 1, yylength(), yycolumn + 1);
        this._existenTokens = true;
        return token;
    } else {
        MyToken token = new MyToken("IdentificadorTruncado", yytext(), yyline + 1, yylength(), yycolumn + 1);
        this._existenTokens = true;
        return token;
    }
            } 
            // fall through
          case 37: break;
          case 7: 
            { MyToken token = new MyToken("Simbolo.Punto", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 38: break;
          case 8: 
            { // No hacer nada
            } 
            // fall through
          case 39: break;
          case 9: 
            { MyToken token = new MyToken("Simbolo.Multiplicacion", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 40: break;
          case 10: 
            { MyToken token = new MyToken("Simbolo.Division", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 41: break;
          case 11: 
            { MyToken token = new MyToken("Simbolo.Modulo", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 42: break;
          case 12: 
            { MyToken token = new MyToken("Simbolo.MenorIgual", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 43: break;
          case 13: 
            { MyToken token = new MyToken("Simbolo.MayorIgual", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 44: break;
          case 14: 
            { MyToken token = new MyToken("Simbolo.Diferente", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 45: break;
          case 15: 
            { MyToken token = new MyToken("Simbolo.And", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 46: break;
          case 16: 
            { MyToken token = new MyToken("Simbolo.Or", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 47: break;
          case 17: 
            { MyToken token = new MyToken("Simbolo.PuntoComa", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 48: break;
          case 18: 
            { MyToken token = new MyToken("Simbolo.Coma", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 49: break;
          case 19: 
            { MyToken token = new MyToken("Simbolo.Corchetes", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 50: break;
          case 20: 
            { MyToken token = new MyToken("Simbolo.Parentesis", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 51: break;
          case 21: 
            { MyToken token = new MyToken("Simbolo.Llaves", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 52: break;
          case 22: 
            { MyToken token = new MyToken("Simbolo.Arroba", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 53: break;
          case 23: 
            { MyToken token = new MyToken("Simbolo.DobleNumeral", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 54: break;
          case 24: 
            { _cadenaComentario.append(yytext());
            } 
            // fall through
          case 55: break;
          case 25: 
            { MyToken token = new MyToken("Comentario", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 56: break;
          case 26: 
            { MyToken token = new MyToken("DatoFloat", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 57: break;
          case 27: 
            { MyToken token = new MyToken("PalabraReservada", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 58: break;
          case 28: 
            { MyToken token = new MyToken("StringNoCerrado", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 59: break;
          case 29: 
            { MyToken token = new MyToken("DatoString", yytext(), yyline + 1, yylength(), yycolumn + 1);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 60: break;
          case 30: 
            { _cadenaComentario.append(yytext());
    _comentarioActivo = true;
    yybegin(COMENTARIOMULTI);
            } 
            // fall through
          case 61: break;
          case 31: 
            { _cadenaComentario.append(yytext());
        _comentarioActivo = false;
        yybegin(YYINITIAL);
        MyToken token = new MyToken("ComentarioMultiLinea", _cadenaComentario.toString(), yyline + 1, yylength(), yycolumn + 1);
        this._existenTokens = true;
        return token;
            } 
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
