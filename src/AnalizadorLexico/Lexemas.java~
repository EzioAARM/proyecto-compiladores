/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexemas.flex</tt>
 */
public class Lexemas {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\17\1\22\1\22\1\21\22\0\1\23\1\25\1\0"+
    "\1\25\1\0\1\25\1\25\1\16\1\25\1\25\1\24\1\1\1\25"+
    "\1\2\1\7\1\24\1\12\1\12\10\3\1\0\1\25\1\25\1\25"+
    "\1\25\1\0\1\25\1\26\1\41\1\34\1\27\1\10\1\50\1\44"+
    "\1\35\1\37\1\52\1\42\1\15\1\46\1\13\1\36\1\43\1\53"+
    "\1\31\1\33\1\30\1\14\1\47\1\45\1\51\1\32\1\40\1\25"+
    "\1\0\1\25\1\0\1\5\1\0\4\4\1\11\25\4\1\25\1\25"+
    "\1\25\7\0\1\22\56\0\1\20\u05ab\0\12\6\206\0\12\6\306\0"+
    "\12\6\u019c\0\12\6\166\0\12\6\166\0\12\6\166\0\12\6\166\0"+
    "\12\6\166\0\12\6\166\0\12\6\166\0\12\6\166\0\12\6\166\0"+
    "\12\6\140\0\12\6\166\0\12\6\106\0\12\6\u0116\0\12\6\106\0"+
    "\12\6\u0746\0\12\6\46\0\12\6\u012c\0\12\6\200\0\12\6\246\0"+
    "\12\6\6\0\12\6\266\0\12\6\126\0\12\6\206\0\12\6\6\0"+
    "\12\6\u03ce\0\1\22\1\22\u85f6\0\12\6\u02a6\0\12\6\46\0\12\6"+
    "\306\0\12\6\26\0\12\6\126\0\12\6\u0196\0\12\6\u5316\0\12\6"+
    "\u0586\0\12\6\u0bbc\0\12\6\200\0\12\6\74\0\12\6\220\0\12\6"+
    "\u0116\0\12\6\u0156\0\12\6\166\0\12\6\u0176\0\12\6\146\0\12\6"+
    "\146\0\12\6\u01a6\0\12\6\u0366\0\12\6\u4e06\0\12\6\346\0\12\6"+
    "\u6c74\0\62\6\u1150\0\12\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\0\1\1\1\3\1\2"+
    "\3\3\1\0\1\4\1\0\1\1\24\3\1\5\1\6"+
    "\1\0\5\3\1\7\1\0\4\3\1\10\7\3\1\11"+
    "\1\12\2\11\1\12\1\0\1\5\4\3\1\10\1\3"+
    "\1\10\17\3\1\10\33\3\1\10\1\3\1\10\3\3"+
    "\2\10\1\3\1\10\24\3\1\10\24\3\1\0\1\6"+
    "\1\10\6\3\1\0\10\3\1\10\12\3\1\11\2\0"+
    "\1\3\1\10\6\3\1\10\40\3\1\10\13\3\1\10"+
    "\24\3\1\10\1\3\1\10\15\3\1\10\23\3\1\10"+
    "\12\3\1\10\2\3\1\6\1\0\6\3\1\0\1\10"+
    "\21\3\1\10\13\3\1\10\4\3\1\10\1\3\1\10"+
    "\40\3\1\10\14\3\2\10\21\3\1\10\4\3\2\10"+
    "\6\3\1\0\2\3\2\7\22\3\1\10\34\3\1\10"+
    "\35\3\1\10\3\3\1\0\1\10\52\3\1\0\11\3"+
    "\1\10\4\3\1\10\1\3\1\10\14\3\1\10\11\3"+
    "\1\10\3\3\1\10\33\3\1\10\21\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\204\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\334\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0134\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0948\0\u01e4\0\u0974\0\334\0\u09a0\0\334\0\u023c"+
    "\0\u023c\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\260\0\u0a7c\0\u0aa8"+
    "\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08"+
    "\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68"+
    "\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188"+
    "\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708"+
    "\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868"+
    "\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8"+
    "\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28"+
    "\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88"+
    "\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8"+
    "\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48"+
    "\0\u1f74\0\u1fa0\0\u1fcc\0\u0974\0\u0974\0\u09a0\0\u1ff8\0\u2024"+
    "\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184"+
    "\0\u0d68\0\u21b0\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8"+
    "\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418"+
    "\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578"+
    "\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u1e14\0\u2680\0\u26ac"+
    "\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4\0\u27e0\0\u280c"+
    "\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c"+
    "\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0\0\u2acc"+
    "\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c"+
    "\0\u2c58\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34\0\u2d60\0\u2d8c"+
    "\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0\0\u2eec"+
    "\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020\0\u304c"+
    "\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180\0\u31ac"+
    "\0\u31d8\0\u3204\0\u3230\0\u325c\0\u3288\0\u32b4\0\u32e0\0\u330c"+
    "\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414\0\u3440\0\u346c"+
    "\0\u3498\0\u34c4\0\u34f0\0\u351c\0\u3548\0\u3574\0\u35a0\0\u35cc"+
    "\0\u35f8\0\u3624\0\u3650\0\u367c\0\u36a8\0\u36d4\0\u3700\0\u372c"+
    "\0\u3758\0\u3784\0\u37b0\0\u37dc\0\u3808\0\u3834\0\u3860\0\u388c"+
    "\0\u38b8\0\u38e4\0\u3910\0\u393c\0\u3968\0\u3994\0\u39c0\0\u39ec"+
    "\0\u3a18\0\u3a44\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4\0\u3b20\0\u3b4c"+
    "\0\u3b78\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac"+
    "\0\u3cd8\0\u3d04\0\u3d30\0\u3d5c\0\u3d88\0\u3db4\0\u3de0\0\u3e0c"+
    "\0\u3e38\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14\0\u3f40\0\u3f6c"+
    "\0\u3f98\0\u3fc4\0\u3ff0\0\u401c\0\u4048\0\u4074\0\u40a0\0\u40cc"+
    "\0\u40f8\0\u4124\0\u4150\0\u417c\0\u41a8\0\u41d4\0\u4200\0\u422c"+
    "\0\u4258\0\u4284\0\u42b0\0\u42dc\0\u4308\0\u4334\0\u4360\0\u438c"+
    "\0\u43b8\0\u43e4\0\u3288\0\u4410\0\u443c\0\u4468\0\u4494\0\u44c0"+
    "\0\u44ec\0\u4518\0\u4544\0\u4570\0\u459c\0\u45c8\0\u45f4\0\u4620"+
    "\0\u464c\0\u4678\0\u46a4\0\u46d0\0\u46fc\0\u4728\0\u4754\0\u4780"+
    "\0\u47ac\0\u47d8\0\u4804\0\u4830\0\u485c\0\u4888\0\u48b4\0\u48e0"+
    "\0\u490c\0\u4938\0\u4964\0\u4990\0\u49bc\0\u49e8\0\u4a14\0\u4a40"+
    "\0\u4a6c\0\u4a98\0\u4ac4\0\u4af0\0\u4b1c\0\u4b48\0\u4b74\0\u4ba0"+
    "\0\u4bcc\0\u2024\0\u4bf8\0\u4c24\0\u4c50\0\u4c7c\0\u4ca8\0\u4cd4"+
    "\0\u4d00\0\u4d2c\0\u4d58\0\u4d84\0\u4db0\0\u4ddc\0\u4e08\0\u4e34"+
    "\0\u4e60\0\u4e8c\0\u4eb8\0\u4ee4\0\u4f10\0\u4f3c\0\u4f68\0\u4f94"+
    "\0\u4fc0\0\u4fec\0\u5018\0\u5044\0\u5070\0\u509c\0\u50c8\0\u50f4"+
    "\0\u5120\0\u514c\0\u5178\0\u51a4\0\u51d0\0\u51fc\0\u5228\0\u5254"+
    "\0\u5280\0\u52ac\0\u52d8\0\u5304\0\u5330\0\u535c\0\u5388\0\u53b4"+
    "\0\u53e0\0\u540c\0\u5438\0\u5464\0\u2f18\0\u5490\0\u54bc\0\u54e8"+
    "\0\u5514\0\u5540\0\u556c\0\u5598\0\u55c4\0\u55f0\0\u561c\0\u5648"+
    "\0\u5674\0\u56a0\0\u56cc\0\u56f8\0\u5724\0\u5750\0\u577c\0\u57a8"+
    "\0\u372c\0\u57d4\0\u5800\0\u582c\0\u5858\0\u207c\0\u5884\0\u58b0"+
    "\0\u58dc\0\u5908\0\u5934\0\u5960\0\u598c\0\u59b8\0\u59e4\0\u5a10"+
    "\0\u5a3c\0\u5a68\0\u5a94\0\u5ac0\0\u5aec\0\u5b18\0\u5b44\0\u5b70"+
    "\0\u5b9c\0\u5bc8\0\u5bf4\0\u5c20\0\u5c4c\0\u5c78\0\u5ca4\0\u5cd0"+
    "\0\u5cfc\0\u5d28\0\u5d54\0\u5d80\0\u5dac\0\u5dd8\0\u5e04\0\u5e30"+
    "\0\u5e5c\0\u5e88\0\u5eb4\0\u5ee0\0\u5f0c\0\u5f38\0\u5f64\0\u5f90"+
    "\0\u5fbc\0\u5fe8\0\u6014\0\u6040\0\u606c\0\u6098\0\u60c4\0\u60f0"+
    "\0\u611c\0\u6148\0\u5b70\0\u6174\0\u61a0\0\u61cc\0\u26ac\0\u61f8"+
    "\0\u6224\0\u1f74\0\u6250\0\u627c\0\u62a8\0\u62d4\0\u6300\0\u1238"+
    "\0\u632c\0\u6358\0\u6384\0\u63b0\0\u63dc\0\u6408\0\334\0\u6434"+
    "\0\u6460\0\u648c\0\u64b8\0\u64e4\0\u6510\0\u653c\0\u6568\0\u6594"+
    "\0\u65c0\0\u65ec\0\u6618\0\u6644\0\u6670\0\u669c\0\u66c8\0\u66f4"+
    "\0\u6720\0\u674c\0\u6778\0\u67a4\0\u67d0\0\u67fc\0\u6828\0\u6854"+
    "\0\u6880\0\u68ac\0\u68d8\0\u6904\0\u6930\0\u695c\0\u6988\0\u69b4"+
    "\0\u69e0\0\u6a0c\0\u6a38\0\u6a64\0\u6a90\0\u6abc\0\u6ae8\0\u6b14"+
    "\0\u6b40\0\u6b6c\0\u6b98\0\u6bc4\0\u6bf0\0\u6c1c\0\u6c48\0\u6c74"+
    "\0\u6ca0\0\u6ccc\0\u65c0\0\u6cf8\0\u6d24\0\u6d50\0\u6d7c\0\u6da8"+
    "\0\u6dd4\0\u6e00";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\0\1\6\1\7"+
    "\1\10\1\5\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\16\1\0\1\16\1\20\1\7\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\5\1\44\1\5\3\0\1\4\2\0\1\6"+
    "\3\0\1\4\43\0\1\45\1\4\2\0\1\6\3\0"+
    "\1\4\44\0\1\6\2\0\1\6\1\46\2\47\1\6"+
    "\44\0\3\5\2\0\6\5\10\0\26\5\57\0\3\5"+
    "\2\0\3\5\1\50\1\5\1\51\10\0\3\5\1\52"+
    "\1\5\1\53\15\5\1\54\2\5\3\0\1\6\2\0"+
    "\1\6\1\46\2\47\1\55\1\56\43\0\3\5\2\0"+
    "\1\57\3\5\1\60\1\5\10\0\1\61\5\5\1\62"+
    "\1\5\1\63\15\5\3\0\3\5\2\0\3\5\1\64"+
    "\2\5\10\0\5\5\1\65\7\5\1\66\10\5\3\0"+
    "\3\5\2\0\1\67\5\5\10\0\1\70\7\5\1\71"+
    "\1\72\14\5\16\73\1\74\1\75\1\73\2\76\31\73"+
    "\17\17\1\0\1\77\33\17\24\100\1\101\27\100\3\0"+
    "\3\5\2\0\3\5\1\102\1\103\1\104\10\0\1\5"+
    "\1\105\1\106\1\107\1\5\1\110\1\111\4\5\1\112"+
    "\5\5\1\113\4\5\3\0\3\5\2\0\1\114\3\5"+
    "\1\115\1\5\10\0\1\116\2\5\1\117\4\5\1\120"+
    "\1\121\1\5\1\122\12\5\3\0\3\5\2\0\1\123"+
    "\5\5\10\0\1\124\2\5\1\125\1\5\1\126\1\5"+
    "\1\127\1\130\1\131\14\5\3\0\3\5\2\0\1\132"+
    "\3\5\1\133\1\5\10\0\1\134\7\5\1\135\1\136"+
    "\14\5\3\0\3\5\2\0\1\137\5\5\10\0\26\5"+
    "\3\0\3\5\2\0\1\140\3\5\1\141\1\5\10\0"+
    "\1\142\1\5\1\143\1\5\1\144\1\5\1\145\1\146"+
    "\1\147\1\150\3\5\1\151\2\5\1\152\4\5\1\153"+
    "\3\0\3\5\2\0\4\5\1\154\1\155\10\0\1\156"+
    "\2\5\1\157\3\5\1\160\1\161\15\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\162\7\5\1\163\15\5\3\0"+
    "\3\5\2\0\3\5\1\164\1\165\1\5\10\0\3\5"+
    "\1\166\2\5\1\167\6\5\1\170\3\5\1\171\1\172"+
    "\3\5\3\0\3\5\2\0\3\5\1\173\2\5\10\0"+
    "\1\5\1\174\3\5\1\175\12\5\1\176\1\5\1\106"+
    "\3\5\3\0\3\5\2\0\6\5\10\0\10\5\1\177"+
    "\15\5\3\0\3\5\2\0\1\200\3\5\1\201\1\5"+
    "\10\0\1\202\2\5\1\203\1\106\3\5\1\204\1\205"+
    "\14\5\3\0\3\5\2\0\1\206\5\5\10\0\11\5"+
    "\1\207\14\5\3\0\3\5\2\0\1\210\3\5\1\211"+
    "\1\212\10\0\1\213\2\5\1\214\4\5\1\215\1\216"+
    "\14\5\3\0\3\5\2\0\1\217\4\5\1\220\10\0"+
    "\3\5\1\221\4\5\1\222\15\5\3\0\3\5\2\0"+
    "\6\5\10\0\1\223\2\5\1\224\3\5\1\225\1\226"+
    "\1\227\14\5\3\0\3\5\2\0\1\230\5\5\10\0"+
    "\1\231\7\5\1\232\1\233\14\5\3\0\3\5\2\0"+
    "\1\234\5\5\10\0\1\235\10\5\1\236\14\5\3\0"+
    "\3\5\2\0\1\237\3\5\1\240\1\241\10\0\1\242"+
    "\2\5\1\243\4\5\1\244\1\245\14\5\3\0\3\5"+
    "\2\0\6\5\10\0\10\5\1\246\15\5\54\45\3\0"+
    "\1\46\2\0\1\46\1\0\2\47\1\46\42\0\2\247"+
    "\1\250\2\0\1\250\3\0\1\250\44\0\3\5\2\0"+
    "\6\5\10\0\1\5\1\251\24\5\3\0\3\5\2\0"+
    "\6\5\10\0\5\5\1\107\20\5\3\0\3\5\2\0"+
    "\6\5\10\0\3\5\1\252\22\5\3\0\3\5\2\0"+
    "\6\5\10\0\6\5\1\253\17\5\3\0\3\5\2\0"+
    "\1\254\5\5\10\0\2\5\1\255\3\5\1\256\2\5"+
    "\1\257\14\5\14\0\1\260\42\0\3\5\2\0\6\5"+
    "\10\0\23\5\1\217\2\5\3\0\3\5\2\0\5\5"+
    "\1\261\10\0\20\5\1\262\5\5\3\0\3\5\2\0"+
    "\6\5\10\0\2\5\1\263\15\5\1\264\5\5\3\0"+
    "\3\5\2\0\6\5\10\0\7\5\1\137\16\5\3\0"+
    "\3\5\2\0\3\5\1\107\2\5\10\0\2\5\1\106"+
    "\3\5\1\265\17\5\3\0\3\5\2\0\6\5\10\0"+
    "\11\5\1\266\2\5\1\267\1\270\10\5\3\0\3\5"+
    "\2\0\1\271\5\5\10\0\1\272\10\5\1\273\14\5"+
    "\3\0\3\5\2\0\6\5\10\0\1\5\1\274\13\5"+
    "\1\275\10\5\3\0\3\5\2\0\6\5\10\0\1\276"+
    "\20\5\1\277\1\217\3\5\3\0\3\5\2\0\3\5"+
    "\1\300\2\5\10\0\5\5\1\217\20\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\301\5\5\1\302\10\5\1\275"+
    "\6\5\3\0\3\5\2\0\3\5\1\303\2\5\10\0"+
    "\14\5\1\107\11\5\16\304\1\305\1\75\1\304\2\75"+
    "\31\304\16\306\1\77\1\0\34\306\3\0\3\5\2\0"+
    "\6\5\10\0\1\5\1\106\2\5\1\106\21\5\3\0"+
    "\3\5\2\0\6\5\10\0\2\5\1\307\23\5\3\0"+
    "\3\5\2\0\5\5\1\310\10\0\2\5\1\275\23\5"+
    "\3\0\3\5\2\0\6\5\10\0\2\106\24\5\3\0"+
    "\3\5\2\0\1\106\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\5\5\1\311\1\106\17\5\3\0"+
    "\3\5\2\0\6\5\10\0\2\5\1\312\23\5\3\0"+
    "\3\5\2\0\6\5\10\0\5\5\1\313\20\5\3\0"+
    "\3\5\2\0\6\5\10\0\16\5\1\106\7\5\3\0"+
    "\3\5\2\0\3\5\1\206\1\5\1\314\10\0\1\315"+
    "\4\5\1\316\1\317\13\5\1\320\3\5\3\0\3\5"+
    "\2\0\6\5\10\0\20\5\1\321\5\5\3\0\3\5"+
    "\2\0\6\5\10\0\2\5\1\322\1\5\1\106\21\5"+
    "\3\0\3\5\2\0\6\5\10\0\10\5\1\321\15\5"+
    "\3\0\3\5\2\0\4\5\1\323\1\5\10\0\20\5"+
    "\1\324\5\5\3\0\3\5\2\0\6\5\10\0\1\325"+
    "\4\5\1\326\20\5\3\0\3\5\2\0\6\5\10\0"+
    "\6\5\1\327\17\5\3\0\3\5\2\0\6\5\10\0"+
    "\20\5\1\330\2\5\1\331\2\5\3\0\3\5\2\0"+
    "\6\5\10\0\13\5\1\332\12\5\3\0\3\5\2\0"+
    "\4\5\1\333\1\5\10\0\1\334\3\5\1\335\4\5"+
    "\1\336\14\5\3\0\3\5\2\0\1\337\5\5\10\0"+
    "\26\5\3\0\3\5\2\0\1\340\5\5\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\15\5\1\106\10\5"+
    "\3\0\3\5\2\0\6\5\10\0\20\5\1\341\5\5"+
    "\3\0\3\5\2\0\5\5\1\342\10\0\1\343\1\5"+
    "\1\344\2\5\1\345\1\346\6\5\1\347\3\5\1\350"+
    "\1\351\3\5\3\0\3\5\2\0\5\5\1\107\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\11\5\1\352"+
    "\14\5\3\0\3\5\2\0\5\5\1\353\10\0\17\5"+
    "\1\354\6\5\3\0\3\5\2\0\6\5\10\0\16\5"+
    "\1\355\7\5\3\0\3\5\2\0\6\5\10\0\1\356"+
    "\25\5\3\0\3\5\2\0\5\5\1\357\10\0\2\5"+
    "\1\360\2\5\1\361\1\362\11\5\1\363\5\5\3\0"+
    "\3\5\2\0\6\5\10\0\13\5\1\364\4\5\1\106"+
    "\5\5\3\0\3\5\2\0\6\5\10\0\21\5\1\107"+
    "\4\5\3\0\3\5\2\0\6\5\10\0\1\365\25\5"+
    "\3\0\3\5\2\0\6\5\10\0\5\5\1\366\20\5"+
    "\3\0\3\5\2\0\6\5\10\0\3\5\1\367\3\5"+
    "\1\370\16\5\3\0\3\5\2\0\4\5\1\371\1\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\20\5"+
    "\1\107\5\5\3\0\3\5\2\0\6\5\10\0\12\5"+
    "\1\107\13\5\3\0\3\5\2\0\6\5\10\0\1\372"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\1\373\25\5"+
    "\3\0\3\5\2\0\5\5\1\374\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\3\5\1\375\22\5\3\0"+
    "\3\5\2\0\4\5\1\376\1\5\10\0\10\5\1\51"+
    "\15\5\3\0\3\5\2\0\6\5\10\0\2\5\1\377"+
    "\2\5\1\u0100\20\5\3\0\3\5\2\0\1\u0101\5\5"+
    "\10\0\10\5\1\u0102\15\5\3\0\3\5\2\0\1\u0103"+
    "\5\5\10\0\1\u0104\25\5\3\0\3\5\2\0\3\5"+
    "\1\u0105\1\u0106\1\u0107\10\0\1\u0108\2\5\1\u0109\14\5"+
    "\1\u010a\5\5\3\0\3\5\2\0\6\5\10\0\21\5"+
    "\1\u010b\4\5\3\0\3\5\2\0\4\5\1\356\1\u010c"+
    "\10\0\26\5\3\0\3\5\2\0\5\5\1\206\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\2\5\1\u010d"+
    "\23\5\3\0\3\5\2\0\6\5\10\0\1\5\1\275"+
    "\24\5\3\0\3\5\2\0\6\5\10\0\2\5\1\u010e"+
    "\23\5\3\0\3\5\2\0\1\u010f\5\5\10\0\2\5"+
    "\1\312\23\5\3\0\3\5\2\0\1\u0110\5\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\22\5\1\u0111"+
    "\3\5\3\0\3\5\2\0\3\5\1\275\2\5\10\0"+
    "\1\5\1\u0112\1\u0113\2\5\1\u0114\1\u0115\2\5\1\u0116"+
    "\3\5\1\u0117\10\5\3\0\3\5\2\0\1\u0118\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\10\5"+
    "\1\u0119\15\5\3\0\3\5\2\0\6\5\10\0\20\5"+
    "\1\u011a\5\5\3\0\3\5\2\0\3\5\1\107\2\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\2\5"+
    "\1\u011b\13\5\1\246\7\5\3\0\3\5\2\0\5\5"+
    "\1\u011c\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\6\5\1\u011d\17\5\3\0\3\5\2\0\1\u011e\5\5"+
    "\10\0\10\5\1\u011f\15\5\3\0\3\5\2\0\6\5"+
    "\10\0\2\5\1\u0120\23\5\3\0\3\5\2\0\6\5"+
    "\10\0\2\5\1\u0121\23\5\3\0\3\5\2\0\6\5"+
    "\10\0\4\5\1\106\21\5\3\0\3\5\2\0\5\5"+
    "\1\u0122\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\3\5\1\u0123\22\5\3\0\3\5\2\0\6\5\10\0"+
    "\13\5\1\u0124\12\5\3\0\3\5\2\0\6\5\10\0"+
    "\1\340\25\5\3\0\3\5\2\0\6\5\10\0\1\5"+
    "\1\106\1\5\1\u0125\1\5\1\u0126\20\5\3\0\3\5"+
    "\2\0\1\u0127\5\5\10\0\10\5\1\u0128\1\u0129\14\5"+
    "\3\0\3\5\2\0\6\5\10\0\5\5\1\u012a\20\5"+
    "\3\0\3\5\2\0\6\5\10\0\21\5\1\u012b\4\5"+
    "\3\0\3\5\2\0\6\5\10\0\2\5\1\106\23\5"+
    "\3\0\3\5\2\0\6\5\10\0\10\5\1\u012c\15\5"+
    "\3\0\3\5\2\0\6\5\10\0\1\u0106\7\5\1\u012d"+
    "\15\5\3\0\3\5\2\0\6\5\10\0\2\5\1\u012e"+
    "\23\5\3\0\3\5\2\0\6\5\10\0\11\5\1\u012f"+
    "\14\5\3\0\3\5\2\0\6\5\10\0\11\5\1\u0130"+
    "\14\5\3\0\3\5\2\0\1\u0131\5\5\10\0\11\5"+
    "\1\133\14\5\3\0\3\5\2\0\6\5\10\0\3\5"+
    "\1\u011c\22\5\3\0\3\5\2\0\6\5\10\0\2\5"+
    "\1\u0132\23\5\3\0\3\5\2\0\6\5\10\0\3\5"+
    "\1\272\22\5\3\0\3\5\2\0\6\5\10\0\2\5"+
    "\1\u0133\20\5\1\106\2\5\3\0\3\5\2\0\3\5"+
    "\1\204\2\5\10\0\1\5\1\u0134\24\5\3\0\3\5"+
    "\2\0\3\5\1\u0135\2\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\3\5\1\u0136\22\5\3\0\3\5"+
    "\2\0\5\5\1\u0137\10\0\3\5\1\u0138\22\5\3\0"+
    "\3\5\2\0\1\u0139\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\2\5\1\u0133\23\5\3\0\3\5"+
    "\2\0\3\5\1\u013a\1\5\1\u0122\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\10\5\1\u013b\15\5\3\0"+
    "\3\5\2\0\5\5\1\u013c\10\0\26\5\3\0\3\5"+
    "\2\0\1\u013d\5\5\10\0\10\5\1\u013e\15\5\3\0"+
    "\3\5\2\0\4\5\1\u013f\1\5\10\0\3\5\1\u0140"+
    "\22\5\3\0\3\5\2\0\5\5\1\u0141\10\0\3\5"+
    "\1\u0142\22\5\3\0\3\5\2\0\6\5\10\0\11\5"+
    "\1\340\14\5\3\0\1\250\2\0\1\250\3\0\1\250"+
    "\44\0\1\250\2\0\1\250\1\u0143\2\0\1\250\43\0"+
    "\1\u0144\3\5\2\0\6\5\10\0\26\5\3\0\3\5"+
    "\2\0\5\5\1\u0145\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\1\u0146\25\5\3\0\3\5\2\0\6\5"+
    "\10\0\6\5\1\u0135\17\5\3\0\3\5\2\0\1\u0147"+
    "\5\5\10\0\3\5\1\u0148\22\5\3\0\3\5\2\0"+
    "\1\u0149\5\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\2\5\1\106\2\5\1\u014a\20\5\15\0\1\u014b"+
    "\41\0\3\5\2\0\5\5\1\u014c\10\0\26\5\3\0"+
    "\3\5\2\0\1\u014d\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\4\5\1\u014e\1\5\10\0\11\5\1\u014f\14\5"+
    "\3\0\3\5\2\0\1\u0150\5\5\10\0\26\5\3\0"+
    "\3\5\2\0\5\5\1\u0151\10\0\7\5\1\u0152\16\5"+
    "\3\0\3\5\2\0\6\5\10\0\10\5\1\340\14\5"+
    "\1\u0153\3\0\3\5\2\0\3\5\1\u0154\2\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\11\5\1\216"+
    "\14\5\3\0\3\5\2\0\6\5\10\0\3\5\1\106"+
    "\22\5\3\0\3\5\2\0\6\5\10\0\16\5\1\107"+
    "\7\5\3\0\3\5\2\0\3\5\1\113\2\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\1\u0130\25\5"+
    "\3\0\3\5\2\0\1\356\5\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\1\5\1\u010b\24\5\3\0"+
    "\3\5\2\0\1\u0122\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\16\5\1\u0155\7\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\5\1\106\24\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\u0122\25\5\3\0\3\5\2\0"+
    "\1\u0156\5\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\7\5\1\u0157\16\5\3\0\3\5\2\0\6\5"+
    "\10\0\10\5\1\u0158\15\5\3\0\3\5\2\0\1\u0159"+
    "\5\5\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\11\5\1\u015a\14\5\3\0\3\5\2\0\6\5\10\0"+
    "\10\5\1\u015b\15\5\3\0\3\5\2\0\1\u015c\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\5\5\1\u015d\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\6\5\1\u015e"+
    "\17\5\3\0\3\5\2\0\5\5\1\u015f\10\0\11\5"+
    "\1\u0160\14\5\3\0\3\5\2\0\1\u0161\5\5\10\0"+
    "\1\u0162\25\5\3\0\3\5\2\0\1\106\5\5\10\0"+
    "\1\u0163\25\5\3\0\3\5\2\0\6\5\10\0\13\5"+
    "\1\133\12\5\3\0\3\5\2\0\6\5\10\0\1\246"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\16\5\1\u0164"+
    "\7\5\3\0\3\5\2\0\6\5\10\0\2\5\1\u0165"+
    "\3\5\1\u0166\5\5\1\106\11\5\3\0\3\5\2\0"+
    "\6\5\10\0\6\5\1\106\17\5\3\0\3\5\2\0"+
    "\6\5\10\0\15\5\1\u0167\10\5\3\0\3\5\2\0"+
    "\6\5\10\0\2\5\1\u0168\23\5\3\0\3\5\2\0"+
    "\5\5\1\u0169\10\0\26\5\3\0\3\5\2\0\3\5"+
    "\1\u0158\2\5\10\0\26\5\3\0\3\5\2\0\3\5"+
    "\1\u016a\2\5\10\0\11\5\1\u016b\14\5\3\0\2\5"+
    "\1\u016c\2\0\6\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\16\5\1\u016d\1\5\1\106\5\5\3\0"+
    "\3\5\2\0\6\5\10\0\25\5\1\u016e\3\0\3\5"+
    "\2\0\3\5\1\106\2\5\10\0\26\5\3\0\3\5"+
    "\2\0\1\u016f\5\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\1\u0170\25\5\3\0\3\5\2\0\5\5"+
    "\1\106\10\0\1\5\1\u0171\24\5\3\0\3\5\2\0"+
    "\4\5\1\u0172\1\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\2\5\1\u0173\23\5\3\0\3\5\2\0"+
    "\6\5\10\0\10\5\1\u0174\15\5\3\0\3\5\2\0"+
    "\5\5\1\u0175\10\0\26\5\3\0\3\5\2\0\1\u0176"+
    "\5\5\10\0\10\5\1\u0177\15\5\3\0\3\5\2\0"+
    "\1\u0178\5\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\5\5\1\u0179\20\5\3\0\3\5\2\0\5\5"+
    "\1\u017a\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\5\5\1\106\1\u017b\7\5\1\u017c\7\5\3\0\3\5"+
    "\2\0\6\5\10\0\7\5\1\217\16\5\3\0\3\5"+
    "\2\0\1\u017d\5\5\10\0\26\5\3\0\3\5\2\0"+
    "\4\5\1\u017e\1\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\5\5\1\u017f\20\5\3\0\3\5\2\0"+
    "\4\5\1\u0180\1\5\10\0\2\5\1\312\5\5\1\u013f"+
    "\15\5\3\0\3\5\2\0\6\5\10\0\1\u0181\25\5"+
    "\3\0\3\5\2\0\6\5\10\0\5\5\1\u0182\20\5"+
    "\3\0\3\5\2\0\6\5\10\0\2\5\1\u0183\23\5"+
    "\3\0\3\5\2\0\6\5\10\0\2\5\1\u0184\23\5"+
    "\3\0\3\5\2\0\6\5\10\0\10\5\1\207\15\5"+
    "\3\0\3\5\2\0\1\u0185\5\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\2\5\1\u0186\23\5\3\0"+
    "\3\5\2\0\6\5\10\0\6\5\1\107\17\5\3\0"+
    "\3\5\2\0\5\5\1\u0187\10\0\26\5\3\0\3\5"+
    "\2\0\1\u0188\5\5\10\0\5\5\1\u0189\1\u018a\10\5"+
    "\1\u018b\6\5\3\0\3\5\2\0\6\5\10\0\3\5"+
    "\1\u018c\1\5\1\u018d\20\5\3\0\3\5\2\0\6\5"+
    "\10\0\5\5\1\u018e\20\5\3\0\3\5\2\0\6\5"+
    "\10\0\1\u018f\25\5\3\0\3\5\2\0\1\106\5\5"+
    "\10\0\2\5\1\106\3\5\1\u0190\17\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\u015c\25\5\3\0\3\5\2\0"+
    "\6\5\10\0\5\5\1\u0150\20\5\3\0\3\5\2\0"+
    "\6\5\10\0\6\5\1\u0191\17\5\3\0\3\5\2\0"+
    "\6\5\10\0\3\5\1\u0192\22\5\3\0\3\5\2\0"+
    "\3\5\1\u0193\2\5\10\0\2\5\1\u0194\2\5\1\u0195"+
    "\13\5\1\u0196\4\5\3\0\3\5\2\0\3\5\1\217"+
    "\2\5\10\0\26\5\3\0\3\5\2\0\4\5\1\u0197"+
    "\1\u0198\10\0\26\5\3\0\3\5\2\0\5\5\1\u0199"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\3\5"+
    "\1\u019a\22\5\3\0\3\5\2\0\6\5\10\0\15\5"+
    "\1\u019b\2\5\1\u019c\5\5\3\0\3\5\2\0\6\5"+
    "\10\0\11\5\1\273\14\5\3\0\3\5\2\0\6\5"+
    "\10\0\1\5\1\u019d\24\5\3\0\3\5\2\0\1\356"+
    "\5\5\10\0\15\5\1\u0117\10\5\3\0\3\5\2\0"+
    "\1\u019e\5\5\10\0\26\5\3\0\3\5\2\0\3\5"+
    "\1\u019f\2\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\3\5\1\u01a0\22\5\3\0\3\5\2\0\6\5"+
    "\10\0\5\5\1\u01a1\20\5\3\0\3\5\2\0\1\u01a2"+
    "\5\5\10\0\11\5\1\u01a3\14\5\3\0\3\5\2\0"+
    "\1\u01a4\5\5\10\0\10\5\1\106\15\5\3\0\3\5"+
    "\2\0\1\u01a5\5\5\10\0\26\5\3\0\3\5\2\0"+
    "\5\5\1\u01a6\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\2\5\1\u01a7\23\5\3\0\3\5\2\0\4\5"+
    "\1\217\1\5\10\0\26\5\3\0\3\5\2\0\3\5"+
    "\1\u01a8\2\5\10\0\26\5\3\0\3\5\2\0\5\5"+
    "\1\u01a9\10\0\26\5\3\0\3\5\2\0\1\u01aa\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\17\5"+
    "\1\u01ab\6\5\3\0\3\5\2\0\6\5\10\0\14\5"+
    "\1\106\11\5\3\0\3\5\2\0\6\5\10\0\14\5"+
    "\1\u012d\11\5\3\0\3\5\2\0\6\5\10\0\1\u011c"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\17\5\1\51"+
    "\6\5\3\0\3\5\2\0\6\5\10\0\7\5\1\106"+
    "\16\5\3\0\2\5\1\u01ac\2\0\6\5\10\0\26\5"+
    "\3\0\3\5\2\0\5\5\1\106\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\6\5\1\u01ad\17\5\3\0"+
    "\3\5\2\0\5\5\1\u01ae\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\2\5\1\u01af\23\5\3\0\3\5"+
    "\2\0\6\5\10\0\6\5\1\302\17\5\3\0\3\5"+
    "\2\0\6\5\10\0\5\5\1\u01b0\1\u01b1\6\5\1\u015f"+
    "\10\5\3\0\3\5\2\0\6\5\10\0\6\5\1\u01b2"+
    "\17\5\3\0\3\5\2\0\3\5\1\217\2\5\10\0"+
    "\10\5\1\356\7\5\1\u01b3\1\u01b4\4\5\3\0\3\5"+
    "\2\0\6\5\10\0\11\5\1\111\14\5\3\0\3\5"+
    "\2\0\6\5\10\0\10\5\1\217\15\5\3\0\3\5"+
    "\2\0\6\5\10\0\13\5\1\302\12\5\3\0\3\5"+
    "\2\0\4\5\1\321\1\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\10\5\1\106\15\5\3\0\3\5"+
    "\2\0\6\5\10\0\2\5\1\u01b5\23\5\3\0\3\5"+
    "\2\0\6\5\10\0\2\5\1\u01b6\23\5\3\0\3\5"+
    "\2\0\3\5\1\u01b7\2\5\10\0\3\5\1\107\22\5"+
    "\3\0\3\5\2\0\6\5\10\0\7\5\1\u01b8\16\5"+
    "\3\0\3\5\2\0\6\5\10\0\6\5\1\u0120\17\5"+
    "\3\0\3\5\2\0\4\5\1\133\1\5\10\0\26\5"+
    "\3\0\3\5\2\0\4\5\1\u015c\1\5\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\1\5\1\u01b9\24\5"+
    "\3\0\3\5\2\0\4\5\1\u01ba\1\5\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\4\5\1\u010b\1\5"+
    "\1\62\17\5\3\0\3\5\2\0\6\5\10\0\17\5"+
    "\1\106\6\5\3\0\3\5\2\0\6\5\10\0\6\5"+
    "\1\111\17\5\3\0\3\5\2\0\6\5\10\0\1\217"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\5\5\1\u012e"+
    "\20\5\3\0\3\5\2\0\1\u01bb\5\5\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\20\5\1\106\5\5"+
    "\3\0\3\5\2\0\3\5\1\301\2\5\10\0\26\5"+
    "\3\0\3\5\2\0\1\u01bc\5\5\10\0\2\5\1\u01bd"+
    "\23\5\3\0\3\5\2\0\1\106\4\5\1\u01be\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\5\5\1\217"+
    "\20\5\3\0\1\u0143\2\0\1\u0143\3\0\1\u0143\51\0"+
    "\1\u01bf\46\0\3\5\2\0\6\5\10\0\21\5\1\u0122"+
    "\4\5\3\0\3\5\2\0\6\5\10\0\15\5\1\107"+
    "\10\5\3\0\3\5\2\0\6\5\10\0\3\5\1\u01c0"+
    "\22\5\3\0\3\5\2\0\6\5\10\0\1\u017d\25\5"+
    "\3\0\3\5\2\0\6\5\10\0\15\5\1\u01c1\10\5"+
    "\3\0\3\5\2\0\6\5\10\0\2\5\1\u0150\23\5"+
    "\15\0\1\u01c2\41\0\3\5\2\0\2\5\1\u01c3\1\u01c4"+
    "\2\5\10\0\11\5\1\u01c5\14\5\3\0\3\5\2\0"+
    "\6\5\10\0\3\5\1\u01ae\22\5\3\0\3\5\2\0"+
    "\6\5\10\0\3\5\1\302\22\5\3\0\3\5\2\0"+
    "\6\5\10\0\10\5\1\u01c0\15\5\3\0\3\5\2\0"+
    "\6\5\10\0\5\5\1\106\20\5\3\0\3\5\2\0"+
    "\4\5\1\376\1\5\10\0\26\5\3\0\3\5\2\0"+
    "\1\u01c6\5\5\10\0\26\5\3\0\3\5\2\0\4\5"+
    "\1\107\1\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\10\5\1\u01c7\15\5\3\0\3\5\2\0\4\5"+
    "\1\u01c8\1\5\10\0\26\5\3\0\3\5\2\0\3\5"+
    "\1\u012e\2\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\10\5\1\u01c9\15\5\3\0\3\5\2\0\6\5"+
    "\10\0\6\5\1\u0101\17\5\3\0\3\5\2\0\6\5"+
    "\10\0\3\5\1\111\22\5\3\0\3\5\2\0\6\5"+
    "\10\0\10\5\1\340\15\5\3\0\3\5\2\0\5\5"+
    "\1\u019b\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\2\5\1\107\23\5\3\0\3\5\2\0\5\5\1\u01ca"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\3\5"+
    "\1\u01cb\22\5\3\0\3\5\2\0\6\5\10\0\1\u01cc"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\20\5\1\302"+
    "\5\5\3\0\3\5\2\0\6\5\10\0\3\5\1\u01cd"+
    "\22\5\3\0\3\5\2\0\4\5\1\u01ce\1\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\13\5\1\u01cf"+
    "\12\5\3\0\3\5\2\0\3\5\1\u01d0\2\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\3\5\1\u01d1"+
    "\5\5\1\u01d2\14\5\3\0\3\5\2\0\6\5\10\0"+
    "\10\5\1\u01d3\15\5\3\0\3\5\2\0\6\5\10\0"+
    "\10\5\1\u01d4\15\5\3\0\3\5\2\0\6\5\10\0"+
    "\5\5\1\u01d5\20\5\3\0\3\5\2\0\1\u01d6\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\5\5"+
    "\1\u01d7\20\5\3\0\3\5\2\0\5\5\1\u010b\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\6\5\1\u01d8"+
    "\17\5\3\0\3\5\2\0\6\5\10\0\16\5\1\275"+
    "\7\5\3\0\3\5\2\0\4\5\1\302\1\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\5\5\1\u01d9"+
    "\4\5\1\u01da\13\5\3\0\3\5\2\0\6\5\10\0"+
    "\2\5\1\u01db\23\5\3\0\3\5\2\0\6\5\10\0"+
    "\2\5\1\u01dc\23\5\3\0\3\5\2\0\6\5\10\0"+
    "\3\5\1\340\22\5\3\0\3\5\2\0\6\5\10\0"+
    "\3\5\1\u01dd\4\5\1\u01cc\15\5\3\0\3\5\2\0"+
    "\3\5\1\u01de\2\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\11\5\1\u01df\14\5\3\0\3\5\2\0"+
    "\6\5\10\0\3\5\1\217\22\5\3\0\3\5\2\0"+
    "\6\5\10\0\14\5\1\107\11\5\3\0\3\5\2\0"+
    "\6\5\10\0\3\5\1\u01e0\22\5\3\0\3\5\2\0"+
    "\1\u0188\5\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\13\5\1\u01e1\12\5\3\0\3\5\2\0\6\5"+
    "\10\0\10\5\1\u01e2\15\5\3\0\3\5\2\0\4\5"+
    "\1\u01e3\1\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\6\5\1\217\17\5\3\0\3\5\2\0\6\5"+
    "\10\0\5\5\1\275\20\5\3\0\3\5\2\0\6\5"+
    "\10\0\11\5\1\u01e4\14\5\3\0\3\5\2\0\6\5"+
    "\10\0\3\5\1\u01e5\22\5\3\0\3\5\2\0\3\5"+
    "\1\u01e6\2\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\2\5\1\u01e7\23\5\3\0\3\5\2\0\6\5"+
    "\10\0\11\5\1\u01e8\14\5\3\0\3\5\2\0\1\u01e9"+
    "\5\5\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\20\5\1\u01ea\5\5\3\0\3\5\2\0\6\5\10\0"+
    "\1\5\1\u0154\24\5\3\0\3\5\2\0\5\5\1\u01eb"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\3\5"+
    "\1\u01ec\22\5\3\0\3\5\2\0\6\5\10\0\2\5"+
    "\1\u0101\23\5\3\0\3\5\2\0\6\5\10\0\1\106"+
    "\7\5\1\u01ed\15\5\3\0\3\5\2\0\6\5\10\0"+
    "\1\u01ee\25\5\3\0\3\5\2\0\1\u01ef\5\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\10\5\1\356"+
    "\15\5\3\0\3\5\2\0\6\5\10\0\2\5\1\u01f0"+
    "\23\5\3\0\3\5\2\0\5\5\1\u01f1\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\1\u01f2\25\5\3\0"+
    "\3\5\2\0\6\5\10\0\14\5\1\u01f3\11\5\3\0"+
    "\2\5\1\u01ac\2\0\6\5\10\0\1\u01f4\25\5\3\0"+
    "\3\5\2\0\1\u01f5\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\u01f6\10\5\1\u01f7\14\5\3\0"+
    "\3\5\2\0\6\5\10\0\2\5\1\u01f8\23\5\3\0"+
    "\3\5\2\0\1\u0176\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\20\5\1\340\5\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\u01f9\25\5\3\0\3\5\2\0"+
    "\1\u01fa\5\5\10\0\26\5\3\0\3\5\2\0\1\u01fb"+
    "\5\5\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\11\5\1\217\14\5\3\0\3\5\2\0\5\5\1\u01fc"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\2\5"+
    "\1\u01fd\23\5\3\0\3\5\2\0\6\5\10\0\1\5"+
    "\1\u01fe\21\5\1\u01ff\1\5\1\u0200\3\0\3\5\2\0"+
    "\5\5\1\u0201\10\0\26\5\3\0\3\5\2\0\1\u014a"+
    "\5\5\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\23\5\1\106\2\5\3\0\3\5\2\0\6\5\10\0"+
    "\6\5\1\u0202\17\5\3\0\3\5\2\0\6\5\10\0"+
    "\3\5\1\u0203\12\5\1\275\7\5\3\0\3\5\2\0"+
    "\3\5\1\u0204\2\5\10\0\3\5\1\217\22\5\3\0"+
    "\3\5\2\0\4\5\1\u01ed\1\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\11\5\1\u0205\14\5\3\0"+
    "\3\5\2\0\6\5\10\0\2\5\1\u0206\23\5\3\0"+
    "\3\5\2\0\6\5\10\0\1\111\25\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\5\1\u0207\24\5\3\0\3\5"+
    "\2\0\1\127\5\5\10\0\26\5\3\0\3\5\2\0"+
    "\5\5\1\u0208\10\0\26\5\3\0\3\5\2\0\1\u0106"+
    "\5\5\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\11\5\1\327\14\5\3\0\3\5\2\0\6\5\10\0"+
    "\11\5\1\302\14\5\3\0\3\5\2\0\1\u0209\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\11\5"+
    "\1\u020a\14\5\3\0\3\5\2\0\1\u020b\5\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\1\u020c\25\5"+
    "\3\0\3\5\2\0\6\5\10\0\11\5\1\u020d\14\5"+
    "\3\0\3\5\2\0\6\5\10\0\22\5\1\u018d\3\5"+
    "\3\0\3\5\2\0\1\u0171\5\5\10\0\26\5\3\0"+
    "\3\5\2\0\1\u020e\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\11\5\1\u020f\14\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\u0210\25\5\3\0\3\5\2\0"+
    "\1\u0211\5\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\2\5\1\u0212\23\5\3\0\3\5\2\0\6\5"+
    "\10\0\11\5\1\u0213\14\5\3\0\3\5\2\0\6\5"+
    "\10\0\3\5\1\212\22\5\3\0\3\5\2\0\6\5"+
    "\10\0\22\5\1\u0214\3\5\51\0\1\u0215\5\0\3\5"+
    "\2\0\3\5\1\302\2\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\2\5\1\u0216\23\5\12\0\1\u01c2"+
    "\1\56\43\0\3\5\2\0\2\5\1\u01c3\1\u01c4\2\5"+
    "\10\0\26\5\3\0\3\5\2\0\4\5\1\u0217\1\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\22\5"+
    "\1\106\3\5\3\0\3\5\2\0\6\5\10\0\6\5"+
    "\1\u011c\17\5\3\0\3\5\2\0\6\5\10\0\17\5"+
    "\1\340\6\5\3\0\3\5\2\0\6\5\10\0\1\272"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\3\5\1\u0218"+
    "\22\5\3\0\3\5\2\0\6\5\10\0\11\5\1\u0219"+
    "\14\5\3\0\3\5\2\0\6\5\10\0\3\5\1\107"+
    "\22\5\3\0\3\5\2\0\6\5\10\0\3\5\1\u021a"+
    "\22\5\3\0\3\5\2\0\5\5\1\217\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\1\51\25\5\3\0"+
    "\3\5\2\0\6\5\10\0\10\5\1\u01e8\15\5\3\0"+
    "\3\5\2\0\6\5\10\0\11\5\1\u021b\14\5\3\0"+
    "\3\5\2\0\3\5\1\u017d\2\5\10\0\26\5\3\0"+
    "\3\5\2\0\3\5\1\u021c\2\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\3\5\1\u01b3\22\5\3\0"+
    "\3\5\2\0\6\5\10\0\11\5\1\150\14\5\3\0"+
    "\3\5\2\0\6\5\10\0\5\5\1\u021d\20\5\3\0"+
    "\3\5\2\0\5\5\1\u0198\10\0\1\u013a\25\5\3\0"+
    "\3\5\2\0\6\5\10\0\10\5\1\u021e\15\5\3\0"+
    "\3\5\2\0\6\5\10\0\2\5\1\u021f\23\5\3\0"+
    "\3\5\2\0\6\5\10\0\10\5\1\u0220\15\5\3\0"+
    "\3\5\2\0\6\5\10\0\11\5\1\142\14\5\3\0"+
    "\3\5\2\0\1\57\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\11\5\1\u017d\14\5\3\0\3\5"+
    "\2\0\6\5\10\0\22\5\1\u0221\3\5\3\0\3\5"+
    "\2\0\6\5\10\0\6\5\1\u01a9\17\5\3\0\3\5"+
    "\2\0\1\u0222\5\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\1\u01c6\25\5\3\0\3\5\2\0\4\5"+
    "\1\u0106\1\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\11\5\1\u0223\14\5\3\0\3\5\2\0\6\5"+
    "\10\0\10\5\1\u0224\15\5\3\0\3\5\2\0\6\5"+
    "\10\0\11\5\1\u0225\14\5\3\0\3\5\2\0\6\5"+
    "\10\0\2\5\1\u0226\23\5\3\0\3\5\2\0\6\5"+
    "\10\0\3\5\1\u010b\22\5\3\0\3\5\2\0\6\5"+
    "\10\0\5\5\1\u0227\20\5\3\0\3\5\2\0\6\5"+
    "\10\0\20\5\1\u0228\5\5\3\0\3\5\2\0\6\5"+
    "\10\0\1\106\25\5\3\0\3\5\2\0\6\5\10\0"+
    "\11\5\1\u0106\14\5\3\0\3\5\2\0\6\5\10\0"+
    "\3\5\1\u018d\22\5\3\0\3\5\2\0\6\5\10\0"+
    "\1\5\1\107\24\5\3\0\3\5\2\0\6\5\10\0"+
    "\3\5\1\u0229\22\5\3\0\3\5\2\0\3\5\1\u022a"+
    "\2\5\10\0\26\5\3\0\3\5\2\0\1\u022b\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\10\5"+
    "\1\113\15\5\3\0\3\5\2\0\6\5\10\0\1\5"+
    "\1\u022c\24\5\3\0\3\5\2\0\6\5\10\0\15\5"+
    "\1\u022d\10\5\3\0\3\5\2\0\6\5\10\0\6\5"+
    "\1\u022e\17\5\3\0\3\5\2\0\6\5\10\0\6\5"+
    "\1\u01c1\17\5\3\0\3\5\2\0\6\5\10\0\11\5"+
    "\1\u022f\14\5\3\0\3\5\2\0\3\5\1\u0153\2\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\3\5"+
    "\1\u0230\22\5\3\0\3\5\2\0\6\5\10\0\2\5"+
    "\1\u0231\23\5\3\0\3\5\2\0\6\5\10\0\5\5"+
    "\1\372\20\5\3\0\3\5\2\0\6\5\10\0\5\5"+
    "\1\u0232\20\5\3\0\3\5\2\0\6\5\10\0\10\5"+
    "\1\u01c6\15\5\3\0\3\5\2\0\6\5\10\0\1\u0233"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\20\5\1\u0122"+
    "\5\5\3\0\3\5\2\0\4\5\1\u0234\1\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\1\u0235\25\5"+
    "\3\0\3\5\2\0\6\5\10\0\1\u0236\25\5\3\0"+
    "\3\5\2\0\6\5\10\0\5\5\1\357\13\5\1\302"+
    "\4\5\3\0\3\5\2\0\6\5\10\0\5\5\1\u0237"+
    "\20\5\3\0\3\5\2\0\6\5\10\0\1\u0238\25\5"+
    "\3\0\3\5\2\0\6\5\10\0\11\5\1\u0239\14\5"+
    "\3\0\3\5\2\0\6\5\10\0\11\5\1\u0101\14\5"+
    "\3\0\3\5\2\0\1\u023a\5\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\3\5\1\142\22\5\3\0"+
    "\3\5\2\0\6\5\10\0\5\5\1\312\20\5\3\0"+
    "\3\5\2\0\6\5\10\0\1\5\1\u023b\24\5\3\0"+
    "\3\5\2\0\6\5\10\0\3\5\1\206\22\5\3\0"+
    "\3\5\2\0\5\5\1\u023c\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\21\5\1\275\4\5\3\0\3\5"+
    "\2\0\3\5\1\u023d\2\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\5\1\u023e\24\5\3\0\3\5"+
    "\2\0\1\u023f\5\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\16\5\1\340\7\5\3\0\3\5\2\0"+
    "\6\5\10\0\1\u0240\25\5\10\0\1\u0241\46\0\3\5"+
    "\2\0\5\5\1\u0242\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\11\5\1\u0243\14\5\3\0\3\5\2\0"+
    "\6\5\10\0\13\5\1\107\1\5\1\u0236\10\5\3\0"+
    "\3\5\2\0\1\301\5\5\10\0\1\323\25\5\3\0"+
    "\3\5\2\0\6\5\10\0\13\5\1\u0244\12\5\3\0"+
    "\3\5\2\0\3\5\1\357\2\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\1\u0245\25\5\3\0\3\5"+
    "\2\0\3\5\1\u0246\2\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\1\115\25\5\3\0\3\5\2\0"+
    "\3\5\1\u0247\2\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\11\5\1\u0248\14\5\3\0\3\5\2\0"+
    "\3\5\1\u0249\2\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\1\5\1\u024a\24\5\3\0\3\5\2\0"+
    "\3\5\1\u024b\2\5\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\2\5\1\u024c\23\5\3\0\3\5\2\0"+
    "\6\5\10\0\11\5\1\u024d\14\5\3\0\3\5\2\0"+
    "\6\5\10\0\2\5\1\u024e\23\5\3\0\2\5\1\u024f"+
    "\2\0\6\5\10\0\26\5\3\0\3\5\2\0\3\5"+
    "\1\u010b\2\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\2\5\1\u0250\23\5\3\0\3\5\2\0\6\5"+
    "\10\0\3\5\1\u0251\22\5\3\0\3\5\2\0\1\u0252"+
    "\5\5\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\10\5\1\u01eb\15\5\3\0\3\5\2\0\6\5\10\0"+
    "\2\5\1\u0253\23\5\3\0\3\5\2\0\3\5\1\u0254"+
    "\2\5\10\0\26\5\3\0\3\5\2\0\6\5\10\0"+
    "\1\u0255\25\5\3\0\3\5\2\0\1\106\5\5\10\0"+
    "\11\5\1\u015a\14\5\3\0\3\5\2\0\6\5\10\0"+
    "\15\5\1\u0256\10\5\3\0\3\5\2\0\6\5\10\0"+
    "\2\5\1\u0257\23\5\3\0\3\5\2\0\1\u020c\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\15\5"+
    "\1\u0150\10\5\3\0\3\5\2\0\6\5\10\0\2\5"+
    "\1\u018d\23\5\3\0\3\5\2\0\6\5\10\0\11\5"+
    "\1\u0170\14\5\3\0\3\5\2\0\5\5\1\u0258\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\2\5\1\u0259"+
    "\23\5\3\0\3\5\2\0\3\5\1\u025a\2\5\10\0"+
    "\26\5\3\0\3\5\2\0\4\5\1\u01cc\1\5\10\0"+
    "\26\5\3\0\3\5\2\0\1\u025b\5\5\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\16\5\1\u025c\7\5"+
    "\3\0\3\5\2\0\1\u025d\5\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\23\5\1\u025e\2\5\3\0"+
    "\3\5\2\0\6\5\10\0\6\5\1\u0236\17\5\34\0"+
    "\1\u025f\22\0\3\5\2\0\5\5\1\u01c3\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\12\5\1\u01a9\13\5"+
    "\3\0\3\5\2\0\4\5\1\u0260\1\5\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\20\5\1\u0261\5\5"+
    "\3\0\3\5\2\0\6\5\10\0\21\5\1\u0196\4\5"+
    "\3\0\3\5\2\0\1\u0262\5\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\16\5\1\u023b\7\5\3\0"+
    "\3\5\2\0\6\5\10\0\6\5\1\264\17\5\3\0"+
    "\3\5\2\0\6\5\10\0\6\5\1\u0263\17\5\3\0"+
    "\3\5\2\0\6\5\10\0\4\5\1\u0264\21\5\3\0"+
    "\3\5\2\0\6\5\10\0\6\5\1\u0265\17\5\3\0"+
    "\3\5\2\0\6\5\10\0\11\5\1\u0266\14\5\3\0"+
    "\2\5\1\u0267\2\0\6\5\10\0\26\5\3\0\3\5"+
    "\2\0\1\301\5\5\10\0\26\5\3\0\3\5\2\0"+
    "\1\u0268\5\5\10\0\26\5\3\0\3\5\2\0\6\5"+
    "\10\0\5\5\1\u0269\20\5\3\0\3\5\2\0\6\5"+
    "\10\0\11\5\1\u026a\14\5\3\0\3\5\2\0\6\5"+
    "\10\0\10\5\1\u026b\15\5\3\0\3\5\2\0\6\5"+
    "\10\0\1\u026c\25\5\3\0\3\5\2\0\6\5\10\0"+
    "\4\5\1\u026d\21\5\3\0\3\5\2\0\6\5\10\0"+
    "\16\5\1\204\7\5\3\0\3\5\2\0\6\5\10\0"+
    "\16\5\1\264\7\5\3\0\3\5\2\0\6\5\10\0"+
    "\3\5\1\u026e\22\5\3\0\3\5\2\0\6\5\10\0"+
    "\3\5\1\u012e\22\5\3\0\3\5\2\0\6\5\10\0"+
    "\2\5\1\u0269\23\5\3\0\3\5\2\0\6\5\10\0"+
    "\2\5\1\u0251\23\5\3\0\3\5\2\0\6\5\10\0"+
    "\15\5\1\133\10\5\3\0\2\5\1\u026f\2\0\6\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\10\5"+
    "\1\u0122\15\5\3\0\3\5\2\0\6\5\10\0\1\u0270"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\5\5\1\u0271"+
    "\6\5\1\u0272\11\5\3\0\3\5\2\0\6\5\10\0"+
    "\6\5\1\u0150\17\5\3\0\3\5\2\0\4\5\1\u017e"+
    "\1\5\10\0\1\5\1\u0101\1\u0273\23\5\3\0\3\5"+
    "\2\0\6\5\10\0\3\5\1\u0121\22\5\3\0\3\5"+
    "\2\0\6\5\10\0\2\5\1\u0274\23\5\3\0\3\5"+
    "\2\0\3\5\1\u0275\2\5\10\0\26\5\3\0\3\5"+
    "\2\0\3\5\1\276\2\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\5\5\1\u0276\20\5\3\0\2\5"+
    "\1\u0277\2\0\6\5\10\0\6\5\1\u0263\17\5\3\0"+
    "\3\5\2\0\6\5\10\0\10\5\1\u012d\15\5\3\0"+
    "\3\5\2\0\6\5\10\0\7\5\1\u0278\10\5\1\u0279"+
    "\5\5\3\0\3\5\2\0\4\5\1\u027a\1\5\10\0"+
    "\26\5\3\0\3\5\2\0\6\5\10\0\11\5\1\u027b"+
    "\14\5\3\0\3\5\2\0\1\u027c\5\5\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\11\5\1\u027d\14\5"+
    "\3\0\3\5\2\0\6\5\10\0\1\323\25\5\3\0"+
    "\3\5\2\0\6\5\10\0\2\5\1\u0211\23\5\3\0"+
    "\3\5\2\0\6\5\10\0\10\5\1\u027e\15\5\3\0"+
    "\3\5\2\0\6\5\10\0\11\5\1\u027f\14\5\3\0"+
    "\3\5\2\0\6\5\10\0\10\5\1\u0280\15\5\3\0"+
    "\3\5\2\0\6\5\10\0\11\5\1\u0281\14\5\3\0"+
    "\3\5\2\0\6\5\10\0\1\5\1\u019c\24\5\3\0"+
    "\3\5\2\0\6\5\10\0\20\5\1\u0282\5\5\3\0"+
    "\3\5\2\0\6\5\10\0\4\5\1\u0283\21\5\3\0"+
    "\3\5\2\0\6\5\10\0\20\5\1\u0284\5\5\3\0"+
    "\3\5\2\0\4\5\1\u0285\1\5\10\0\26\5\3\0"+
    "\3\5\2\0\3\5\1\u0286\2\5\10\0\26\5\3\0"+
    "\3\5\2\0\4\5\1\356\1\5\10\0\26\5\3\0"+
    "\3\5\2\0\3\5\1\u019b\2\5\10\0\26\5\3\0"+
    "\3\5\2\0\6\5\10\0\11\5\1\u0287\14\5\3\0"+
    "\3\5\2\0\6\5\10\0\15\5\1\u0288\10\5\3\0"+
    "\3\5\2\0\1\u0289\5\5\10\0\26\5\3\0\3\5"+
    "\2\0\6\5\10\0\3\5\1\372\22\5\3\0\3\5"+
    "\2\0\6\5\10\0\5\5\1\u0196\20\5\3\0\3\5"+
    "\2\0\5\5\1\u028a\10\0\26\5\3\0\3\5\2\0"+
    "\6\5\10\0\7\5\1\u028b\16\5\3\0\3\5\2\0"+
    "\6\5\10\0\5\5\1\u01d9\20\5\3\0\3\5\2\0"+
    "\6\5\10\0\1\u028c\25\5\3\0\3\5\2\0\6\5"+
    "\10\0\3\5\1\u028d\22\5\3\0\3\5\2\0\6\5"+
    "\10\0\3\5\1\u028e\22\5\3\0\3\5\2\0\6\5"+
    "\10\0\1\u028f\25\5\3\0\3\5\2\0\6\5\10\0"+
    "\11\5\1\u0290\14\5\3\0\3\5\2\0\6\5\10\0"+
    "\5\5\1\u0291\20\5\3\0\3\5\2\0\6\5\10\0"+
    "\2\5\1\u0292\23\5\3\0\3\5\2\0\1\u0293\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\4\5"+
    "\1\u0294\21\5\3\0\3\5\2\0\6\5\10\0\1\5"+
    "\1\u0295\1\u0274\23\5\3\0\3\5\2\0\1\u0296\5\5"+
    "\10\0\26\5\3\0\3\5\2\0\6\5\10\0\2\5"+
    "\1\u0297\23\5\3\0\3\5\2\0\6\5\10\0\1\u0298"+
    "\25\5\3\0\3\5\2\0\6\5\10\0\11\5\1\u0299"+
    "\14\5\3\0\3\5\2\0\5\5\1\u029a\10\0\26\5"+
    "\3\0\3\5\2\0\6\5\10\0\5\5\1\u0293\20\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28204];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\1\1\0\1\11\5\1\1\0\1\11\1\0"+
    "\27\1\1\0\6\1\1\0\16\1\1\11\1\1\1\11"+
    "\1\0\146\1\1\0\10\1\1\0\24\1\2\0\175\1"+
    "\1\0\6\1\1\0\163\1\1\0\125\1\1\0\53\1"+
    "\1\0\35\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private boolean _existenTokens = false;

    public boolean existenTokens() {
        return this._existenTokens;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexemas(java.io.Reader in) {
  
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 400) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        this._existenTokens = false;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MyToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { MyToken token = new MyToken("Simbolo", yytext(), yyline, yylength(), yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 11: break;
          case 2: 
            { MyToken token = new MyToken("DatoEntero", yytext(), yyline, yylength(), yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 12: break;
          case 3: 
            { if (yytext().length() <= 31) {
        MyToken token = new MyToken("Identificador", yytext(), yyline, yylength(), yycolumn);
        this._existenTokens = true;
        return token;
    } else {
        MyToken token = new MyToken("IdentificadorTruncado", yytext(), yyline, yylength(), yycolumn);
        this._existenTokens = true;
        return token;
    }
            } 
            // fall through
          case 13: break;
          case 4: 
            { // No hacer nada
            } 
            // fall through
          case 14: break;
          case 5: 
            { MyToken token = new MyToken("Comentario", yytext(), yyline, yylength(), yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 15: break;
          case 6: 
            { MyToken token = new MyToken("DatoFloat", yytext(), yyline, yylength(), yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 16: break;
          case 7: 
            { MyToken token = new MyToken("DatoBit", yytext(), yyline, yylength(), yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 17: break;
          case 8: 
            { MyToken token = new MyToken("PalabraReservada", yytext(), yyline, yylength(), yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 18: break;
          case 9: 
            { MyToken token = new MyToken("ErrorString", yytext(), yyline, yylength(), yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 19: break;
          case 10: 
            { MyToken token = new MyToken("DatoString", yytext(), yyline, yylength(), yycolumn);
    this._existenTokens = true;
    return token;
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
