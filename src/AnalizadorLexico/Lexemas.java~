/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;
import java.util.List;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexemas.flex</tt>
 */
public class Lexemas {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIOMULTI = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\16\2\0\1\20\22\0\1\20\1\27\1\0\1\43"+
    "\1\0\1\23\1\30\1\15\1\36\1\37\1\21\1\1\1\33\1\2"+
    "\1\7\1\22\1\3\1\3\10\3\1\0\1\32\1\24\1\25\1\26"+
    "\1\0\1\42\1\44\1\57\1\52\1\45\1\10\1\66\1\62\1\53"+
    "\1\55\1\70\1\60\1\14\1\64\1\12\1\54\1\61\1\71\1\47"+
    "\1\51\1\46\1\13\1\65\1\63\1\67\1\50\1\56\1\34\1\0"+
    "\1\35\1\0\1\5\1\0\4\4\1\11\25\4\1\40\1\31\1\41"+
    "\66\0\1\17\u05ab\0\12\6\206\0\12\6\306\0\12\6\u019c\0\12\6"+
    "\166\0\12\6\166\0\12\6\166\0\12\6\166\0\12\6\166\0\12\6"+
    "\166\0\12\6\166\0\12\6\166\0\12\6\166\0\12\6\140\0\12\6"+
    "\166\0\12\6\106\0\12\6\u0116\0\12\6\106\0\12\6\u0746\0\12\6"+
    "\46\0\12\6\u012c\0\12\6\200\0\12\6\246\0\12\6\6\0\12\6"+
    "\266\0\12\6\126\0\12\6\206\0\12\6\6\0\12\6\u89c6\0\12\6"+
    "\u02a6\0\12\6\46\0\12\6\306\0\12\6\26\0\12\6\126\0\12\6"+
    "\u0196\0\12\6\u5316\0\12\6\u0586\0\12\6\u0bbc\0\12\6\200\0\12\6"+
    "\74\0\12\6\220\0\12\6\u0116\0\12\6\u0156\0\12\6\166\0\12\6"+
    "\u0176\0\12\6\146\0\12\6\146\0\12\6\u01a6\0\12\6\u0366\0\12\6"+
    "\u4e06\0\12\6\346\0\12\6\u6c74\0\62\6\u1150\0\12\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\4\5\1\1\1\7\1\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\1\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\24\5\1\31"+
    "\1\10\1\11\12\31\1\0\1\32\1\33\1\0\11\5"+
    "\1\34\7\5\1\35\1\36\2\35\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\4\5\1\34\1\5\1\34\17\5\1\34\33\5\1\34"+
    "\1\5\1\34\3\5\2\34\1\5\1\34\24\5\1\34"+
    "\24\5\1\52\1\0\1\33\1\34\16\5\1\34\13\5"+
    "\1\34\6\5\1\34\40\5\1\34\13\5\1\34\24\5"+
    "\1\34\1\5\1\34\15\5\1\34\23\5\1\34\12\5"+
    "\1\34\2\5\1\33\1\0\6\5\1\34\21\5\1\34"+
    "\13\5\1\34\4\5\1\34\1\5\1\34\40\5\1\34"+
    "\14\5\2\34\21\5\1\34\4\5\2\34\6\5\1\0"+
    "\23\5\1\34\34\5\1\34\35\5\1\34\3\5\1\0"+
    "\1\34\51\5\1\0\10\5\1\34\4\5\1\34\1\5"+
    "\1\34\14\5\1\34\11\5\1\34\3\5\1\34\33\5"+
    "\1\34\21\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[696];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\164\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\164\0\u02f2"+
    "\0\164\0\u032c\0\164\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\164\0\164\0\u04c2\0\164\0\u04fc\0\164\0\u0536"+
    "\0\164\0\164\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\164"+
    "\0\u0a32\0\164\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u0196\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u02b8\0\164\0\164\0\u02f2\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\164"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u015c\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00"+
    "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270"+
    "\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440"+
    "\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\164\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976"+
    "\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u13b6\0\u2e38\0\u2e72\0\u2eac"+
    "\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c"+
    "\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c"+
    "\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c"+
    "\0\u3456\0\u2976\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2"+
    "\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952"+
    "\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22"+
    "\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2"+
    "\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2"+
    "\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092"+
    "\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262"+
    "\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432"+
    "\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602"+
    "\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2"+
    "\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2"+
    "\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72"+
    "\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42"+
    "\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12"+
    "\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2"+
    "\0\u511c\0\u5156\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2"+
    "\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4\0\u540e\0\u5448\0\u5482"+
    "\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4\0\u55de\0\u5618\0\u5652"+
    "\0\u568c\0\u56c6\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822"+
    "\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2"+
    "\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14\0\u446c\0\u5b4e\0\u5b88"+
    "\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e\0\u5d58"+
    "\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28"+
    "\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084\0\u60be\0\u60f8"+
    "\0\u6132\0\u616c\0\u61a6\0\u61e0\0\u621a\0\u6254\0\u628e\0\u62c8"+
    "\0\u6302\0\u633c\0\u6376\0\u63b0\0\u63ea\0\u6424\0\u645e\0\u6498"+
    "\0\u64d2\0\u2c2e\0\u650c\0\u6546\0\u6580\0\u65ba\0\u65f4\0\u662e"+
    "\0\u6668\0\u66a2\0\u66dc\0\u6716\0\u6750\0\u678a\0\u67c4\0\u67fe"+
    "\0\u6838\0\u6872\0\u68ac\0\u68e6\0\u6920\0\u695a\0\u6994\0\u69ce"+
    "\0\u6a08\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e"+
    "\0\u6bd8\0\u6c12\0\u6c4c\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34\0\u6d6e"+
    "\0\u6da8\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca\0\u6f04\0\u6f3e"+
    "\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\u3fe4\0\u7060\0\u709a\0\u70d4"+
    "\0\u710e\0\u7148\0\u7182\0\u71bc\0\u71f6\0\u7230\0\u726a\0\u72a4"+
    "\0\u72de\0\u7318\0\u7352\0\u738c\0\u73c6\0\u7400\0\u743a\0\u7474"+
    "\0\u4a50\0\u74ae\0\u74e8\0\u7522\0\u755c\0\u2ca2\0\u7596\0\u75d0"+
    "\0\u760a\0\u7644\0\u767e\0\u76b8\0\u76f2\0\u772c\0\u7766\0\u77a0"+
    "\0\u77da\0\u7814\0\u784e\0\u7888\0\u78c2\0\u78fc\0\u7936\0\u7970"+
    "\0\u79aa\0\u79e4\0\u7a1e\0\u7a58\0\u7a92\0\u7acc\0\u7b06\0\u7b40"+
    "\0\u7b7a\0\u7bb4\0\u7bee\0\u7c28\0\u7c62\0\u7c9c\0\u7cd6\0\u7d10"+
    "\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8\0\u7e32\0\u7e6c\0\u7ea6\0\u7ee0"+
    "\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8\0\u8002\0\u803c\0\u8076\0\u80b0"+
    "\0\u7936\0\u80ea\0\u8124\0\u815e\0\u34ca\0\u8198\0\u81d2\0\u2b46"+
    "\0\u820c\0\u8246\0\u8280\0\u82ba\0\u82f4\0\u1a0e\0\u832e\0\u8368"+
    "\0\u83a2\0\u83dc\0\u8416\0\u8450\0\164\0\u848a\0\u84c4\0\u84fe"+
    "\0\u8538\0\u8572\0\u85ac\0\u85e6\0\u8620\0\u865a\0\u8694\0\u86ce"+
    "\0\u8708\0\u8742\0\u877c\0\u87b6\0\u87f0\0\u882a\0\u8864\0\u889e"+
    "\0\u88d8\0\u8912\0\u894c\0\u8986\0\u89c0\0\u89fa\0\u8a34\0\u8a6e"+
    "\0\u8aa8\0\u8ae2\0\u8b1c\0\u8b56\0\u8b90\0\u8bca\0\u8c04\0\u8c3e"+
    "\0\u8c78\0\u8cb2\0\u8cec\0\u8d26\0\u8d60\0\u8d9a\0\u8dd4\0\u8e0e"+
    "\0\u8e48\0\u8e82\0\u8ebc\0\u8ef6\0\u8f30\0\u8f6a\0\u8fa4\0\u8fde"+
    "\0\u8694\0\u9018\0\u9052\0\u908c\0\u90c6\0\u9100\0\u913a\0\u9174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[696];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\7\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\17\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\7"+
    "\1\67\1\7\21\70\1\71\1\72\1\70\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\2\70\1\101\1\70\1\102"+
    "\1\70\1\103\2\70\1\104\26\70\75\0\1\6\2\0"+
    "\1\105\65\0\1\106\1\6\2\0\1\105\66\0\1\6"+
    "\2\0\1\105\1\107\2\110\63\0\3\7\2\0\5\7"+
    "\27\0\26\7\3\0\1\105\2\0\1\105\1\107\2\110"+
    "\63\0\3\7\2\0\2\7\1\111\1\7\1\112\27\0"+
    "\3\7\1\113\1\7\1\114\15\7\1\115\2\7\3\0"+
    "\3\7\2\0\1\116\2\7\1\117\1\7\27\0\1\120"+
    "\5\7\1\121\1\7\1\122\15\7\3\0\3\7\2\0"+
    "\2\7\1\123\2\7\27\0\5\7\1\124\7\7\1\125"+
    "\10\7\3\0\3\7\2\0\1\126\4\7\27\0\1\127"+
    "\7\7\1\130\1\131\14\7\15\132\1\133\1\134\53\132"+
    "\16\135\1\134\1\133\52\135\21\0\1\136\75\0\1\137"+
    "\71\0\1\140\71\0\1\141\71\0\1\142\74\0\1\143"+
    "\72\0\1\144\75\0\1\145\73\0\1\146\73\0\1\147"+
    "\73\0\1\150\31\0\3\7\2\0\2\7\1\151\1\152"+
    "\1\153\27\0\1\7\1\154\1\155\1\156\1\7\1\157"+
    "\1\160\4\7\1\161\5\7\1\162\4\7\3\0\3\7"+
    "\2\0\1\163\2\7\1\164\1\7\27\0\1\165\2\7"+
    "\1\166\4\7\1\167\1\170\1\7\1\171\12\7\3\0"+
    "\3\7\2\0\1\172\4\7\27\0\1\173\2\7\1\174"+
    "\1\7\1\175\1\7\1\176\1\177\1\200\14\7\3\0"+
    "\3\7\2\0\1\201\2\7\1\202\1\7\27\0\1\203"+
    "\7\7\1\204\1\205\14\7\3\0\3\7\2\0\1\206"+
    "\4\7\27\0\26\7\3\0\3\7\2\0\1\207\2\7"+
    "\1\210\1\7\27\0\1\211\1\7\1\212\1\7\1\213"+
    "\1\7\1\214\1\215\1\216\1\217\3\7\1\220\2\7"+
    "\1\221\4\7\1\222\3\0\3\7\2\0\3\7\1\223"+
    "\1\224\27\0\1\225\2\7\1\226\3\7\1\227\1\230"+
    "\15\7\3\0\3\7\2\0\5\7\27\0\1\231\7\7"+
    "\1\232\15\7\3\0\3\7\2\0\2\7\1\233\1\234"+
    "\1\7\27\0\3\7\1\235\2\7\1\236\6\7\1\237"+
    "\3\7\1\240\1\241\3\7\3\0\3\7\2\0\2\7"+
    "\1\242\2\7\27\0\1\7\1\243\3\7\1\244\12\7"+
    "\1\245\1\7\1\155\3\7\3\0\3\7\2\0\5\7"+
    "\27\0\10\7\1\246\15\7\3\0\3\7\2\0\1\247"+
    "\2\7\1\250\1\7\27\0\1\251\2\7\1\252\1\155"+
    "\3\7\1\253\1\254\14\7\3\0\3\7\2\0\1\255"+
    "\4\7\27\0\11\7\1\256\14\7\3\0\3\7\2\0"+
    "\1\257\2\7\1\260\1\261\27\0\1\262\2\7\1\263"+
    "\4\7\1\264\1\265\14\7\3\0\3\7\2\0\1\266"+
    "\3\7\1\267\27\0\3\7\1\270\4\7\1\271\15\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\272\2\7\1\273"+
    "\3\7\1\274\1\275\1\276\14\7\3\0\3\7\2\0"+
    "\1\277\4\7\27\0\1\300\7\7\1\301\1\302\14\7"+
    "\3\0\3\7\2\0\1\303\4\7\27\0\1\304\10\7"+
    "\1\305\14\7\3\0\3\7\2\0\1\306\2\7\1\307"+
    "\1\310\27\0\1\311\2\7\1\312\4\7\1\313\1\314"+
    "\14\7\3\0\3\7\2\0\5\7\27\0\10\7\1\315"+
    "\15\7\22\0\1\316\47\0\72\106\3\0\1\107\2\0"+
    "\1\107\1\0\2\110\61\0\2\317\1\320\2\0\1\320"+
    "\66\0\3\7\2\0\5\7\27\0\1\7\1\321\24\7"+
    "\3\0\3\7\2\0\5\7\27\0\5\7\1\156\20\7"+
    "\3\0\3\7\2\0\5\7\27\0\3\7\1\322\22\7"+
    "\3\0\3\7\2\0\5\7\27\0\6\7\1\323\17\7"+
    "\3\0\3\7\2\0\1\324\4\7\27\0\2\7\1\325"+
    "\3\7\1\326\2\7\1\327\14\7\3\0\3\7\2\0"+
    "\5\7\27\0\23\7\1\266\2\7\3\0\3\7\2\0"+
    "\4\7\1\330\27\0\20\7\1\331\5\7\3\0\3\7"+
    "\2\0\5\7\27\0\2\7\1\332\15\7\1\333\5\7"+
    "\3\0\3\7\2\0\5\7\27\0\7\7\1\206\16\7"+
    "\3\0\3\7\2\0\2\7\1\156\2\7\27\0\2\7"+
    "\1\155\3\7\1\334\17\7\3\0\3\7\2\0\5\7"+
    "\27\0\11\7\1\335\2\7\1\336\1\337\10\7\3\0"+
    "\3\7\2\0\1\340\4\7\27\0\1\341\10\7\1\342"+
    "\14\7\3\0\3\7\2\0\5\7\27\0\1\7\1\343"+
    "\13\7\1\344\10\7\3\0\3\7\2\0\5\7\27\0"+
    "\1\345\20\7\1\346\1\266\3\7\3\0\3\7\2\0"+
    "\2\7\1\347\2\7\27\0\5\7\1\266\20\7\3\0"+
    "\3\7\2\0\5\7\27\0\1\350\5\7\1\351\10\7"+
    "\1\344\6\7\3\0\3\7\2\0\2\7\1\352\2\7"+
    "\27\0\14\7\1\156\11\7\3\0\3\7\2\0\5\7"+
    "\27\0\1\7\1\155\2\7\1\155\21\7\3\0\3\7"+
    "\2\0\5\7\27\0\2\7\1\353\23\7\3\0\3\7"+
    "\2\0\4\7\1\354\27\0\2\7\1\344\23\7\3\0"+
    "\3\7\2\0\5\7\27\0\2\155\24\7\3\0\3\7"+
    "\2\0\1\155\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\355\1\155\17\7\3\0\3\7"+
    "\2\0\5\7\27\0\2\7\1\356\23\7\3\0\3\7"+
    "\2\0\5\7\27\0\5\7\1\357\20\7\3\0\3\7"+
    "\2\0\5\7\27\0\16\7\1\155\7\7\3\0\3\7"+
    "\2\0\2\7\1\255\1\7\1\360\27\0\1\361\4\7"+
    "\1\362\1\363\13\7\1\364\3\7\3\0\3\7\2\0"+
    "\5\7\27\0\20\7\1\365\5\7\3\0\3\7\2\0"+
    "\5\7\27\0\2\7\1\366\1\7\1\155\21\7\3\0"+
    "\3\7\2\0\5\7\27\0\10\7\1\365\15\7\3\0"+
    "\3\7\2\0\3\7\1\367\1\7\27\0\20\7\1\370"+
    "\5\7\3\0\3\7\2\0\5\7\27\0\1\371\4\7"+
    "\1\372\20\7\3\0\3\7\2\0\5\7\27\0\6\7"+
    "\1\373\17\7\3\0\3\7\2\0\5\7\27\0\20\7"+
    "\1\374\2\7\1\375\2\7\3\0\3\7\2\0\5\7"+
    "\27\0\13\7\1\376\12\7\3\0\3\7\2\0\3\7"+
    "\1\377\1\7\27\0\1\u0100\3\7\1\u0101\4\7\1\u0102"+
    "\14\7\3\0\3\7\2\0\1\u0103\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\1\u0104\4\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\15\7\1\155\10\7\3\0"+
    "\3\7\2\0\5\7\27\0\20\7\1\u0105\5\7\3\0"+
    "\3\7\2\0\4\7\1\u0106\27\0\1\u0107\1\7\1\u0108"+
    "\2\7\1\u0109\1\u010a\6\7\1\u010b\3\7\1\u010c\1\u010d"+
    "\3\7\3\0\3\7\2\0\4\7\1\156\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\11\7\1\u010e\14\7"+
    "\3\0\3\7\2\0\4\7\1\u010f\27\0\17\7\1\u0110"+
    "\6\7\3\0\3\7\2\0\5\7\27\0\16\7\1\u0111"+
    "\7\7\3\0\3\7\2\0\5\7\27\0\1\u0112\25\7"+
    "\3\0\3\7\2\0\4\7\1\u0113\27\0\2\7\1\u0114"+
    "\2\7\1\u0115\1\u0116\11\7\1\u0117\5\7\3\0\3\7"+
    "\2\0\5\7\27\0\13\7\1\u0118\4\7\1\155\5\7"+
    "\3\0\3\7\2\0\5\7\27\0\21\7\1\156\4\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\u0119\25\7\3\0"+
    "\3\7\2\0\5\7\27\0\5\7\1\u011a\20\7\3\0"+
    "\3\7\2\0\5\7\27\0\3\7\1\u011b\3\7\1\u011c"+
    "\16\7\3\0\3\7\2\0\3\7\1\u011d\1\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\20\7\1\156"+
    "\5\7\3\0\3\7\2\0\5\7\27\0\12\7\1\156"+
    "\13\7\3\0\3\7\2\0\5\7\27\0\1\u011e\25\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\u011f\25\7\3\0"+
    "\3\7\2\0\4\7\1\u0120\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\3\7\1\u0121\22\7\3\0\3\7"+
    "\2\0\3\7\1\u0122\1\7\27\0\10\7\1\112\15\7"+
    "\3\0\3\7\2\0\5\7\27\0\2\7\1\u0123\2\7"+
    "\1\u0124\20\7\3\0\3\7\2\0\1\u0125\4\7\27\0"+
    "\10\7\1\u0126\15\7\3\0\3\7\2\0\1\u0127\4\7"+
    "\27\0\1\u0128\25\7\3\0\3\7\2\0\2\7\1\u0129"+
    "\1\u012a\1\u012b\27\0\1\u012c\2\7\1\u012d\14\7\1\u012e"+
    "\5\7\3\0\3\7\2\0\5\7\27\0\21\7\1\u012f"+
    "\4\7\3\0\3\7\2\0\3\7\1\u0112\1\u0130\27\0"+
    "\26\7\3\0\3\7\2\0\4\7\1\255\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\2\7\1\u0131\23\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\7\1\344\24\7"+
    "\3\0\3\7\2\0\5\7\27\0\2\7\1\u0132\23\7"+
    "\3\0\3\7\2\0\1\u0133\4\7\27\0\2\7\1\356"+
    "\23\7\3\0\3\7\2\0\1\u0134\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\22\7\1\u0135\3\7"+
    "\3\0\3\7\2\0\2\7\1\344\2\7\27\0\1\7"+
    "\1\u0136\1\u0137\2\7\1\u0138\1\u0139\2\7\1\u013a\3\7"+
    "\1\u013b\10\7\3\0\3\7\2\0\1\u013c\4\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\10\7\1\u013d"+
    "\15\7\3\0\3\7\2\0\5\7\27\0\20\7\1\u013e"+
    "\5\7\3\0\3\7\2\0\2\7\1\156\2\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\2\7\1\u013f"+
    "\13\7\1\315\7\7\3\0\3\7\2\0\4\7\1\u0140"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\6\7"+
    "\1\u0141\17\7\3\0\3\7\2\0\1\u0142\4\7\27\0"+
    "\10\7\1\u0143\15\7\3\0\3\7\2\0\5\7\27\0"+
    "\2\7\1\u0144\23\7\3\0\3\7\2\0\5\7\27\0"+
    "\2\7\1\u0145\23\7\3\0\3\7\2\0\5\7\27\0"+
    "\4\7\1\155\21\7\3\0\3\7\2\0\4\7\1\u0146"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\3\7"+
    "\1\u0147\22\7\3\0\3\7\2\0\5\7\27\0\13\7"+
    "\1\u0148\12\7\3\0\3\7\2\0\5\7\27\0\1\u0104"+
    "\25\7\3\0\3\7\2\0\5\7\27\0\1\7\1\155"+
    "\1\7\1\u0149\1\7\1\u014a\20\7\3\0\3\7\2\0"+
    "\1\u014b\4\7\27\0\10\7\1\u014c\1\u014d\14\7\3\0"+
    "\3\7\2\0\5\7\27\0\5\7\1\u014e\20\7\3\0"+
    "\3\7\2\0\5\7\27\0\21\7\1\u014f\4\7\3\0"+
    "\3\7\2\0\5\7\27\0\2\7\1\155\23\7\3\0"+
    "\3\7\2\0\5\7\27\0\10\7\1\u0150\15\7\3\0"+
    "\3\7\2\0\5\7\27\0\1\u012a\7\7\1\u0151\15\7"+
    "\3\0\3\7\2\0\5\7\27\0\2\7\1\u0152\23\7"+
    "\3\0\3\7\2\0\5\7\27\0\11\7\1\u0153\14\7"+
    "\3\0\3\7\2\0\5\7\27\0\11\7\1\u0154\14\7"+
    "\3\0\3\7\2\0\1\u0155\4\7\27\0\11\7\1\202"+
    "\14\7\3\0\3\7\2\0\5\7\27\0\3\7\1\u0140"+
    "\22\7\3\0\3\7\2\0\5\7\27\0\2\7\1\u0156"+
    "\23\7\3\0\3\7\2\0\5\7\27\0\3\7\1\341"+
    "\22\7\3\0\3\7\2\0\5\7\27\0\2\7\1\u0157"+
    "\20\7\1\155\2\7\3\0\3\7\2\0\2\7\1\253"+
    "\2\7\27\0\1\7\1\u0158\24\7\3\0\3\7\2\0"+
    "\2\7\1\u0159\2\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\3\7\1\u015a\22\7\3\0\3\7\2\0"+
    "\4\7\1\u015b\27\0\3\7\1\u015c\22\7\3\0\3\7"+
    "\2\0\1\u015d\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\2\7\1\u0157\23\7\3\0\3\7\2\0"+
    "\2\7\1\u015e\1\7\1\u0146\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\10\7\1\u015f\15\7\3\0\3\7"+
    "\2\0\4\7\1\u0160\27\0\26\7\3\0\3\7\2\0"+
    "\1\u0161\4\7\27\0\10\7\1\u0162\15\7\3\0\3\7"+
    "\2\0\3\7\1\u0163\1\7\27\0\3\7\1\u0164\22\7"+
    "\3\0\3\7\2\0\4\7\1\u0165\27\0\3\7\1\u0166"+
    "\22\7\3\0\3\7\2\0\5\7\27\0\11\7\1\u0104"+
    "\14\7\3\0\1\320\2\0\1\320\66\0\1\320\2\0"+
    "\1\320\1\u0167\64\0\1\u0168\3\7\2\0\5\7\27\0"+
    "\26\7\3\0\3\7\2\0\4\7\1\u0169\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\u016a\25\7\3\0"+
    "\3\7\2\0\5\7\27\0\6\7\1\u0159\17\7\3\0"+
    "\3\7\2\0\1\u016b\4\7\27\0\3\7\1\u016c\22\7"+
    "\3\0\3\7\2\0\1\u016d\4\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\2\7\1\155\2\7\1\u016e"+
    "\20\7\3\0\3\7\2\0\4\7\1\u016f\27\0\26\7"+
    "\3\0\3\7\2\0\1\u0170\4\7\27\0\26\7\3\0"+
    "\3\7\2\0\3\7\1\u0171\1\7\27\0\11\7\1\u0172"+
    "\14\7\3\0\3\7\2\0\1\u0173\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\4\7\1\u0174\27\0\7\7\1\u0175"+
    "\16\7\3\0\3\7\2\0\5\7\27\0\10\7\1\u0104"+
    "\14\7\1\u0176\3\0\3\7\2\0\2\7\1\u0177\2\7"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\11\7"+
    "\1\265\14\7\3\0\3\7\2\0\5\7\27\0\3\7"+
    "\1\155\22\7\3\0\3\7\2\0\5\7\27\0\16\7"+
    "\1\156\7\7\3\0\3\7\2\0\2\7\1\162\2\7"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\1\u0154"+
    "\25\7\3\0\3\7\2\0\1\u0112\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\7\1\u012f\24\7"+
    "\3\0\3\7\2\0\1\u0146\4\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\16\7\1\u0178\7\7\3\0"+
    "\3\7\2\0\5\7\27\0\1\7\1\155\24\7\3\0"+
    "\3\7\2\0\5\7\27\0\1\u0146\25\7\3\0\3\7"+
    "\2\0\1\u0179\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\7\7\1\u017a\16\7\3\0\3\7\2\0"+
    "\5\7\27\0\10\7\1\u017b\15\7\3\0\3\7\2\0"+
    "\1\u017c\4\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\11\7\1\u017d\14\7\3\0\3\7\2\0\5\7"+
    "\27\0\10\7\1\u017e\15\7\3\0\3\7\2\0\1\u017f"+
    "\4\7\27\0\26\7\3\0\3\7\2\0\4\7\1\u0180"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\6\7"+
    "\1\u0181\17\7\3\0\3\7\2\0\4\7\1\u0182\27\0"+
    "\11\7\1\u0183\14\7\3\0\3\7\2\0\1\u0184\4\7"+
    "\27\0\1\u0185\25\7\3\0\3\7\2\0\1\155\4\7"+
    "\27\0\1\u0186\25\7\3\0\3\7\2\0\5\7\27\0"+
    "\13\7\1\202\12\7\3\0\3\7\2\0\5\7\27\0"+
    "\1\315\25\7\3\0\3\7\2\0\5\7\27\0\16\7"+
    "\1\u0187\7\7\3\0\3\7\2\0\5\7\27\0\2\7"+
    "\1\u0188\3\7\1\u0189\5\7\1\155\11\7\3\0\3\7"+
    "\2\0\5\7\27\0\6\7\1\155\17\7\3\0\3\7"+
    "\2\0\5\7\27\0\15\7\1\u018a\10\7\3\0\3\7"+
    "\2\0\5\7\27\0\2\7\1\u018b\23\7\3\0\3\7"+
    "\2\0\4\7\1\u018c\27\0\26\7\3\0\3\7\2\0"+
    "\2\7\1\u017b\2\7\27\0\26\7\3\0\3\7\2\0"+
    "\2\7\1\u018d\2\7\27\0\11\7\1\u018e\14\7\3\0"+
    "\2\7\1\u018f\2\0\5\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\16\7\1\u0190\1\7\1\155\5\7"+
    "\3\0\3\7\2\0\5\7\27\0\25\7\1\u0191\3\0"+
    "\3\7\2\0\2\7\1\155\2\7\27\0\26\7\3\0"+
    "\3\7\2\0\1\u0192\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\1\u0193\25\7\3\0\3\7\2\0"+
    "\4\7\1\155\27\0\1\7\1\u0194\24\7\3\0\3\7"+
    "\2\0\3\7\1\u0195\1\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\2\7\1\u0196\23\7\3\0\3\7"+
    "\2\0\5\7\27\0\10\7\1\u0197\15\7\3\0\3\7"+
    "\2\0\4\7\1\u0198\27\0\26\7\3\0\3\7\2\0"+
    "\1\u0199\4\7\27\0\10\7\1\u019a\15\7\3\0\3\7"+
    "\2\0\1\u019b\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\u019c\20\7\3\0\3\7\2\0"+
    "\4\7\1\u019d\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\5\7\1\155\1\u019e\7\7\1\u019f\7\7\3\0"+
    "\3\7\2\0\5\7\27\0\7\7\1\266\16\7\3\0"+
    "\3\7\2\0\1\u01a0\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\3\7\1\u01a1\1\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\5\7\1\u01a2\20\7\3\0\3\7"+
    "\2\0\3\7\1\u01a3\1\7\27\0\2\7\1\356\5\7"+
    "\1\u0163\15\7\3\0\3\7\2\0\5\7\27\0\1\u01a4"+
    "\25\7\3\0\3\7\2\0\5\7\27\0\5\7\1\u01a5"+
    "\20\7\3\0\3\7\2\0\5\7\27\0\2\7\1\u01a6"+
    "\23\7\3\0\3\7\2\0\5\7\27\0\2\7\1\u01a7"+
    "\23\7\3\0\3\7\2\0\5\7\27\0\10\7\1\256"+
    "\15\7\3\0\3\7\2\0\1\u01a8\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\2\7\1\u01a9\23\7"+
    "\3\0\3\7\2\0\5\7\27\0\6\7\1\156\17\7"+
    "\3\0\3\7\2\0\4\7\1\u01aa\27\0\26\7\3\0"+
    "\3\7\2\0\1\u01ab\4\7\27\0\5\7\1\u01ac\1\u01ad"+
    "\10\7\1\u01ae\6\7\3\0\3\7\2\0\5\7\27\0"+
    "\3\7\1\u01af\1\7\1\u01b0\20\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\u01b1\20\7\3\0\3\7\2\0"+
    "\5\7\27\0\1\u01b2\25\7\3\0\3\7\2\0\1\155"+
    "\4\7\27\0\2\7\1\155\3\7\1\u01b3\17\7\3\0"+
    "\3\7\2\0\5\7\27\0\1\u017f\25\7\3\0\3\7"+
    "\2\0\5\7\27\0\5\7\1\u0173\20\7\3\0\3\7"+
    "\2\0\5\7\27\0\6\7\1\u01b4\17\7\3\0\3\7"+
    "\2\0\5\7\27\0\3\7\1\u01b5\22\7\3\0\3\7"+
    "\2\0\2\7\1\u01b6\2\7\27\0\2\7\1\u01b7\2\7"+
    "\1\u01b8\13\7\1\u01b9\4\7\3\0\3\7\2\0\2\7"+
    "\1\266\2\7\27\0\26\7\3\0\3\7\2\0\3\7"+
    "\1\u01ba\1\u01bb\27\0\26\7\3\0\3\7\2\0\4\7"+
    "\1\u01bc\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\3\7\1\u01bd\22\7\3\0\3\7\2\0\5\7\27\0"+
    "\15\7\1\u01be\2\7\1\u01bf\5\7\3\0\3\7\2\0"+
    "\5\7\27\0\11\7\1\342\14\7\3\0\3\7\2\0"+
    "\5\7\27\0\1\7\1\u01c0\24\7\3\0\3\7\2\0"+
    "\1\u0112\4\7\27\0\15\7\1\u013b\10\7\3\0\3\7"+
    "\2\0\1\u01c1\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\2\7\1\u01c2\2\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\3\7\1\u01c3\22\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\u01c4\20\7\3\0\3\7\2\0"+
    "\1\u01c5\4\7\27\0\11\7\1\u01c6\14\7\3\0\3\7"+
    "\2\0\1\u01c7\4\7\27\0\10\7\1\155\15\7\3\0"+
    "\3\7\2\0\1\u01c8\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\4\7\1\u01c9\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\2\7\1\u01ca\23\7\3\0\3\7\2\0"+
    "\3\7\1\266\1\7\27\0\26\7\3\0\3\7\2\0"+
    "\2\7\1\u01cb\2\7\27\0\26\7\3\0\3\7\2\0"+
    "\4\7\1\u01cc\27\0\26\7\3\0\3\7\2\0\1\u01cd"+
    "\4\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\17\7\1\u01ce\6\7\3\0\3\7\2\0\5\7\27\0"+
    "\14\7\1\155\11\7\3\0\3\7\2\0\5\7\27\0"+
    "\14\7\1\u0151\11\7\3\0\3\7\2\0\5\7\27\0"+
    "\1\u0140\25\7\3\0\3\7\2\0\5\7\27\0\17\7"+
    "\1\112\6\7\3\0\3\7\2\0\5\7\27\0\7\7"+
    "\1\155\16\7\3\0\2\7\1\u01cf\2\0\5\7\27\0"+
    "\26\7\3\0\3\7\2\0\4\7\1\155\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\6\7\1\u01d0\17\7"+
    "\3\0\3\7\2\0\4\7\1\u01d1\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\2\7\1\u01d2\23\7\3\0"+
    "\3\7\2\0\5\7\27\0\6\7\1\351\17\7\3\0"+
    "\3\7\2\0\5\7\27\0\5\7\1\u01d3\1\u01d4\6\7"+
    "\1\u0182\10\7\3\0\3\7\2\0\5\7\27\0\6\7"+
    "\1\u01d5\17\7\3\0\3\7\2\0\2\7\1\266\2\7"+
    "\27\0\10\7\1\u0112\7\7\1\u01d6\1\u01d7\4\7\3\0"+
    "\3\7\2\0\5\7\27\0\11\7\1\160\14\7\3\0"+
    "\3\7\2\0\5\7\27\0\10\7\1\266\15\7\3\0"+
    "\3\7\2\0\5\7\27\0\13\7\1\351\12\7\3\0"+
    "\3\7\2\0\3\7\1\365\1\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\10\7\1\155\15\7\3\0"+
    "\3\7\2\0\5\7\27\0\2\7\1\u01d8\23\7\3\0"+
    "\3\7\2\0\5\7\27\0\2\7\1\u01d9\23\7\3\0"+
    "\3\7\2\0\2\7\1\u01da\2\7\27\0\3\7\1\156"+
    "\22\7\3\0\3\7\2\0\5\7\27\0\7\7\1\u01db"+
    "\16\7\3\0\3\7\2\0\5\7\27\0\6\7\1\u0144"+
    "\17\7\3\0\3\7\2\0\3\7\1\202\1\7\27\0"+
    "\26\7\3\0\3\7\2\0\3\7\1\u017f\1\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\1\7\1\u01dc"+
    "\24\7\3\0\3\7\2\0\3\7\1\u01dd\1\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\4\7\1\u012f"+
    "\1\7\1\121\17\7\3\0\3\7\2\0\5\7\27\0"+
    "\17\7\1\155\6\7\3\0\3\7\2\0\5\7\27\0"+
    "\6\7\1\160\17\7\3\0\3\7\2\0\5\7\27\0"+
    "\1\266\25\7\3\0\3\7\2\0\5\7\27\0\5\7"+
    "\1\u0152\20\7\3\0\3\7\2\0\1\u01de\4\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\20\7\1\155"+
    "\5\7\3\0\3\7\2\0\2\7\1\350\2\7\27\0"+
    "\26\7\3\0\3\7\2\0\1\u01df\4\7\27\0\2\7"+
    "\1\u01e0\23\7\3\0\3\7\2\0\1\155\3\7\1\u01e1"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\5\7"+
    "\1\266\20\7\3\0\1\u0167\2\0\1\u0167\73\0\1\u01e2"+
    "\64\0\3\7\2\0\5\7\27\0\21\7\1\u0146\4\7"+
    "\3\0\3\7\2\0\5\7\27\0\15\7\1\156\10\7"+
    "\3\0\3\7\2\0\5\7\27\0\3\7\1\u01e3\22\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\u01a0\25\7\3\0"+
    "\3\7\2\0\5\7\27\0\15\7\1\u01e4\10\7\3\0"+
    "\3\7\2\0\5\7\27\0\2\7\1\u0173\23\7\3\0"+
    "\3\7\2\0\5\7\27\0\11\7\1\u01e5\14\7\3\0"+
    "\3\7\2\0\5\7\27\0\3\7\1\u01d1\22\7\3\0"+
    "\3\7\2\0\5\7\27\0\3\7\1\351\22\7\3\0"+
    "\3\7\2\0\5\7\27\0\10\7\1\u01e3\15\7\3\0"+
    "\3\7\2\0\5\7\27\0\5\7\1\155\20\7\3\0"+
    "\3\7\2\0\3\7\1\u0122\1\7\27\0\26\7\3\0"+
    "\3\7\2\0\1\u01e6\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\3\7\1\156\1\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\10\7\1\u01e7\15\7\3\0\3\7"+
    "\2\0\3\7\1\u01e8\1\7\27\0\26\7\3\0\3\7"+
    "\2\0\2\7\1\u0152\2\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\10\7\1\u01e9\15\7\3\0\3\7"+
    "\2\0\5\7\27\0\6\7\1\u0125\17\7\3\0\3\7"+
    "\2\0\5\7\27\0\3\7\1\160\22\7\3\0\3\7"+
    "\2\0\5\7\27\0\10\7\1\u0104\15\7\3\0\3\7"+
    "\2\0\4\7\1\u01be\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\2\7\1\156\23\7\3\0\3\7\2\0"+
    "\4\7\1\u01ea\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\3\7\1\u01eb\22\7\3\0\3\7\2\0\5\7"+
    "\27\0\1\u01ec\25\7\3\0\3\7\2\0\5\7\27\0"+
    "\20\7\1\351\5\7\3\0\3\7\2\0\5\7\27\0"+
    "\3\7\1\u01ed\22\7\3\0\3\7\2\0\3\7\1\u01ee"+
    "\1\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\13\7\1\u01ef\12\7\3\0\3\7\2\0\2\7\1\u01f0"+
    "\2\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\3\7\1\u01f1\5\7\1\u01f2\14\7\3\0\3\7\2\0"+
    "\5\7\27\0\10\7\1\u01f3\15\7\3\0\3\7\2\0"+
    "\5\7\27\0\10\7\1\u01f4\15\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\u01f5\20\7\3\0\3\7\2\0"+
    "\1\u01f6\4\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\5\7\1\u01f7\20\7\3\0\3\7\2\0\4\7"+
    "\1\u012f\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\6\7\1\u01f8\17\7\3\0\3\7\2\0\5\7\27\0"+
    "\16\7\1\344\7\7\3\0\3\7\2\0\3\7\1\351"+
    "\1\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\5\7\1\u01f9\4\7\1\u01fa\13\7\3\0\3\7\2\0"+
    "\5\7\27\0\2\7\1\u01fb\23\7\3\0\3\7\2\0"+
    "\5\7\27\0\2\7\1\u01fc\23\7\3\0\3\7\2\0"+
    "\5\7\27\0\3\7\1\u0104\22\7\3\0\3\7\2\0"+
    "\5\7\27\0\3\7\1\u01fd\4\7\1\u01ec\15\7\3\0"+
    "\3\7\2\0\2\7\1\u01fe\2\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\11\7\1\u01ff\14\7\3\0"+
    "\3\7\2\0\5\7\27\0\3\7\1\266\22\7\3\0"+
    "\3\7\2\0\5\7\27\0\14\7\1\156\11\7\3\0"+
    "\3\7\2\0\5\7\27\0\3\7\1\u0200\22\7\3\0"+
    "\3\7\2\0\1\u01ab\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\13\7\1\u0201\12\7\3\0\3\7"+
    "\2\0\5\7\27\0\10\7\1\u0202\15\7\3\0\3\7"+
    "\2\0\3\7\1\u0203\1\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\6\7\1\266\17\7\3\0\3\7"+
    "\2\0\5\7\27\0\5\7\1\344\20\7\3\0\3\7"+
    "\2\0\5\7\27\0\11\7\1\u0204\14\7\3\0\3\7"+
    "\2\0\5\7\27\0\3\7\1\u0205\22\7\3\0\3\7"+
    "\2\0\2\7\1\u0206\2\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\2\7\1\u0207\23\7\3\0\3\7"+
    "\2\0\5\7\27\0\11\7\1\u0208\14\7\3\0\3\7"+
    "\2\0\1\u0209\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\20\7\1\u020a\5\7\3\0\3\7\2\0"+
    "\5\7\27\0\1\7\1\u0177\24\7\3\0\3\7\2\0"+
    "\4\7\1\u020b\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\3\7\1\u020c\22\7\3\0\3\7\2\0\5\7"+
    "\27\0\2\7\1\u0125\23\7\3\0\3\7\2\0\5\7"+
    "\27\0\1\155\7\7\1\u020d\15\7\3\0\3\7\2\0"+
    "\5\7\27\0\1\u020e\25\7\3\0\3\7\2\0\1\u020f"+
    "\4\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\10\7\1\u0112\15\7\3\0\3\7\2\0\5\7\27\0"+
    "\2\7\1\u0210\23\7\3\0\3\7\2\0\4\7\1\u0211"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\1\u0212"+
    "\25\7\3\0\3\7\2\0\5\7\27\0\14\7\1\u0213"+
    "\11\7\3\0\2\7\1\u01cf\2\0\5\7\27\0\1\u0214"+
    "\25\7\3\0\3\7\2\0\1\u0215\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\u0216\10\7\1\u0217"+
    "\14\7\3\0\3\7\2\0\5\7\27\0\2\7\1\u0218"+
    "\23\7\3\0\3\7\2\0\1\u0199\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\20\7\1\u0104\5\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\u0219\25\7\3\0"+
    "\3\7\2\0\1\u021a\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\1\u021b\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\11\7\1\266\14\7\3\0\3\7\2\0"+
    "\4\7\1\u021c\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\2\7\1\u021d\23\7\3\0\3\7\2\0\5\7"+
    "\27\0\1\7\1\u021e\21\7\1\u021f\1\7\1\u0220\3\0"+
    "\3\7\2\0\4\7\1\u0221\27\0\26\7\3\0\3\7"+
    "\2\0\1\u016e\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\23\7\1\155\2\7\3\0\3\7\2\0"+
    "\5\7\27\0\6\7\1\u0222\17\7\3\0\3\7\2\0"+
    "\5\7\27\0\3\7\1\u0223\12\7\1\344\7\7\3\0"+
    "\3\7\2\0\2\7\1\u0224\2\7\27\0\3\7\1\266"+
    "\22\7\3\0\3\7\2\0\3\7\1\u020d\1\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\11\7\1\u0225"+
    "\14\7\3\0\3\7\2\0\5\7\27\0\2\7\1\u0226"+
    "\23\7\3\0\3\7\2\0\5\7\27\0\1\160\25\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\7\1\u0227\24\7"+
    "\3\0\3\7\2\0\1\176\4\7\27\0\26\7\3\0"+
    "\3\7\2\0\4\7\1\u0228\27\0\26\7\3\0\3\7"+
    "\2\0\1\u012a\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\11\7\1\373\14\7\3\0\3\7\2\0"+
    "\5\7\27\0\11\7\1\351\14\7\3\0\3\7\2\0"+
    "\1\u0229\4\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\11\7\1\u022a\14\7\3\0\3\7\2\0\1\u022b"+
    "\4\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\1\u022c\25\7\3\0\3\7\2\0\5\7\27\0\11\7"+
    "\1\u022d\14\7\3\0\3\7\2\0\5\7\27\0\22\7"+
    "\1\u01b0\3\7\3\0\3\7\2\0\1\u0194\4\7\27\0"+
    "\26\7\3\0\3\7\2\0\1\u022e\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\11\7\1\u022f\14\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\u0230\25\7\3\0"+
    "\3\7\2\0\1\u0231\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\2\7\1\u0232\23\7\3\0\3\7"+
    "\2\0\5\7\27\0\11\7\1\u0233\14\7\3\0\3\7"+
    "\2\0\5\7\27\0\3\7\1\261\22\7\3\0\3\7"+
    "\2\0\5\7\27\0\22\7\1\u0234\3\7\67\0\1\u0235"+
    "\5\0\3\7\2\0\2\7\1\351\2\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\2\7\1\u0236\23\7"+
    "\3\0\3\7\2\0\5\7\27\0\22\7\1\155\3\7"+
    "\3\0\3\7\2\0\5\7\27\0\6\7\1\u0140\17\7"+
    "\3\0\3\7\2\0\5\7\27\0\17\7\1\u0104\6\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\341\25\7\3\0"+
    "\3\7\2\0\5\7\27\0\3\7\1\u0237\22\7\3\0"+
    "\3\7\2\0\5\7\27\0\11\7\1\u0238\14\7\3\0"+
    "\3\7\2\0\5\7\27\0\3\7\1\156\22\7\3\0"+
    "\3\7\2\0\5\7\27\0\3\7\1\u0239\22\7\3\0"+
    "\3\7\2\0\4\7\1\266\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\1\112\25\7\3\0\3\7\2\0"+
    "\5\7\27\0\10\7\1\u0208\15\7\3\0\3\7\2\0"+
    "\5\7\27\0\11\7\1\u023a\14\7\3\0\3\7\2\0"+
    "\2\7\1\u01a0\2\7\27\0\26\7\3\0\3\7\2\0"+
    "\2\7\1\u023b\2\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\3\7\1\u01d6\22\7\3\0\3\7\2\0"+
    "\5\7\27\0\11\7\1\217\14\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\u023c\20\7\3\0\3\7\2\0"+
    "\4\7\1\u01bb\27\0\1\u015e\25\7\3\0\3\7\2\0"+
    "\5\7\27\0\10\7\1\u023d\15\7\3\0\3\7\2\0"+
    "\5\7\27\0\2\7\1\u023e\23\7\3\0\3\7\2\0"+
    "\5\7\27\0\10\7\1\u023f\15\7\3\0\3\7\2\0"+
    "\5\7\27\0\11\7\1\211\14\7\3\0\3\7\2\0"+
    "\1\116\4\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\11\7\1\u01a0\14\7\3\0\3\7\2\0\5\7"+
    "\27\0\22\7\1\u0240\3\7\3\0\3\7\2\0\5\7"+
    "\27\0\6\7\1\u01cc\17\7\3\0\3\7\2\0\1\u0241"+
    "\4\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\1\u01e6\25\7\3\0\3\7\2\0\3\7\1\u012a\1\7"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\11\7"+
    "\1\u0242\14\7\3\0\3\7\2\0\5\7\27\0\10\7"+
    "\1\u0243\15\7\3\0\3\7\2\0\5\7\27\0\11\7"+
    "\1\u0244\14\7\3\0\3\7\2\0\5\7\27\0\2\7"+
    "\1\u0245\23\7\3\0\3\7\2\0\5\7\27\0\3\7"+
    "\1\u012f\22\7\3\0\3\7\2\0\5\7\27\0\5\7"+
    "\1\u0246\20\7\3\0\3\7\2\0\5\7\27\0\20\7"+
    "\1\u0247\5\7\3\0\3\7\2\0\5\7\27\0\1\155"+
    "\25\7\3\0\3\7\2\0\5\7\27\0\11\7\1\u012a"+
    "\14\7\3\0\3\7\2\0\5\7\27\0\3\7\1\u01b0"+
    "\22\7\3\0\3\7\2\0\5\7\27\0\1\7\1\156"+
    "\24\7\3\0\3\7\2\0\5\7\27\0\3\7\1\u0248"+
    "\22\7\3\0\3\7\2\0\2\7\1\u0249\2\7\27\0"+
    "\26\7\3\0\3\7\2\0\1\u024a\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\10\7\1\162\15\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\7\1\u024b\24\7"+
    "\3\0\3\7\2\0\5\7\27\0\15\7\1\u024c\10\7"+
    "\3\0\3\7\2\0\5\7\27\0\6\7\1\u024d\17\7"+
    "\3\0\3\7\2\0\5\7\27\0\6\7\1\u01e4\17\7"+
    "\3\0\3\7\2\0\5\7\27\0\11\7\1\u024e\14\7"+
    "\3\0\3\7\2\0\2\7\1\u0176\2\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\3\7\1\u024f\22\7"+
    "\3\0\3\7\2\0\5\7\27\0\2\7\1\u0250\23\7"+
    "\3\0\3\7\2\0\5\7\27\0\5\7\1\u011e\20\7"+
    "\3\0\3\7\2\0\5\7\27\0\5\7\1\u0251\20\7"+
    "\3\0\3\7\2\0\5\7\27\0\10\7\1\u01e6\15\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\u0252\25\7\3\0"+
    "\3\7\2\0\5\7\27\0\20\7\1\u0146\5\7\3\0"+
    "\3\7\2\0\3\7\1\u0253\1\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\1\u0254\25\7\3\0\3\7"+
    "\2\0\5\7\27\0\1\u0255\25\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\u0113\13\7\1\351\4\7\3\0"+
    "\3\7\2\0\5\7\27\0\5\7\1\u0256\20\7\3\0"+
    "\3\7\2\0\5\7\27\0\1\u0257\25\7\3\0\3\7"+
    "\2\0\5\7\27\0\11\7\1\u0258\14\7\3\0\3\7"+
    "\2\0\5\7\27\0\11\7\1\u0125\14\7\3\0\3\7"+
    "\2\0\1\u0259\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\3\7\1\211\22\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\356\20\7\3\0\3\7\2\0"+
    "\5\7\27\0\1\7\1\u025a\24\7\3\0\3\7\2\0"+
    "\5\7\27\0\3\7\1\255\22\7\3\0\3\7\2\0"+
    "\4\7\1\u025b\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\21\7\1\344\4\7\3\0\3\7\2\0\2\7"+
    "\1\u025c\2\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\1\7\1\u025d\24\7\3\0\3\7\2\0\1\u025e"+
    "\4\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\16\7\1\u0104\7\7\3\0\3\7\2\0\5\7\27\0"+
    "\1\u025f\25\7\10\0\1\u0260\64\0\3\7\2\0\5\7"+
    "\27\0\11\7\1\u0261\14\7\3\0\3\7\2\0\5\7"+
    "\27\0\13\7\1\156\1\7\1\u0255\10\7\3\0\3\7"+
    "\2\0\1\350\4\7\27\0\1\367\25\7\3\0\3\7"+
    "\2\0\5\7\27\0\13\7\1\u0262\12\7\3\0\3\7"+
    "\2\0\2\7\1\u0113\2\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\1\u0263\25\7\3\0\3\7\2\0"+
    "\2\7\1\u0264\2\7\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\1\164\25\7\3\0\3\7\2\0\2\7"+
    "\1\u0265\2\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\11\7\1\u0266\14\7\3\0\3\7\2\0\2\7"+
    "\1\u0267\2\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\1\7\1\u0268\24\7\3\0\3\7\2\0\2\7"+
    "\1\u0269\2\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\2\7\1\u026a\23\7\3\0\3\7\2\0\5\7"+
    "\27\0\11\7\1\u026b\14\7\3\0\3\7\2\0\5\7"+
    "\27\0\2\7\1\u026c\23\7\3\0\2\7\1\u026d\2\0"+
    "\5\7\27\0\26\7\3\0\3\7\2\0\2\7\1\u012f"+
    "\2\7\27\0\26\7\3\0\3\7\2\0\5\7\27\0"+
    "\2\7\1\u026e\23\7\3\0\3\7\2\0\5\7\27\0"+
    "\3\7\1\u026f\22\7\3\0\3\7\2\0\1\u0270\4\7"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\10\7"+
    "\1\u020b\15\7\3\0\3\7\2\0\5\7\27\0\2\7"+
    "\1\u0271\23\7\3\0\3\7\2\0\2\7\1\u0272\2\7"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\1\u0273"+
    "\25\7\3\0\3\7\2\0\1\155\4\7\27\0\11\7"+
    "\1\u017d\14\7\3\0\3\7\2\0\5\7\27\0\15\7"+
    "\1\u0274\10\7\3\0\3\7\2\0\5\7\27\0\2\7"+
    "\1\u0275\23\7\3\0\3\7\2\0\1\u022c\4\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\15\7\1\u0173"+
    "\10\7\3\0\3\7\2\0\5\7\27\0\2\7\1\u01b0"+
    "\23\7\3\0\3\7\2\0\5\7\27\0\11\7\1\u0193"+
    "\14\7\3\0\3\7\2\0\4\7\1\u0276\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\2\7\1\u0277\23\7"+
    "\3\0\3\7\2\0\2\7\1\u0278\2\7\27\0\26\7"+
    "\3\0\3\7\2\0\3\7\1\u01ec\1\7\27\0\26\7"+
    "\3\0\3\7\2\0\1\u0279\4\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\16\7\1\u027a\7\7\3\0"+
    "\3\7\2\0\1\u027b\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\23\7\1\u027c\2\7\3\0\3\7"+
    "\2\0\5\7\27\0\6\7\1\u0255\17\7\52\0\1\u027d"+
    "\22\0\3\7\2\0\5\7\27\0\12\7\1\u01cc\13\7"+
    "\3\0\3\7\2\0\3\7\1\u027e\1\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\20\7\1\u027f\5\7"+
    "\3\0\3\7\2\0\5\7\27\0\21\7\1\u01b9\4\7"+
    "\3\0\3\7\2\0\1\u0280\4\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\16\7\1\u025a\7\7\3\0"+
    "\3\7\2\0\5\7\27\0\6\7\1\333\17\7\3\0"+
    "\3\7\2\0\5\7\27\0\6\7\1\u0281\17\7\3\0"+
    "\3\7\2\0\5\7\27\0\4\7\1\u0282\21\7\3\0"+
    "\3\7\2\0\5\7\27\0\6\7\1\u0283\17\7\3\0"+
    "\3\7\2\0\5\7\27\0\11\7\1\u0284\14\7\3\0"+
    "\2\7\1\u0285\2\0\5\7\27\0\26\7\3\0\3\7"+
    "\2\0\1\350\4\7\27\0\26\7\3\0\3\7\2\0"+
    "\1\u0286\4\7\27\0\26\7\3\0\3\7\2\0\5\7"+
    "\27\0\5\7\1\u0287\20\7\3\0\3\7\2\0\5\7"+
    "\27\0\11\7\1\u0288\14\7\3\0\3\7\2\0\5\7"+
    "\27\0\10\7\1\u0289\15\7\3\0\3\7\2\0\5\7"+
    "\27\0\1\u028a\25\7\3\0\3\7\2\0\5\7\27\0"+
    "\4\7\1\u028b\21\7\3\0\3\7\2\0\5\7\27\0"+
    "\16\7\1\253\7\7\3\0\3\7\2\0\5\7\27\0"+
    "\16\7\1\333\7\7\3\0\3\7\2\0\5\7\27\0"+
    "\3\7\1\u028c\22\7\3\0\3\7\2\0\5\7\27\0"+
    "\3\7\1\u0152\22\7\3\0\3\7\2\0\5\7\27\0"+
    "\2\7\1\u0287\23\7\3\0\3\7\2\0\5\7\27\0"+
    "\2\7\1\u026f\23\7\3\0\3\7\2\0\5\7\27\0"+
    "\15\7\1\202\10\7\3\0\2\7\1\u028d\2\0\5\7"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\10\7"+
    "\1\u0146\15\7\3\0\3\7\2\0\5\7\27\0\1\u028e"+
    "\25\7\3\0\3\7\2\0\5\7\27\0\5\7\1\u028f"+
    "\6\7\1\u0290\11\7\3\0\3\7\2\0\5\7\27\0"+
    "\6\7\1\u0173\17\7\3\0\3\7\2\0\3\7\1\u01a1"+
    "\1\7\27\0\1\7\1\u0125\1\u0291\23\7\3\0\3\7"+
    "\2\0\5\7\27\0\3\7\1\u0145\22\7\3\0\3\7"+
    "\2\0\5\7\27\0\2\7\1\u0292\23\7\3\0\3\7"+
    "\2\0\2\7\1\u0293\2\7\27\0\26\7\3\0\3\7"+
    "\2\0\2\7\1\345\2\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\5\7\1\u0294\20\7\3\0\2\7"+
    "\1\u0295\2\0\5\7\27\0\6\7\1\u0281\17\7\3\0"+
    "\3\7\2\0\5\7\27\0\10\7\1\u0151\15\7\3\0"+
    "\3\7\2\0\5\7\27\0\7\7\1\u0296\10\7\1\u0297"+
    "\5\7\3\0\3\7\2\0\3\7\1\u0298\1\7\27\0"+
    "\26\7\3\0\3\7\2\0\5\7\27\0\11\7\1\u0299"+
    "\14\7\3\0\3\7\2\0\1\u029a\4\7\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\11\7\1\u029b\14\7"+
    "\3\0\3\7\2\0\5\7\27\0\1\367\25\7\3\0"+
    "\3\7\2\0\5\7\27\0\2\7\1\u0231\23\7\3\0"+
    "\3\7\2\0\5\7\27\0\10\7\1\u029c\15\7\3\0"+
    "\3\7\2\0\5\7\27\0\11\7\1\u029d\14\7\3\0"+
    "\3\7\2\0\5\7\27\0\10\7\1\u029e\15\7\3\0"+
    "\3\7\2\0\5\7\27\0\11\7\1\u029f\14\7\3\0"+
    "\3\7\2\0\5\7\27\0\1\7\1\u01bf\24\7\3\0"+
    "\3\7\2\0\5\7\27\0\20\7\1\u02a0\5\7\3\0"+
    "\3\7\2\0\5\7\27\0\4\7\1\u02a1\21\7\3\0"+
    "\3\7\2\0\5\7\27\0\20\7\1\u02a2\5\7\3\0"+
    "\3\7\2\0\3\7\1\u02a3\1\7\27\0\26\7\3\0"+
    "\3\7\2\0\2\7\1\u02a4\2\7\27\0\26\7\3\0"+
    "\3\7\2\0\3\7\1\u0112\1\7\27\0\26\7\3\0"+
    "\3\7\2\0\2\7\1\u01be\2\7\27\0\26\7\3\0"+
    "\3\7\2\0\5\7\27\0\11\7\1\u02a5\14\7\3\0"+
    "\3\7\2\0\5\7\27\0\15\7\1\u02a6\10\7\3\0"+
    "\3\7\2\0\1\u02a7\4\7\27\0\26\7\3\0\3\7"+
    "\2\0\5\7\27\0\3\7\1\u011e\22\7\3\0\3\7"+
    "\2\0\5\7\27\0\5\7\1\u01b9\20\7\3\0\3\7"+
    "\2\0\4\7\1\u02a8\27\0\26\7\3\0\3\7\2\0"+
    "\5\7\27\0\7\7\1\u02a9\16\7\3\0\3\7\2\0"+
    "\5\7\27\0\5\7\1\u01f9\20\7\3\0\3\7\2\0"+
    "\5\7\27\0\1\u02aa\25\7\3\0\3\7\2\0\5\7"+
    "\27\0\3\7\1\u02ab\22\7\3\0\3\7\2\0\5\7"+
    "\27\0\3\7\1\u02ac\22\7\3\0\3\7\2\0\5\7"+
    "\27\0\1\u02ad\25\7\3\0\3\7\2\0\5\7\27\0"+
    "\11\7\1\u02ae\14\7\3\0\3\7\2\0\5\7\27\0"+
    "\5\7\1\u02af\20\7\3\0\3\7\2\0\5\7\27\0"+
    "\2\7\1\u02b0\23\7\3\0\3\7\2\0\1\u02b1\4\7"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\4\7"+
    "\1\u02b2\21\7\3\0\3\7\2\0\5\7\27\0\1\7"+
    "\1\u02b3\1\u0292\23\7\3\0\3\7\2\0\1\u02b4\4\7"+
    "\27\0\26\7\3\0\3\7\2\0\5\7\27\0\2\7"+
    "\1\u02b5\23\7\3\0\3\7\2\0\5\7\27\0\1\u02b6"+
    "\25\7\3\0\3\7\2\0\5\7\27\0\11\7\1\u02b7"+
    "\14\7\3\0\3\7\2\0\4\7\1\u02b8\27\0\26\7"+
    "\3\0\3\7\2\0\5\7\27\0\5\7\1\u02b1\20\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37294];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\5\1\1\11\1\1\1\11"+
    "\1\1\1\11\6\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\25\1\1\11\1\1\1\11\12\1\1\0"+
    "\2\1\1\0\22\1\2\11\1\1\13\11\145\1\1\11"+
    "\1\0\230\1\1\0\171\1\1\0\122\1\1\0\52\1"+
    "\1\0\34\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[696];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private List<MyToken> Tokens = new ArrayList();

    StringBuffer _cadenaComentario = new StringBuffer();
    private boolean _comentarioActivo = false;

    public List<MyToken> getTokens() {
        return Tokens;
    }

    public boolean comentarioActivo() {
        return this._comentarioActivo;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexemas(java.io.Reader in) {
  
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 388) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<MyToken> yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMENTARIOMULTI: {
              Tokens.add(new MyToken("ComentarioNoCerrado", _cadenaComentario.toString(), "Error", yyline + 1, yylength(), yycolumn + 1));
        return Tokens;
            }  // fall though
            case 697: break;
            default:
          {     return Tokens;
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Tokens.add(new MyToken("Error", yytext(), "Error", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 43: break;
          case 2: 
            { Tokens.add(new MyToken("Simbolo.Mas", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 44: break;
          case 3: 
            { Tokens.add(new MyToken("Simbolo.Menos", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 45: break;
          case 4: 
            { Tokens.add(new MyToken("DatoEntero", yytext(), "Token", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 46: break;
          case 5: 
            { if (yytext().length() <= 31) {
        Tokens.add(new MyToken("Identificador", yytext(), "Token", yyline + 1, yylength(), yycolumn + 1));
    } else {
        Tokens.add(new MyToken("IdentificadorTruncado", yytext(), "Error", yyline + 1, yylength(), yycolumn + 1));
    }
            } 
            // fall through
          case 47: break;
          case 6: 
            { Tokens.add(new MyToken("Simbolo.Punto", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 48: break;
          case 7: 
            { // No hacer nada
            } 
            // fall through
          case 49: break;
          case 8: 
            { Tokens.add(new MyToken("Simbolo.Multiplicacion", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 50: break;
          case 9: 
            { Tokens.add(new MyToken("Simbolo.Division", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 51: break;
          case 10: 
            { Tokens.add(new MyToken("Simbolo.Modulo", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 52: break;
          case 11: 
            { Tokens.add(new MyToken("Simbolo.Menor", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 53: break;
          case 12: 
            { Tokens.add(new MyToken("Simbolo.Igual", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 54: break;
          case 13: 
            { Tokens.add(new MyToken("Simbolo.Mayor", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 55: break;
          case 14: 
            { Tokens.add(new MyToken("Simbolo.Not", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 56: break;
          case 15: 
            { Tokens.add(new MyToken("Simbolo.PuntoComa", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 57: break;
          case 16: 
            { Tokens.add(new MyToken("Simbolo.Coma", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 58: break;
          case 17: 
            { Tokens.add(new MyToken("Simbolo.CorcheteAbrir", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 59: break;
          case 18: 
            { Tokens.add(new MyToken("Simbolo.CorcheteCerrar", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 60: break;
          case 19: 
            { Tokens.add(new MyToken("Simbolo.ParantesisAbrir", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 61: break;
          case 20: 
            { Tokens.add(new MyToken("Simbolo.ParentesisCerrar", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 62: break;
          case 21: 
            { Tokens.add(new MyToken("Simbolo.LlaveAbrir", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 63: break;
          case 22: 
            { Tokens.add(new MyToken("Simbolo.LlaveCerrar", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 64: break;
          case 23: 
            { Tokens.add(new MyToken("Simbolo.Arroba", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 65: break;
          case 24: 
            { Tokens.add(new MyToken("Simbolo.Numeral", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 66: break;
          case 25: 
            { _cadenaComentario.append(yytext());
            } 
            // fall through
          case 67: break;
          case 26: 
            { Tokens.add(new MyToken("Comentario", yytext(), "Token", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 68: break;
          case 27: 
            { Tokens.add(new MyToken("DatoFloat", yytext(), "Token", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 69: break;
          case 28: 
            { Tokens.add(new MyToken("PalabraReservada", yytext(), "Token", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 70: break;
          case 29: 
            { Tokens.add(new MyToken("StringNoCerrado", yytext(), "Token", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 71: break;
          case 30: 
            { Tokens.add(new MyToken("DatoString", yytext(), "Token", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 72: break;
          case 31: 
            { _cadenaComentario.append(yytext());
    _comentarioActivo = true;
    yybegin(COMENTARIOMULTI);
            } 
            // fall through
          case 73: break;
          case 32: 
            { Tokens.add(new MyToken("Simbolo.MenorIgual", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 74: break;
          case 33: 
            { Tokens.add(new MyToken("Simbolo.IgualIgual", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 75: break;
          case 34: 
            { Tokens.add(new MyToken("Simbolo.MayorIgual", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 76: break;
          case 35: 
            { Tokens.add(new MyToken("Simbolo.Diferente", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 77: break;
          case 36: 
            { Tokens.add(new MyToken("Simbolo.And", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 78: break;
          case 37: 
            { Tokens.add(new MyToken("Simbolo.Or", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 79: break;
          case 38: 
            { Tokens.add(new MyToken("Simbolo.Corchetes", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 80: break;
          case 39: 
            { Tokens.add(new MyToken("Simbolo.Parentesis", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 81: break;
          case 40: 
            { Tokens.add(new MyToken("Simbolo.Llaves", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 82: break;
          case 41: 
            { Tokens.add(new MyToken("Simbolo.DobleNumeral", yytext(), "Simbolo", yyline + 1, yylength(), yycolumn + 1));
            } 
            // fall through
          case 83: break;
          case 42: 
            { _cadenaComentario.append(yytext());
        _comentarioActivo = false;
        yybegin(YYINITIAL);
        Tokens.add(new MyToken("Comentario", _cadenaComentario.toString(), "Token", yyline + 1, yylength(), yycolumn + 1));
        _cadenaComentario = new StringBuffer();
            } 
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
