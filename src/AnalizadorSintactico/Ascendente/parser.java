
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorSintactico.Ascendente;

import java_cup.runtime.*;
import AnalizadorSintactico.Ascendente.Lexemas;
import MiniSql.MiniSql;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import MiniSql.Errores;
import AnalizadorLexico.MyToken;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\002\000\002\201\003\000\002\201\003" +
    "\000\002\175\004\000\002\176\005\000\002\176\002\000" +
    "\002\177\005\000\002\177\002\000\002\200\004\000\002" +
    "\200\002\000\002\151\004\000\002\152\006\000\002\152" +
    "\003\000\002\153\004\000\002\153\002\000\002\154\004" +
    "\000\002\154\010\000\002\154\010\000\002\155\003\000" +
    "\002\155\003\000\002\155\003\000\002\155\003\000\002" +
    "\155\003\000\002\155\003\000\002\155\003\000\002\155" +
    "\003\000\002\156\004\000\002\156\004\000\002\156\005" +
    "\000\002\156\006\000\002\156\005\000\002\156\005\000" +
    "\002\157\005\000\002\157\006\000\002\157\005\000\002" +
    "\160\003\000\002\160\002\000\002\161\005\000\002\161" +
    "\002\000\002\162\004\000\002\162\002\000\002\163\003" +
    "\000\002\163\003\000\002\164\003\000\002\165\003\000" +
    "\002\165\004\000\002\166\005\000\002\166\006\000\002" +
    "\167\004\000\002\167\002\000\002\170\004\000\002\170" +
    "\003\000\002\171\004\000\002\171\006\000\002\172\003" +
    "\000\002\172\002\000\002\173\005\000\002\174\010\000" +
    "\002\174\010\000\002\144\004\000\002\145\005\000\002" +
    "\145\005\000\002\145\002\000\002\146\004\000\002\147" +
    "\005\000\002\147\005\000\002\147\002\000\002\150\005" +
    "\000\002\150\003\000\002\150\003\000\002\150\004\000" +
    "\002\150\003\000\002\202\004\000\002\203\003\000\002" +
    "\203\003\000\002\204\005\000\002\204\002\000\002\205" +
    "\004\000\002\205\002\000\002\206\005\000\002\207\003" +
    "\000\002\207\003\000\002\210\005\000\002\210\002\000" +
    "\002\211\004\000\002\211\002\000\002\212\005\000\002" +
    "\212\004\000\002\213\003\000\002\213\002\000\002\214" +
    "\004\000\002\215\004\000\002\216\004\000\002\216\003" +
    "\000\002\217\003\000\002\217\003\000\002\217\003\000" +
    "\002\220\004\000\002\221\007\000\002\221\003\000\002" +
    "\222\004\000\002\222\003\000\002\223\004\000\002\223" +
    "\003\000\002\224\004\000\002\225\004\000\002\225\003" +
    "\000\002\226\004\000\002\226\003\000\002\227\005\000" +
    "\002\227\004\000\002\227\005\000\002\230\004\000\002" +
    "\231\003\000\002\231\003\000\002\231\003\000\002\232" +
    "\004\000\002\232\004\000\002\233\005\000\002\233\003" +
    "\000\002\234\003\000\002\234\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\006\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\002\000\002\006\003\000" +
    "\002\006\004\000\002\007\004\000\002\007\003\000\002" +
    "\007\002\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\013\007" +
    "\000\002\014\005\000\002\015\005\000\002\015\002\000" +
    "\002\016\004\000\002\017\004\000\002\017\003\000\002" +
    "\020\003\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\005\000\002\021\003\000\002\021\004" +
    "\000\002\022\004\000\002\022\003\000\002\023\006\000" +
    "\002\023\012\000\002\023\006\000\002\023\006\000\002" +
    "\023\010\000\002\023\007\000\002\023\006\000\002\023" +
    "\010\000\002\023\006\000\002\023\012\000\002\024\004" +
    "\000\002\024\003\000\002\024\003\000\002\025\004\000" +
    "\002\025\002\000\002\026\007\000\002\026\003\000\002" +
    "\026\003\000\002\026\010\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\003\000\002\031\006" +
    "\000\002\032\006\000\002\032\006\000\002\032\006\000" +
    "\002\032\006\000\002\032\006\000\002\033\004\000\002" +
    "\034\003\000\002\034\003\000\002\034\002\000\002\035" +
    "\003\000\002\035\004\000\002\036\004\000\002\036\002" +
    "\000\002\037\004\000\002\040\003\000\002\040\003\000" +
    "\002\040\002\000\002\041\003\000\002\041\004\000\002" +
    "\041\003\000\002\042\004\000\002\042\002\000\002\043" +
    "\004\000\002\044\003\000\002\044\003\000\002\044\002" +
    "\000\002\045\004\000\002\045\003\000\002\046\004\000" +
    "\002\046\002\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\062\003\000\002\056\003\000" +
    "\002\057\003\000\002\057\003\000\002\063\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\064\004\000\002\065\004\000" +
    "\002\065\003\000\002\066\007\000\002\067\005\000\002" +
    "\067\003\000\002\067\003\000\002\070\010\000\002\070" +
    "\010\000\002\071\006\000\002\072\004\000\002\073\003" +
    "\000\002\073\003\000\002\073\002\000\002\074\004\000" +
    "\002\075\003\000\002\075\003\000\002\075\002\000\002" +
    "\076\004\000\002\076\004\000\002\076\004\000\002\076" +
    "\002\000\002\077\003\000\002\077\002\000\002\100\004" +
    "\000\002\100\005\000\002\101\004\000\002\101\006\000" +
    "\002\101\002\000\002\102\004\000\002\102\006\000\002" +
    "\103\006\000\002\104\003\000\002\104\002\000\002\105" +
    "\005\000\002\105\004\000\002\105\005\000\002\106\004" +
    "\000\002\106\003\000\002\106\002\000\002\107\003\000" +
    "\002\107\002\000\002\110\004\000\002\111\003\000\002" +
    "\111\004\000\002\112\004\000\002\112\003\000\002\113" +
    "\004\000\002\114\003\000\002\114\003\000\002\114\002" +
    "\000\002\115\004\000\002\115\003\000\002\116\004\000" +
    "\002\117\004\000\002\117\004\000\002\117\004\000\002" +
    "\117\004\000\002\117\004\000\002\117\004\000\002\117" +
    "\004\000\002\117\004\000\002\117\004\000\002\117\004" +
    "\000\002\117\004\000\002\117\004\000\002\117\004\000" +
    "\002\120\005\000\002\120\002\000\002\121\005\000\002" +
    "\121\003\000\002\122\005\000\002\123\004\000\002\124" +
    "\003\000\002\124\003\000\002\124\002\000\002\125\004" +
    "\000\002\125\003\000\002\126\006\000\002\127\004\000" +
    "\002\127\003\000\002\130\004\000\002\143\004\000\002" +
    "\143\003\000\002\131\004\000\002\131\003\000\002\132" +
    "\004\000\002\133\005\000\002\133\003\000\002\134\005" +
    "\000\002\134\003\000\002\135\007\000\002\135\003\000" +
    "\002\136\005\000\002\136\003\000\002\137\005\000\002" +
    "\137\003\000\002\140\005\000\002\140\003\000\002\141" +
    "\005\000\002\141\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0292\000\010\002\ufffe\131\006\224\010\001\002\000" +
    "\006\327\016\u0153\017\001\002\000\010\002\ufffe\131\006" +
    "\224\010\001\002\000\010\133\u0247\244\u0246\u0140\306\001" +
    "\002\000\004\002\u0242\001\002\000\106\005\014\024\ufeb8" +
    "\042\ufeb8\050\ufeb8\064\011\140\ufeb8\150\ufeb8\214\ufeb8\231" +
    "\ufeb8\244\ufeb8\323\ufeb8\341\ufeb8\345\ufeb8\360\ufeb8\376\ufeb8" +
    "\u0100\ufeb8\u0105\ufeb8\u010d\ufeb8\u0110\ufeb8\u0111\ufeb8\u0112\ufeb8\u0116" +
    "\ufeb8\u0118\ufeb8\u0119\ufeb8\u0120\ufeb8\u0123\ufeb8\u0137\ufeb8\u013b\ufeb8" +
    "\u013c\ufeb8\u013e\ufeb8\u0140\ufeb8\u0143\ufeb8\u0158\ufeb8\u015c\ufeb8\001" +
    "\002\000\102\024\ufeb9\042\ufeb9\050\ufeb9\140\ufeb9\150\ufeb9" +
    "\214\ufeb9\231\ufeb9\244\ufeb9\323\ufeb9\341\ufeb9\345\ufeb9\360" +
    "\ufeb9\376\ufeb9\u0100\ufeb9\u0105\ufeb9\u010d\ufeb9\u0110\ufeb9\u0111\ufeb9" +
    "\u0112\ufeb9\u0116\ufeb9\u0118\ufeb9\u0119\ufeb9\u0120\ufeb9\u0123\ufeb9\u0137" +
    "\ufeb9\u013b\ufeb9\u013c\ufeb9\u013e\ufeb9\u0140\ufeb9\u0143\ufeb9\u0158\ufeb9" +
    "\u015c\ufeb9\001\002\000\102\024\027\042\033\050\063\140" +
    "\044\150\036\214\072\231\076\244\054\323\055\341\021" +
    "\345\025\360\020\376\022\u0100\064\u0105\071\u010d\030\u0110" +
    "\074\u0111\041\u0112\040\u0116\075\u0118\037\u0119\026\u0120\057" +
    "\u0123\073\u0137\043\u013b\067\u013c\050\u013e\047\u0140\062\u0143" +
    "\070\u0158\046\u015c\034\001\002\000\006\327\016\u0153\017" +
    "\001\002\000\102\024\ufeba\042\ufeba\050\ufeba\140\ufeba\150" +
    "\ufeba\214\ufeba\231\ufeba\244\ufeba\323\ufeba\341\ufeba\345\ufeba" +
    "\360\ufeba\376\ufeba\u0100\ufeba\u0105\ufeba\u010d\ufeba\u0110\ufeba\u0111" +
    "\ufeba\u0112\ufeba\u0116\ufeba\u0118\ufeba\u0119\ufeba\u0120\ufeba\u0123\ufeba" +
    "\u0137\ufeba\u013b\ufeba\u013c\ufeba\u013e\ufeba\u0140\ufeba\u0143\ufeba\u0158" +
    "\ufeba\u015c\ufeba\001\002\000\006\327\ufebc\u0153\ufebc\001\002" +
    "\000\014\002\ufffc\131\ufffc\224\ufffc\327\ufffc\u0153\ufffc\001" +
    "\002\000\014\002\ufffd\131\ufffd\224\ufffd\327\ufffd\u0153\ufffd" +
    "\001\002\000\004\u0158\u023f\001\002\000\004\u0158\u0238\001" +
    "\002\000\004\u0158\u0231\001\002\000\116\007\uff24\011\uff24" +
    "\012\uff24\016\uff24\032\uff24\044\uff24\062\uff24\071\uff24\072" +
    "\uff24\074\uff24\112\uff24\113\uff24\117\uff24\120\uff24\126\uff24" +
    "\130\uff24\133\uff24\134\uff24\135\uff24\140\uff24\141\uff24\150" +
    "\uff24\164\uff24\165\uff24\214\uff24\242\uff24\266\uff24\267\uff24" +
    "\327\uff24\u0140\uff24\u0146\uff24\u014a\uff24\u014c\uff24\u014d\uff24\u014f" +
    "\uff24\u0153\uff24\u0154\uff24\u0159\uff24\001\002\000\004\u0141\u01c2" +
    "\001\002\000\004\u0158\u022a\001\002\000\004\u0158\u0227\001" +
    "\002\000\034\150\036\266\u0219\323\055\u0100\064\u0105\071" +
    "\u0110\074\u0111\041\u013b\067\u013c\050\u013e\047\u0140\163\u0158" +
    "\046\u015c\123\001\002\000\004\u0158\u0216\001\002\000\106" +
    "\007\uff80\011\uff80\012\uff80\016\uff80\032\uff80\044\uff80\062" +
    "\uff80\074\uff80\112\uff80\113\uff80\117\uff80\120\uff80\126\uff80" +
    "\130\uff80\133\uff80\134\uff80\135\uff80\140\uff80\141\uff80\150" +
    "\uff80\164\uff80\165\uff80\214\uff80\267\uff80\327\uff80\u0140\uff80" +
    "\u0146\uff80\u014a\uff80\u014c\uff80\u014d\uff80\u014f\uff80\u0153\uff80\u0154" +
    "\uff80\u0159\uff80\001\002\000\106\007\uff7d\011\uff7d\012\uff7d" +
    "\016\uff7d\032\uff7d\044\uff7d\062\uff7d\074\uff7d\112\uff7d\113" +
    "\uff7d\117\uff7d\120\uff7d\126\uff7d\130\uff7d\133\uff7d\134\uff7d" +
    "\135\uff7d\140\uff7d\141\uff7d\150\uff7d\164\uff7d\165\uff7d\214" +
    "\uff7d\267\uff7d\327\uff7d\u0140\uff7d\u0146\uff7d\u014a\uff7d\u014c\uff7d" +
    "\u014d\uff7d\u014f\uff7d\u0153\uff7d\u0154\uff7d\u0159\uff7d\001\002\000" +
    "\004\u0158\u01e3\001\002\000\004\u0140\u01e0\001\002\000\106" +
    "\007\uff7b\011\uff7b\012\uff7b\016\uff7b\032\uff7b\044\uff7b\062" +
    "\uff7b\074\uff7b\112\uff7b\113\uff7b\117\uff7b\120\uff7b\126\uff7b" +
    "\130\uff7b\133\uff7b\134\uff7b\135\uff7b\140\uff7b\141\uff7b\150" +
    "\uff7b\164\uff7b\165\uff7b\214\uff7b\267\uff7b\327\uff7b\u0140\uff7b" +
    "\u0146\uff7b\u014a\uff7b\u014c\uff7b\u014d\uff7b\u014f\uff7b\u0153\uff7b\u0154" +
    "\uff7b\u0159\uff7b\001\002\000\032\150\uff0c\323\uff0c\u0100\uff0c" +
    "\u0105\uff0c\u0110\uff0c\u0111\uff0c\u013b\uff0c\u013c\uff0c\u013e\uff0c\u0140" +
    "\uff0c\u0158\uff0c\u015c\uff0c\001\002\000\004\u0158\u01da\001\002" +
    "\000\004\u0158\u01d3\001\002\000\004\u0158\u01d0\001\002\000" +
    "\106\007\uff73\011\213\012\uff73\016\uff73\032\uff73\044\uff73" +
    "\062\uff73\074\uff73\112\uff73\113\uff73\117\uff73\120\uff73\126" +
    "\uff73\130\uff73\133\uff73\134\uff73\135\uff73\140\uff73\141\uff73" +
    "\150\uff73\164\uff73\165\uff73\214\uff73\267\uff73\327\uff73\u0140" +
    "\215\u0146\uff73\u014a\uff73\u014c\uff73\u014d\uff73\u014f\uff73\u0153\uff73" +
    "\u0154\uff73\u0159\uff73\001\002\000\004\u0158\u01cc\001\002\000" +
    "\004\u0158\u01c7\001\002\000\130\007\uff1e\011\uff1e\012\uff1e" +
    "\016\uff1e\032\uff1e\044\uff1e\062\uff1e\071\uff1e\072\uff1e\074" +
    "\uff1e\112\uff1e\113\uff1e\117\uff1e\120\uff1e\126\uff1e\130\uff1e" +
    "\133\uff1e\134\uff1e\135\uff1e\140\uff1e\141\uff1e\150\uff1e\164" +
    "\uff1e\165\uff1e\214\uff1e\242\uff1e\266\uff1e\267\uff1e\327\uff1e" +
    "\u0140\uff1e\u0141\u01c2\u0142\u01bc\u0143\u01bb\u0144\u01bd\u0145\u01c1\u0146" +
    "\171\u014a\173\u014c\174\u014d\167\u014f\176\u0153\uff1e\u0154\uff1e" +
    "\u0159\uff1e\001\002\000\024\323\055\u0100\064\u0105\071\u0110" +
    "\074\u0111\041\u013b\067\u013c\050\u0158\046\u015c\123\001\002" +
    "\000\120\007\uff1c\011\uff1c\012\uff1c\016\uff1c\032\uff1c\044" +
    "\uff1c\062\uff1c\071\uff1c\072\uff1c\074\uff1c\112\uff1c\113\uff1c" +
    "\117\uff1c\120\uff1c\126\uff1c\130\uff1c\133\uff1c\134\uff1c\135" +
    "\uff1c\140\uff1c\141\uff1c\150\uff1c\164\uff1c\165\uff1c\214\uff1c" +
    "\242\uff1c\266\uff1c\267\uff1c\327\uff1c\u0140\uff1c\u0141\uff20\u0146" +
    "\uff1c\u014a\uff1c\u014c\uff1c\u014d\uff1c\u014f\uff1c\u0153\uff1c\u0154\uff1c" +
    "\u0159\uff1c\001\002\000\142\007\uffb9\011\uffb9\012\uffb9\016" +
    "\uffb9\032\uffb9\044\uffb9\057\uffb9\062\uffb9\071\uffb9\072\uffb9" +
    "\074\uffb9\112\uffb9\113\uffb9\117\uffb9\120\uffb9\126\uffb9\130" +
    "\uffb9\133\uffb9\134\uffb9\135\uffb9\140\uffb9\141\uffb9\150\uffb9" +
    "\164\uffb9\165\uffb9\170\uffb9\214\uffb9\224\uffb9\242\uffb9\262" +
    "\uffb9\266\uffb9\267\uffb9\327\uffb9\333\uffb9\u0140\uffb9\u0141\uffb9" +
    "\u0142\uffb9\u0143\uffb9\u0144\uffb9\u0145\uffb9\u0146\uffb9\u014a\uffb9\u014c" +
    "\uffb9\u014d\uffb9\u014f\uffb9\u0153\uffb9\u0154\uffb9\u0159\uffb9\001\002" +
    "\000\120\007\uffb7\011\uffb7\012\uffb7\016\uffb7\032\uffb7\044" +
    "\uffb7\062\uffb7\074\uffb7\112\uffb7\113\uffb7\117\uffb7\120\uffb7" +
    "\126\uffb7\130\uffb7\133\uffb7\134\uffb7\135\uffb7\140\uffb7\141" +
    "\uffb7\150\uffb7\164\uffb7\165\uffb7\214\uffb7\267\uffb7\327\uffb7" +
    "\u0140\uffb7\u0141\uffb7\u0142\uffb7\u0143\uffb7\u0144\uffb7\u0145\uffb7\u0146" +
    "\uffb7\u014a\uffb7\u014c\uffb7\u014d\uffb7\u014f\uffb7\u0153\uffb7\u0154\uffb7" +
    "\u0159\uffb7\001\002\000\006\327\ufeb6\u0153\ufeb6\001\002\000" +
    "\006\327\ufebb\u0153\ufebb\001\002\000\004\u0158\u01b2\001\002" +
    "\000\004\u0158\u01a6\001\002\000\024\112\260\117\257\120" +
    "\254\133\250\165\261\267\245\327\016\u0153\017\u0154\256" +
    "\001\002\000\004\u0158\241\001\002\000\142\007\uffbc\011" +
    "\uffbc\012\uffbc\016\uffbc\032\uffbc\044\uffbc\057\uffbc\062\uffbc" +
    "\071\uffbc\072\uffbc\074\uffbc\112\uffbc\113\uffbc\117\uffbc\120" +
    "\uffbc\126\uffbc\130\uffbc\133\uffbc\134\uffbc\135\uffbc\140\uffbc" +
    "\141\uffbc\150\uffbc\164\uffbc\165\uffbc\170\uffbc\214\uffbc\224" +
    "\uffbc\242\uffbc\262\uffbc\266\uffbc\267\uffbc\327\uffbc\333\uffbc" +
    "\u0140\uffbc\u0141\uffbc\u0142\uffbc\u0143\234\u0144\232\u0145\uffbc\u0146" +
    "\uffbc\u014a\uffbc\u014c\uffbc\u014d\uffbc\u014f\uffbc\u0153\uffbc\u0154\uffbc" +
    "\u0159\uffbc\001\002\000\142\007\uffc0\011\uffc0\012\uffc0\016" +
    "\uffc0\032\uffc0\044\uffc0\057\uffc0\062\uffc0\071\uffc0\072\uffc0" +
    "\074\uffc0\112\uffc0\113\uffc0\117\uffc0\120\uffc0\126\uffc0\130" +
    "\uffc0\133\uffc0\134\uffc0\135\uffc0\140\uffc0\141\uffc0\150\uffc0" +
    "\164\uffc0\165\uffc0\170\uffc0\214\uffc0\224\uffc0\242\uffc0\262" +
    "\uffc0\266\uffc0\267\uffc0\327\uffc0\333\uffc0\u0140\uffc0\u0141\224" +
    "\u0142\223\u0143\uffc0\u0144\uffc0\u0145\uffc0\u0146\uffc0\u014a\uffc0\u014c" +
    "\uffc0\u014d\uffc0\u014f\uffc0\u0153\uffc0\u0154\uffc0\u0159\uffc0\001\002" +
    "\000\114\007\uff78\011\uff78\012\uff78\016\uff78\032\uff78\044" +
    "\uff78\062\uff78\074\uff78\112\uff78\113\uff78\117\uff78\120\uff78" +
    "\126\uff78\130\uff78\133\uff78\134\uff78\135\uff78\140\uff78\141" +
    "\uff78\150\uff78\164\uff78\165\uff78\214\uff78\267\uff78\327\uff78" +
    "\u0140\uff78\u0141\uff1f\u0146\uff78\u014a\uff78\u014b\205\u014c\uff78\u014d" +
    "\uff78\u014f\uff78\u0153\uff78\u0154\uff78\u0155\204\u0159\uff78\001\002" +
    "\000\106\007\uff66\011\uff66\012\uff66\016\uff66\032\uff66\044" +
    "\uff66\062\uff66\074\uff66\112\uff66\113\uff66\117\uff66\120\uff66" +
    "\126\uff66\130\uff66\133\uff66\134\uff66\135\uff66\140\uff66\141" +
    "\uff66\150\uff66\164\uff66\165\uff66\214\uff66\267\uff66\327\uff66" +
    "\u0140\uff66\u0146\uff66\u014a\uff66\u014c\uff66\u014d\uff66\u014f\uff66\u0153" +
    "\uff66\u0154\uff66\u0159\uff66\001\002\000\004\u0158\200\001\002" +
    "\000\106\007\uff7e\011\uff7e\012\uff7e\016\uff7e\032\uff7e\044" +
    "\uff7e\062\uff7e\074\uff7e\112\uff7e\113\uff7e\117\uff7e\120\uff7e" +
    "\126\uff7e\130\uff7e\133\uff7e\134\uff7e\135\uff7e\140\uff7e\141" +
    "\uff7e\150\uff7e\164\uff7e\165\uff7e\214\uff7e\267\uff7e\327\uff7e" +
    "\u0140\uff7e\u0146\uff7e\u014a\uff7e\u014c\uff7e\u014d\uff7e\u014f\uff7e\u0153" +
    "\uff7e\u0154\uff7e\u0159\uff7e\001\002\000\032\150\036\323\055" +
    "\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050\u013e" +
    "\047\u0140\163\u0158\046\u015c\123\001\002\000\142\007\uffba" +
    "\011\uffba\012\uffba\016\uffba\032\uffba\044\uffba\057\uffba\062" +
    "\uffba\071\uffba\072\uffba\074\uffba\112\uffba\113\uffba\117\uffba" +
    "\120\uffba\126\uffba\130\uffba\133\uffba\134\uffba\135\uffba\140" +
    "\uffba\141\uffba\150\uffba\164\uffba\165\uffba\170\uffba\214\uffba" +
    "\224\uffba\242\uffba\262\uffba\266\uffba\267\uffba\327\uffba\333" +
    "\uffba\u0140\uffba\u0141\uffba\u0142\uffba\u0143\uffba\u0144\uffba\u0145\uffba" +
    "\u0146\uffba\u014a\uffba\u014c\uffba\u014d\uffba\u014f\uffba\u0153\uffba\u0154" +
    "\uffba\u0159\uffba\001\002\000\102\007\uff83\012\uff83\016\uff83" +
    "\032\uff83\044\uff83\062\uff83\074\uff83\112\uff83\113\uff83\117" +
    "\uff83\120\uff83\126\uff83\130\uff83\133\uff83\134\uff83\135\uff83" +
    "\140\uff83\141\uff83\150\uff83\164\uff83\165\uff83\214\uff83\267" +
    "\uff83\327\uff83\u0146\uff83\u014a\uff83\u014c\uff83\u014d\uff83\u014f\uff83" +
    "\u0153\uff83\u0154\uff83\u0159\uff83\001\002\000\004\u0158\146\001" +
    "\002\000\004\u0158\141\001\002\000\004\u0158\132\001\002" +
    "\000\004\u0158\113\001\002\000\004\u0158\105\001\002\000" +
    "\004\u0101\100\001\002\000\106\007\uff7c\011\uff7c\012\uff7c" +
    "\016\uff7c\032\uff7c\044\uff7c\062\uff7c\074\uff7c\112\uff7c\113" +
    "\uff7c\117\uff7c\120\uff7c\126\uff7c\130\uff7c\133\uff7c\134\uff7c" +
    "\135\uff7c\140\uff7c\141\uff7c\150\uff7c\164\uff7c\165\uff7c\214" +
    "\uff7c\267\uff7c\327\uff7c\u0140\uff7c\u0146\uff7c\u014a\uff7c\u014c\uff7c" +
    "\u014d\uff7c\u014f\uff7c\u0153\uff7c\u0154\uff7c\u0159\uff7c\001\002\000" +
    "\006\u0140\101\u015c\102\001\002\000\106\007\uff5e\011\uff5e" +
    "\012\uff5e\016\uff5e\032\uff5e\044\uff5e\062\uff5e\074\uff5e\112" +
    "\uff5e\113\uff5e\117\uff5e\120\uff5e\126\uff5e\130\uff5e\133\uff5e" +
    "\134\uff5e\135\uff5e\140\uff5e\141\uff5e\150\uff5e\164\uff5e\165" +
    "\uff5e\214\uff5e\267\uff5e\327\uff5e\u0140\uff5e\u0146\uff5e\u014a\uff5e" +
    "\u014c\uff5e\u014d\uff5e\u014f\uff5e\u0153\uff5e\u0154\uff5e\u0159\uff5e\001" +
    "\002\000\004\u0140\104\001\002\000\106\007\uff62\011\uff62" +
    "\012\uff62\016\uff62\032\uff62\044\uff62\062\uff62\074\uff62\112" +
    "\uff62\113\uff62\117\uff62\120\uff62\126\uff62\130\uff62\133\uff62" +
    "\134\uff62\135\uff62\140\uff62\141\uff62\150\uff62\164\uff62\165" +
    "\uff62\214\uff62\267\uff62\327\uff62\u0140\uff62\u0146\uff62\u014a\uff62" +
    "\u014c\uff62\u014d\uff62\u014f\uff62\u0153\uff62\u0154\uff62\u0159\uff62\001" +
    "\002\000\106\007\uff5f\011\uff5f\012\uff5f\016\uff5f\032\uff5f" +
    "\044\uff5f\062\uff5f\074\uff5f\112\uff5f\113\uff5f\117\uff5f\120" +
    "\uff5f\126\uff5f\130\uff5f\133\uff5f\134\uff5f\135\uff5f\140\uff5f" +
    "\141\uff5f\150\uff5f\164\uff5f\165\uff5f\214\uff5f\267\uff5f\327" +
    "\uff5f\u0140\uff5f\u0146\uff5f\u014a\uff5f\u014c\uff5f\u014d\uff5f\u014f\uff5f" +
    "\u0153\uff5f\u0154\uff5f\u0159\uff5f\001\002\000\006\u013e\106\u015c" +
    "\107\001\002\000\004\u0159\uff61\001\002\000\004\u0140\112" +
    "\001\002\000\004\u0159\111\001\002\000\106\007\uff65\011" +
    "\uff65\012\uff65\016\uff65\032\uff65\044\uff65\062\uff65\074\uff65" +
    "\112\uff65\113\uff65\117\uff65\120\uff65\126\uff65\130\uff65\133" +
    "\uff65\134\uff65\135\uff65\140\uff65\141\uff65\150\uff65\164\uff65" +
    "\165\uff65\214\uff65\267\uff65\327\uff65\u0140\uff65\u0146\uff65\u014a" +
    "\uff65\u014c\uff65\u014d\uff65\u014f\uff65\u0153\uff65\u0154\uff65\u0159\uff65" +
    "\001\002\000\004\u0159\uff60\001\002\000\032\005\115\064" +
    "\114\323\uff2c\u0100\uff2c\u0105\uff2c\u0110\uff2c\u0111\uff2c\u013b\uff2c" +
    "\u013c\uff2c\u0140\uff2c\u0158\uff2c\u015c\uff2c\001\002\000\026\323" +
    "\uff2d\u0100\uff2d\u0105\uff2d\u0110\uff2d\u0111\uff2d\u013b\uff2d\u013c\uff2d" +
    "\u0140\uff2d\u0158\uff2d\u015c\uff2d\001\002\000\026\323\uff2e\u0100" +
    "\uff2e\u0105\uff2e\u0110\uff2e\u0111\uff2e\u013b\uff2e\u013c\uff2e\u0140\uff2e" +
    "\u0158\uff2e\u015c\uff2e\001\002\000\004\u0159\131\001\002\000" +
    "\026\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067" +
    "\u013c\050\u0140\122\u0158\046\u015c\123\001\002\000\004\u0159" +
    "\uff2f\001\002\000\004\u0159\uff2a\001\002\000\006\u0155\127" +
    "\u0159\uff28\001\002\000\004\u0140\125\001\002\000\142\007" +
    "\uffb7\011\uffb7\012\uffb7\016\uffb7\032\uffb7\044\uffb7\057\uffb7" +
    "\062\uffb7\071\uffb7\072\uffb7\074\uffb7\112\uffb7\113\uffb7\117" +
    "\uffb7\120\uffb7\126\uffb7\130\uffb7\133\uffb7\134\uffb7\135\uffb7" +
    "\140\uffb7\141\uffb7\150\uffb7\164\uffb7\165\uffb7\170\uffb7\214" +
    "\uffb7\224\uffb7\242\uffb7\262\uffb7\266\uffb7\267\uffb7\327\uffb7" +
    "\333\uffb7\u0140\uffb7\u0141\uffb7\u0142\uffb7\u0143\uffb7\u0144\uffb7\u0145" +
    "\uffb7\u0146\uffb7\u014a\uffb7\u014c\uffb7\u014d\uffb7\u014f\uffb7\u0153\uffb7" +
    "\u0154\uffb7\u0159\uffb7\001\002\000\142\007\uffb8\011\uffb8\012" +
    "\uffb8\016\uffb8\032\uffb8\044\uffb8\057\uffb8\062\uffb8\071\uffb8" +
    "\072\uffb8\074\uffb8\112\uffb8\113\uffb8\117\uffb8\120\uffb8\126" +
    "\uffb8\130\uffb8\133\uffb8\134\uffb8\135\uffb8\140\uffb8\141\uffb8" +
    "\150\uffb8\164\uffb8\165\uffb8\170\uffb8\214\uffb8\224\uffb8\242" +
    "\uffb8\262\uffb8\266\uffb8\267\uffb8\327\uffb8\333\uffb8\u0140\uffb8" +
    "\u0141\uffb8\u0142\uffb8\u0143\uffb8\u0144\uffb8\u0145\uffb8\u0146\uffb8\u014a" +
    "\uffb8\u014c\uffb8\u014d\uffb8\u014f\uffb8\u0153\uffb8\u0154\uffb8\u0159\uffb8" +
    "\001\002\000\004\u0159\uff2b\001\002\000\004\u0140\130\001" +
    "\002\000\004\u0159\uff29\001\002\000\142\007\uff43\011\uff43" +
    "\012\uff43\016\uff43\032\uff43\044\uff43\057\uff43\062\uff43\071" +
    "\uff43\072\uff43\074\uff43\112\uff43\113\uff43\117\uff43\120\uff43" +
    "\126\uff43\130\uff43\133\uff43\134\uff43\135\uff43\140\uff43\141" +
    "\uff43\150\uff43\164\uff43\165\uff43\170\uff43\214\uff43\224\uff43" +
    "\242\uff43\262\uff43\266\uff43\267\uff43\327\uff43\333\uff43\u0140" +
    "\uff43\u0141\uff43\u0142\uff43\u0143\uff43\u0144\uff43\u0145\uff43\u0146\uff43" +
    "\u014a\uff43\u014c\uff43\u014d\uff43\u014f\uff43\u0153\uff43\u0154\uff43\u0159" +
    "\uff43\001\002\000\010\u013e\135\u0140\133\u015c\134\001\002" +
    "\000\010\112\uff51\u0154\uff51\u0159\uff51\001\002\000\004\u0140" +
    "\140\001\002\000\010\112\uff52\u0154\uff52\u0159\uff52\001\002" +
    "\000\004\u0159\137\001\002\000\106\007\uff5b\011\uff5b\012" +
    "\uff5b\016\uff5b\032\uff5b\044\uff5b\062\uff5b\074\uff5b\112\uff5b" +
    "\113\uff5b\117\uff5b\120\uff5b\126\uff5b\130\uff5b\133\uff5b\134" +
    "\uff5b\135\uff5b\140\uff5b\141\uff5b\150\uff5b\164\uff5b\165\uff5b" +
    "\214\uff5b\267\uff5b\327\uff5b\u0140\uff5b\u0146\uff5b\u014a\uff5b\u014c" +
    "\uff5b\u014d\uff5b\u014f\uff5b\u0153\uff5b\u0154\uff5b\u0159\uff5b\001\002" +
    "\000\010\112\uff53\u0154\uff53\u0159\uff53\001\002\000\010\u013e" +
    "\135\u0140\133\u015c\134\001\002\000\004\u0154\143\001\002" +
    "\000\024\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b" +
    "\067\u013c\050\u0158\046\u015c\123\001\002\000\004\u0159\145" +
    "\001\002\000\106\007\uff56\011\uff56\012\uff56\016\uff56\032" +
    "\uff56\044\uff56\062\uff56\074\uff56\112\uff56\113\uff56\117\uff56" +
    "\120\uff56\126\uff56\130\uff56\133\uff56\134\uff56\135\uff56\140" +
    "\uff56\141\uff56\150\uff56\164\uff56\165\uff56\214\uff56\267\uff56" +
    "\327\uff56\u0140\uff56\u0146\uff56\u014a\uff56\u014c\uff56\u014d\uff56\u014f" +
    "\uff56\u0153\uff56\u0154\uff56\u0159\uff56\001\002\000\034\005\152" +
    "\064\150\323\uff35\u0100\uff35\u0105\uff35\u0110\uff35\u0111\uff35\u013b" +
    "\uff35\u013c\uff35\u0140\uff35\u0143\uff35\u0158\uff35\u015c\uff35\001\002" +
    "\000\030\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b" +
    "\067\u013c\050\u0140\156\u0143\154\u0158\046\u015c\123\001\002" +
    "\000\030\323\uff36\u0100\uff36\u0105\uff36\u0110\uff36\u0111\uff36\u013b" +
    "\uff36\u013c\uff36\u0140\uff36\u0143\uff36\u0158\uff36\u015c\uff36\001\002" +
    "\000\004\u0159\153\001\002\000\030\323\uff37\u0100\uff37\u0105" +
    "\uff37\u0110\uff37\u0111\uff37\u013b\uff37\u013c\uff37\u0140\uff37\u0143\uff37" +
    "\u0158\uff37\u015c\uff37\001\002\000\142\007\uff44\011\uff44\012" +
    "\uff44\016\uff44\032\uff44\044\uff44\057\uff44\062\uff44\071\uff44" +
    "\072\uff44\074\uff44\112\uff44\113\uff44\117\uff44\120\uff44\126" +
    "\uff44\130\uff44\133\uff44\134\uff44\135\uff44\140\uff44\141\uff44" +
    "\150\uff44\164\uff44\165\uff44\170\uff44\214\uff44\224\uff44\242" +
    "\uff44\262\uff44\266\uff44\267\uff44\327\uff44\333\uff44\u0140\uff44" +
    "\u0141\uff44\u0142\uff44\u0143\uff44\u0144\uff44\u0145\uff44\u0146\uff44\u014a" +
    "\uff44\u014c\uff44\u014d\uff44\u014f\uff44\u0153\uff44\u0154\uff44\u0159\uff44" +
    "\001\002\000\004\u0159\uff34\001\002\000\004\u0159\uff32\001" +
    "\002\000\006\u0155\160\u0159\uff30\001\002\000\004\u0159\uff38" +
    "\001\002\000\004\u0140\162\001\002\000\004\u0159\uff33\001" +
    "\002\000\004\u0159\uff31\001\002\000\120\007\uff1d\011\uff1d" +
    "\012\uff1d\016\uff1d\032\uff1d\044\uff1d\062\uff1d\071\uff1d\072" +
    "\uff1d\074\uff1d\112\uff1d\113\uff1d\117\uff1d\120\uff1d\126\uff1d" +
    "\130\uff1d\133\uff1d\134\uff1d\135\uff1d\140\uff1d\141\uff1d\150" +
    "\uff1d\164\uff1d\165\uff1d\214\uff1d\242\uff1d\266\uff1d\267\uff1d" +
    "\327\uff1d\u0140\uff1d\u0141\uff1f\u0146\uff1d\u014a\uff1d\u014c\uff1d\u014d" +
    "\uff1d\u014f\uff1d\u0153\uff1d\u0154\uff1d\u0159\uff1d\001\002\000\022" +
    "\016\172\126\166\141\177\u0146\171\u014a\173\u014c\174\u014d" +
    "\167\u014f\176\001\002\000\116\007\uff1b\011\uff1b\012\uff1b" +
    "\016\uff1b\032\uff1b\044\uff1b\062\uff1b\071\uff1b\072\uff1b\074" +
    "\uff1b\112\uff1b\113\uff1b\117\uff1b\120\uff1b\126\uff1b\130\uff1b" +
    "\133\uff1b\134\uff1b\135\uff1b\140\uff1b\141\uff1b\150\uff1b\164" +
    "\uff1b\165\uff1b\214\uff1b\242\uff1b\266\uff1b\267\uff1b\327\uff1b" +
    "\u0140\uff1b\u0146\uff1b\u014a\uff1b\u014c\uff1b\u014d\uff1b\u014f\uff1b\u0153" +
    "\uff1b\u0154\uff1b\u0159\uff1b\001\002\000\116\007\uff05\011\uff05" +
    "\012\uff05\016\uff05\032\uff05\044\uff05\062\uff05\071\uff05\072" +
    "\uff05\074\uff05\112\uff05\113\uff05\117\uff05\120\uff05\126\uff05" +
    "\130\uff05\133\uff05\134\uff05\135\uff05\140\uff05\141\uff05\150" +
    "\uff05\164\uff05\165\uff05\214\uff05\242\uff05\266\uff05\267\uff05" +
    "\327\uff05\u0140\uff05\u0146\uff05\u014a\uff05\u014c\uff05\u014d\uff05\u014f" +
    "\uff05\u0153\uff05\u0154\uff05\u0159\uff05\001\002\000\212\007\uff0a" +
    "\011\uff0a\012\uff0a\016\uff0a\024\uff0a\032\uff0a\042\uff0a\044" +
    "\uff0a\050\uff0a\062\uff0a\071\uff0a\072\uff0a\074\uff0a\112\uff0a" +
    "\113\uff0a\117\uff0a\120\uff0a\126\uff0a\130\uff0a\133\uff0a\134" +
    "\uff0a\135\uff0a\140\uff0a\141\uff0a\150\uff0a\152\uff0a\164\uff0a" +
    "\165\uff0a\214\uff0a\230\uff0a\231\uff0a\236\uff0a\242\uff0a\266" +
    "\uff0a\267\uff0a\323\uff0a\327\uff0a\341\uff0a\345\uff0a\360\uff0a" +
    "\376\uff0a\u0100\uff0a\u0105\uff0a\u010d\uff0a\u0110\uff0a\u0111\uff0a\u0112" +
    "\uff0a\u0116\uff0a\u0118\uff0a\u0119\uff0a\u0120\uff0a\u0122\uff0a\u0123\uff0a" +
    "\u0137\uff0a\u013b\uff0a\u013c\uff0a\u013e\uff0a\u0140\uff0a\u0146\uff0a\u014a" +
    "\uff0a\u014c\uff0a\u014d\uff0a\u014f\uff0a\u0153\uff0a\u0154\uff0a\u0158\uff0a" +
    "\u0159\uff0a\u015c\uff0a\001\002\000\116\007\uff25\011\uff25\012" +
    "\uff25\016\uff25\032\uff25\044\uff25\062\uff25\071\uff25\072\uff25" +
    "\074\uff25\112\uff25\113\uff25\117\uff25\120\uff25\126\uff25\130" +
    "\uff25\133\uff25\134\uff25\135\uff25\140\uff25\141\uff25\150\uff25" +
    "\164\uff25\165\uff25\214\uff25\242\uff25\266\uff25\267\uff25\327" +
    "\uff25\u0140\uff25\u0146\uff25\u014a\uff25\u014c\uff25\u014d\uff25\u014f\uff25" +
    "\u0153\uff25\u0154\uff25\u0159\uff25\001\002\000\212\007\uff08\011" +
    "\uff08\012\uff08\016\uff08\024\uff08\032\uff08\042\uff08\044\uff08" +
    "\050\uff08\062\uff08\071\uff08\072\uff08\074\uff08\112\uff08\113" +
    "\uff08\117\uff08\120\uff08\126\uff08\130\uff08\133\uff08\134\uff08" +
    "\135\uff08\140\uff08\141\uff08\150\uff08\152\uff08\164\uff08\165" +
    "\uff08\214\uff08\230\uff08\231\uff08\236\uff08\242\uff08\266\uff08" +
    "\267\uff08\323\uff08\327\uff08\341\uff08\345\uff08\360\uff08\376" +
    "\uff08\u0100\uff08\u0105\uff08\u010d\uff08\u0110\uff08\u0111\uff08\u0112\uff08" +
    "\u0116\uff08\u0118\uff08\u0119\uff08\u0120\uff08\u0122\uff08\u0123\uff08\u0137" +
    "\uff08\u013b\uff08\u013c\uff08\u013e\uff08\u0140\uff08\u0146\uff08\u014a\uff08" +
    "\u014c\uff08\u014d\uff08\u014f\uff08\u0153\uff08\u0154\uff08\u0158\uff08\u0159" +
    "\uff08\u015c\uff08\001\002\000\116\007\uff06\011\uff06\012\uff06" +
    "\016\uff06\032\uff06\044\uff06\062\uff06\071\uff06\072\uff06\074" +
    "\uff06\112\uff06\113\uff06\117\uff06\120\uff06\126\uff06\130\uff06" +
    "\133\uff06\134\uff06\135\uff06\140\uff06\141\uff06\150\uff06\164" +
    "\uff06\165\uff06\214\uff06\242\uff06\266\uff06\267\uff06\327\uff06" +
    "\u0140\uff06\u0146\uff06\u014a\uff06\u014c\uff06\u014d\uff06\u014f\uff06\u0153" +
    "\uff06\u0154\uff06\u0159\uff06\001\002\000\212\007\uff09\011\uff09" +
    "\012\uff09\016\uff09\024\uff09\032\uff09\042\uff09\044\uff09\050" +
    "\uff09\062\uff09\071\uff09\072\uff09\074\uff09\112\uff09\113\uff09" +
    "\117\uff09\120\uff09\126\uff09\130\uff09\133\uff09\134\uff09\135" +
    "\uff09\140\uff09\141\uff09\150\uff09\152\uff09\164\uff09\165\uff09" +
    "\214\uff09\230\uff09\231\uff09\236\uff09\242\uff09\266\uff09\267" +
    "\uff09\323\uff09\327\uff09\341\uff09\345\uff09\360\uff09\376\uff09" +
    "\u0100\uff09\u0105\uff09\u010d\uff09\u0110\uff09\u0111\uff09\u0112\uff09\u0116" +
    "\uff09\u0118\uff09\u0119\uff09\u0120\uff09\u0122\uff09\u0123\uff09\u0137\uff09" +
    "\u013b\uff09\u013c\uff09\u013e\uff09\u0140\uff09\u0146\uff09\u014a\uff09\u014c" +
    "\uff09\u014d\uff09\u014f\uff09\u0153\uff09\u0154\uff09\u0158\uff09\u0159\uff09" +
    "\u015c\uff09\001\002\000\212\007\uff0b\011\uff0b\012\uff0b\016" +
    "\uff0b\024\uff0b\032\uff0b\042\uff0b\044\uff0b\050\uff0b\062\uff0b" +
    "\071\uff0b\072\uff0b\074\uff0b\112\uff0b\113\uff0b\117\uff0b\120" +
    "\uff0b\126\uff0b\130\uff0b\133\uff0b\134\uff0b\135\uff0b\140\uff0b" +
    "\141\uff0b\150\uff0b\152\uff0b\164\uff0b\165\uff0b\214\uff0b\230" +
    "\uff0b\231\uff0b\236\uff0b\242\uff0b\266\uff0b\267\uff0b\323\uff0b" +
    "\327\uff0b\341\uff0b\345\uff0b\360\uff0b\376\uff0b\u0100\uff0b\u0105" +
    "\uff0b\u010d\uff0b\u0110\uff0b\u0111\uff0b\u0112\uff0b\u0116\uff0b\u0118\uff0b" +
    "\u0119\uff0b\u0120\uff0b\u0122\uff0b\u0123\uff0b\u0137\uff0b\u013b\uff0b\u013c" +
    "\uff0b\u013e\uff0b\u0140\uff0b\u0146\uff0b\u014a\uff0b\u014c\uff0b\u014d\uff0b" +
    "\u014f\uff0b\u0153\uff0b\u0154\uff0b\u0158\uff0b\u0159\uff0b\u015c\uff0b\001" +
    "\002\000\116\007\uff1a\011\uff1a\012\uff1a\016\uff1a\032\uff1a" +
    "\044\uff1a\062\uff1a\071\uff1a\072\uff1a\074\uff1a\112\uff1a\113" +
    "\uff1a\117\uff1a\120\uff1a\126\uff1a\130\uff1a\133\uff1a\134\uff1a" +
    "\135\uff1a\140\uff1a\141\uff1a\150\uff1a\164\uff1a\165\uff1a\214" +
    "\uff1a\242\uff1a\266\uff1a\267\uff1a\327\uff1a\u0140\uff1a\u0146\uff1a" +
    "\u014a\uff1a\u014c\uff1a\u014d\uff1a\u014f\uff1a\u0153\uff1a\u0154\uff1a\u0159" +
    "\uff1a\001\002\000\212\007\uff07\011\uff07\012\uff07\016\uff07" +
    "\024\uff07\032\uff07\042\uff07\044\uff07\050\uff07\062\uff07\071" +
    "\uff07\072\uff07\074\uff07\112\uff07\113\uff07\117\uff07\120\uff07" +
    "\126\uff07\130\uff07\133\uff07\134\uff07\135\uff07\140\uff07\141" +
    "\uff07\150\uff07\152\uff07\164\uff07\165\uff07\214\uff07\230\uff07" +
    "\231\uff07\236\uff07\242\uff07\266\uff07\267\uff07\323\uff07\327" +
    "\uff07\341\uff07\345\uff07\360\uff07\376\uff07\u0100\uff07\u0105\uff07" +
    "\u010d\uff07\u0110\uff07\u0111\uff07\u0112\uff07\u0116\uff07\u0118\uff07\u0119" +
    "\uff07\u0120\uff07\u0122\uff07\u0123\uff07\u0137\uff07\u013b\uff07\u013c\uff07" +
    "\u013e\uff07\u0140\uff07\u0146\uff07\u014a\uff07\u014c\uff07\u014d\uff07\u014f" +
    "\uff07\u0153\uff07\u0154\uff07\u0158\uff07\u0159\uff07\u015c\uff07\001\002" +
    "\000\116\007\uff04\011\uff04\012\uff04\016\uff04\032\uff04\044" +
    "\uff04\062\uff04\071\uff04\072\uff04\074\uff04\112\uff04\113\uff04" +
    "\117\uff04\120\uff04\126\uff04\130\uff04\133\uff04\134\uff04\135" +
    "\uff04\140\uff04\141\uff04\150\uff04\164\uff04\165\uff04\214\uff04" +
    "\242\uff04\266\uff04\267\uff04\327\uff04\u0140\uff04\u0146\uff04\u014a" +
    "\uff04\u014c\uff04\u014d\uff04\u014f\uff04\u0153\uff04\u0154\uff04\u0159\uff04" +
    "\001\002\000\032\005\115\064\114\323\uff2c\u0100\uff2c\u0105" +
    "\uff2c\u0110\uff2c\u0111\uff2c\u013b\uff2c\u013c\uff2c\u0140\uff2c\u0158\uff2c" +
    "\u015c\uff2c\001\002\000\004\u0159\202\001\002\000\142\007" +
    "\uff41\011\uff41\012\uff41\016\uff41\032\uff41\044\uff41\057\uff41" +
    "\062\uff41\071\uff41\072\uff41\074\uff41\112\uff41\113\uff41\117" +
    "\uff41\120\uff41\126\uff41\130\uff41\133\uff41\134\uff41\135\uff41" +
    "\140\uff41\141\uff41\150\uff41\164\uff41\165\uff41\170\uff41\214" +
    "\uff41\224\uff41\242\uff41\262\uff41\266\uff41\267\uff41\327\uff41" +
    "\333\uff41\u0140\uff41\u0141\uff41\u0142\uff41\u0143\uff41\u0144\uff41\u0145" +
    "\uff41\u0146\uff41\u014a\uff41\u014c\uff41\u014d\uff41\u014f\uff41\u0153\uff41" +
    "\u0154\uff41\u0159\uff41\001\002\000\106\007\uff81\011\uff81\012" +
    "\uff81\016\uff81\032\uff81\044\uff81\062\uff81\074\uff81\112\uff81" +
    "\113\uff81\117\uff81\120\uff81\126\uff81\130\uff81\133\uff81\134" +
    "\uff81\135\uff81\140\uff81\141\uff81\150\uff81\164\uff81\165\uff81" +
    "\214\uff81\267\uff81\327\uff81\u0140\uff81\u0146\uff81\u014a\uff81\u014c" +
    "\uff81\u014d\uff81\u014f\uff81\u0153\uff81\u0154\uff81\u0159\uff81\001\002" +
    "\000\006\u0140\211\u0143\212\001\002\000\032\150\036\323" +
    "\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050" +
    "\u013e\047\u0140\163\u0158\046\u015c\123\001\002\000\106\007" +
    "\uff79\011\uff79\012\uff79\016\uff79\032\uff79\044\uff79\062\uff79" +
    "\074\uff79\112\uff79\113\uff79\117\uff79\120\uff79\126\uff79\130" +
    "\uff79\133\uff79\134\uff79\135\uff79\140\uff79\141\uff79\150\uff79" +
    "\164\uff79\165\uff79\214\uff79\267\uff79\327\uff79\u0140\uff79\u0146" +
    "\uff79\u014a\uff79\u014c\uff79\u014d\uff79\u014f\uff79\u0153\uff79\u0154\uff79" +
    "\u0159\uff79\001\002\000\106\007\uff72\011\uff72\012\uff72\016" +
    "\uff72\032\uff72\044\uff72\062\uff72\074\uff72\112\uff72\113\uff72" +
    "\117\uff72\120\uff72\126\uff72\130\uff72\133\uff72\134\uff72\135" +
    "\uff72\140\uff72\141\uff72\150\uff72\164\uff72\165\uff72\214\uff72" +
    "\267\uff72\327\uff72\u0140\uff72\u0146\uff72\u014a\uff72\u014c\uff72\u014d" +
    "\uff72\u014f\uff72\u0153\uff72\u0154\uff72\u0159\uff72\001\002\000\106" +
    "\007\uff7a\011\uff7a\012\uff7a\016\uff7a\032\uff7a\044\uff7a\062" +
    "\uff7a\074\uff7a\112\uff7a\113\uff7a\117\uff7a\120\uff7a\126\uff7a" +
    "\130\uff7a\133\uff7a\134\uff7a\135\uff7a\140\uff7a\141\uff7a\150" +
    "\uff7a\164\uff7a\165\uff7a\214\uff7a\267\uff7a\327\uff7a\u0140\uff7a" +
    "\u0146\uff7a\u014a\uff7a\u014c\uff7a\u014d\uff7a\u014f\uff7a\u0153\uff7a\u0154" +
    "\uff7a\u0159\uff7a\001\002\000\110\007\uff73\011\213\012\uff73" +
    "\016\uff73\032\uff73\044\uff73\062\uff73\074\uff73\112\uff73\113" +
    "\uff73\117\uff73\120\uff73\126\uff73\130\uff73\133\uff73\134\uff73" +
    "\135\uff73\140\uff73\141\uff73\150\uff73\164\uff73\165\uff73\214" +
    "\uff73\267\uff73\327\uff73\u0140\215\u0146\uff73\u014a\uff73\u014c\uff73" +
    "\u014d\uff73\u014f\uff73\u0153\uff73\u0154\uff73\u0155\214\u0159\uff73\001" +
    "\002\000\106\007\uff77\011\uff77\012\uff77\016\uff77\032\uff77" +
    "\044\uff77\062\uff77\074\uff77\112\uff77\113\uff77\117\uff77\120" +
    "\uff77\126\uff77\130\uff77\133\uff77\134\uff77\135\uff77\140\uff77" +
    "\141\uff77\150\uff77\164\uff77\165\uff77\214\uff77\267\uff77\327" +
    "\uff77\u0140\uff77\u0146\uff77\u014a\uff77\u014c\uff77\u014d\uff77\u014f\uff77" +
    "\u0153\uff77\u0154\uff77\u0159\uff77\001\002\000\004\u0140\222\001" +
    "\002\000\004\u0140\220\001\002\000\106\007\uff74\011\uff74" +
    "\012\uff74\016\uff74\032\uff74\044\uff74\062\uff74\074\uff74\112" +
    "\uff74\113\uff74\117\uff74\120\uff74\126\uff74\130\uff74\133\uff74" +
    "\134\uff74\135\uff74\140\uff74\141\uff74\150\uff74\164\uff74\165" +
    "\uff74\214\uff74\267\uff74\327\uff74\u0140\uff74\u0146\uff74\u014a\uff74" +
    "\u014c\uff74\u014d\uff74\u014f\uff74\u0153\uff74\u0154\uff74\u0159\uff74\001" +
    "\002\000\106\007\uff76\011\uff76\012\uff76\016\uff76\032\uff76" +
    "\044\uff76\062\uff76\074\uff76\112\uff76\113\uff76\117\uff76\120" +
    "\uff76\126\uff76\130\uff76\133\uff76\134\uff76\135\uff76\140\uff76" +
    "\141\uff76\150\uff76\164\uff76\165\uff76\214\uff76\267\uff76\327" +
    "\uff76\u0140\uff76\u0146\uff76\u014a\uff76\u014c\uff76\u014d\uff76\u014f\uff76" +
    "\u0153\uff76\u0154\uff76\u0159\uff76\001\002\000\106\007\uff70\011" +
    "\uff70\012\uff70\016\uff70\032\uff70\044\uff70\062\uff70\074\uff70" +
    "\112\uff70\113\uff70\117\uff70\120\uff70\126\uff70\130\uff70\133" +
    "\uff70\134\uff70\135\uff70\140\uff70\141\uff70\150\uff70\164\uff70" +
    "\165\uff70\214\uff70\267\uff70\327\uff70\u0140\uff70\u0146\uff70\u014a" +
    "\uff70\u014c\uff70\u014d\uff70\u014f\uff70\u0153\uff70\u0154\uff70\u0159\uff70" +
    "\001\002\000\106\007\uff73\011\213\012\uff73\016\uff73\032" +
    "\uff73\044\uff73\062\uff73\074\uff73\112\uff73\113\uff73\117\uff73" +
    "\120\uff73\126\uff73\130\uff73\133\uff73\134\uff73\135\uff73\140" +
    "\uff73\141\uff73\150\uff73\164\uff73\165\uff73\214\uff73\267\uff73" +
    "\327\uff73\u0140\215\u0146\uff73\u014a\uff73\u014c\uff73\u014d\uff73\u014f" +
    "\uff73\u0153\uff73\u0154\uff73\u0159\uff73\001\002\000\106\007\uff71" +
    "\011\uff71\012\uff71\016\uff71\032\uff71\044\uff71\062\uff71\074" +
    "\uff71\112\uff71\113\uff71\117\uff71\120\uff71\126\uff71\130\uff71" +
    "\133\uff71\134\uff71\135\uff71\140\uff71\141\uff71\150\uff71\164" +
    "\uff71\165\uff71\214\uff71\267\uff71\327\uff71\u0140\uff71\u0146\uff71" +
    "\u014a\uff71\u014c\uff71\u014d\uff71\u014f\uff71\u0153\uff71\u0154\uff71\u0159" +
    "\uff71\001\002\000\106\007\uff75\011\uff75\012\uff75\016\uff75" +
    "\032\uff75\044\uff75\062\uff75\074\uff75\112\uff75\113\uff75\117" +
    "\uff75\120\uff75\126\uff75\130\uff75\133\uff75\134\uff75\135\uff75" +
    "\140\uff75\141\uff75\150\uff75\164\uff75\165\uff75\214\uff75\267" +
    "\uff75\327\uff75\u0140\uff75\u0146\uff75\u014a\uff75\u014c\uff75\u014d\uff75" +
    "\u014f\uff75\u0153\uff75\u0154\uff75\u0159\uff75\001\002\000\024\323" +
    "\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050" +
    "\u0158\046\u015c\123\001\002\000\024\323\055\u0100\064\u0105" +
    "\071\u0110\074\u0111\041\u013b\067\u013c\050\u0158\046\u015c\123" +
    "\001\002\000\142\007\uffc3\011\uffc3\012\uffc3\016\uffc3\032" +
    "\uffc3\044\uffc3\057\uffc3\062\uffc3\071\uffc3\072\uffc3\074\uffc3" +
    "\112\uffc3\113\uffc3\117\uffc3\120\uffc3\126\uffc3\130\uffc3\133" +
    "\uffc3\134\uffc3\135\uffc3\140\uffc3\141\uffc3\150\uffc3\164\uffc3" +
    "\165\uffc3\170\uffc3\214\uffc3\224\uffc3\242\uffc3\262\uffc3\266" +
    "\uffc3\267\uffc3\327\uffc3\333\uffc3\u0140\uffc3\u0141\uffc3\u0142\uffc3" +
    "\u0143\uffc3\u0144\uffc3\u0145\uffc3\u0146\uffc3\u014a\uffc3\u014c\uffc3\u014d" +
    "\uffc3\u014f\uffc3\u0153\uffc3\u0154\uffc3\u0159\uffc3\001\002\000\142" +
    "\007\uffc0\011\uffc0\012\uffc0\016\uffc0\032\uffc0\044\uffc0\057" +
    "\uffc0\062\uffc0\071\uffc0\072\uffc0\074\uffc0\112\uffc0\113\uffc0" +
    "\117\uffc0\120\uffc0\126\uffc0\130\uffc0\133\uffc0\134\uffc0\135" +
    "\uffc0\140\uffc0\141\uffc0\150\uffc0\164\uffc0\165\uffc0\170\uffc0" +
    "\214\uffc0\224\uffc0\242\uffc0\262\uffc0\266\uffc0\267\uffc0\327" +
    "\uffc0\333\uffc0\u0140\uffc0\u0141\224\u0142\223\u0143\uffc0\u0144\uffc0" +
    "\u0145\uffc0\u0146\uffc0\u014a\uffc0\u014c\uffc0\u014d\uffc0\u014f\uffc0\u0153" +
    "\uffc0\u0154\uffc0\u0159\uffc0\001\002\000\142\007\uffc2\011\uffc2" +
    "\012\uffc2\016\uffc2\032\uffc2\044\uffc2\057\uffc2\062\uffc2\071" +
    "\uffc2\072\uffc2\074\uffc2\112\uffc2\113\uffc2\117\uffc2\120\uffc2" +
    "\126\uffc2\130\uffc2\133\uffc2\134\uffc2\135\uffc2\140\uffc2\141" +
    "\uffc2\150\uffc2\164\uffc2\165\uffc2\170\uffc2\214\uffc2\224\uffc2" +
    "\242\uffc2\262\uffc2\266\uffc2\267\uffc2\327\uffc2\333\uffc2\u0140" +
    "\uffc2\u0141\uffc2\u0142\uffc2\u0143\uffc2\u0144\uffc2\u0145\uffc2\u0146\uffc2" +
    "\u014a\uffc2\u014c\uffc2\u014d\uffc2\u014f\uffc2\u0153\uffc2\u0154\uffc2\u0159" +
    "\uffc2\001\002\000\142\007\uffc0\011\uffc0\012\uffc0\016\uffc0" +
    "\032\uffc0\044\uffc0\057\uffc0\062\uffc0\071\uffc0\072\uffc0\074" +
    "\uffc0\112\uffc0\113\uffc0\117\uffc0\120\uffc0\126\uffc0\130\uffc0" +
    "\133\uffc0\134\uffc0\135\uffc0\140\uffc0\141\uffc0\150\uffc0\164" +
    "\uffc0\165\uffc0\170\uffc0\214\uffc0\224\uffc0\242\uffc0\262\uffc0" +
    "\266\uffc0\267\uffc0\327\uffc0\333\uffc0\u0140\uffc0\u0141\224\u0142" +
    "\223\u0143\uffc0\u0144\uffc0\u0145\uffc0\u0146\uffc0\u014a\uffc0\u014c\uffc0" +
    "\u014d\uffc0\u014f\uffc0\u0153\uffc0\u0154\uffc0\u0159\uffc0\001\002\000" +
    "\142\007\uffc1\011\uffc1\012\uffc1\016\uffc1\032\uffc1\044\uffc1" +
    "\057\uffc1\062\uffc1\071\uffc1\072\uffc1\074\uffc1\112\uffc1\113" +
    "\uffc1\117\uffc1\120\uffc1\126\uffc1\130\uffc1\133\uffc1\134\uffc1" +
    "\135\uffc1\140\uffc1\141\uffc1\150\uffc1\164\uffc1\165\uffc1\170" +
    "\uffc1\214\uffc1\224\uffc1\242\uffc1\262\uffc1\266\uffc1\267\uffc1" +
    "\327\uffc1\333\uffc1\u0140\uffc1\u0141\uffc1\u0142\uffc1\u0143\uffc1\u0144" +
    "\uffc1\u0145\uffc1\u0146\uffc1\u014a\uffc1\u014c\uffc1\u014d\uffc1\u014f\uffc1" +
    "\u0153\uffc1\u0154\uffc1\u0159\uffc1\001\002\000\024\323\055\u0100" +
    "\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050\u0158\046" +
    "\u015c\123\001\002\000\142\007\uffbf\011\uffbf\012\uffbf\016" +
    "\uffbf\032\uffbf\044\uffbf\057\uffbf\062\uffbf\071\uffbf\072\uffbf" +
    "\074\uffbf\112\uffbf\113\uffbf\117\uffbf\120\uffbf\126\uffbf\130" +
    "\uffbf\133\uffbf\134\uffbf\135\uffbf\140\uffbf\141\uffbf\150\uffbf" +
    "\164\uffbf\165\uffbf\170\uffbf\214\uffbf\224\uffbf\242\uffbf\262" +
    "\uffbf\266\uffbf\267\uffbf\327\uffbf\333\uffbf\u0140\uffbf\u0141\uffbf" +
    "\u0142\uffbf\u0143\uffbf\u0144\uffbf\u0145\uffbf\u0146\uffbf\u014a\uffbf\u014c" +
    "\uffbf\u014d\uffbf\u014f\uffbf\u0153\uffbf\u0154\uffbf\u0159\uffbf\001\002" +
    "\000\024\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b" +
    "\067\u013c\050\u0158\046\u015c\123\001\002\000\142\007\uffbc" +
    "\011\uffbc\012\uffbc\016\uffbc\032\uffbc\044\uffbc\057\uffbc\062" +
    "\uffbc\071\uffbc\072\uffbc\074\uffbc\112\uffbc\113\uffbc\117\uffbc" +
    "\120\uffbc\126\uffbc\130\uffbc\133\uffbc\134\uffbc\135\uffbc\140" +
    "\uffbc\141\uffbc\150\uffbc\164\uffbc\165\uffbc\170\uffbc\214\uffbc" +
    "\224\uffbc\242\uffbc\262\uffbc\266\uffbc\267\uffbc\327\uffbc\333" +
    "\uffbc\u0140\uffbc\u0141\uffbc\u0142\uffbc\u0143\234\u0144\232\u0145\uffbc" +
    "\u0146\uffbc\u014a\uffbc\u014c\uffbc\u014d\uffbc\u014f\uffbc\u0153\uffbc\u0154" +
    "\uffbc\u0159\uffbc\001\002\000\142\007\uffbe\011\uffbe\012\uffbe" +
    "\016\uffbe\032\uffbe\044\uffbe\057\uffbe\062\uffbe\071\uffbe\072" +
    "\uffbe\074\uffbe\112\uffbe\113\uffbe\117\uffbe\120\uffbe\126\uffbe" +
    "\130\uffbe\133\uffbe\134\uffbe\135\uffbe\140\uffbe\141\uffbe\150" +
    "\uffbe\164\uffbe\165\uffbe\170\uffbe\214\uffbe\224\uffbe\242\uffbe" +
    "\262\uffbe\266\uffbe\267\uffbe\327\uffbe\333\uffbe\u0140\uffbe\u0141" +
    "\uffbe\u0142\uffbe\u0143\uffbe\u0144\uffbe\u0145\uffbe\u0146\uffbe\u014a\uffbe" +
    "\u014c\uffbe\u014d\uffbe\u014f\uffbe\u0153\uffbe\u0154\uffbe\u0159\uffbe\001" +
    "\002\000\142\007\uffbc\011\uffbc\012\uffbc\016\uffbc\032\uffbc" +
    "\044\uffbc\057\uffbc\062\uffbc\071\uffbc\072\uffbc\074\uffbc\112" +
    "\uffbc\113\uffbc\117\uffbc\120\uffbc\126\uffbc\130\uffbc\133\uffbc" +
    "\134\uffbc\135\uffbc\140\uffbc\141\uffbc\150\uffbc\164\uffbc\165" +
    "\uffbc\170\uffbc\214\uffbc\224\uffbc\242\uffbc\262\uffbc\266\uffbc" +
    "\267\uffbc\327\uffbc\333\uffbc\u0140\uffbc\u0141\uffbc\u0142\uffbc\u0143" +
    "\234\u0144\232\u0145\uffbc\u0146\uffbc\u014a\uffbc\u014c\uffbc\u014d\uffbc" +
    "\u014f\uffbc\u0153\uffbc\u0154\uffbc\u0159\uffbc\001\002\000\142\007" +
    "\uffbd\011\uffbd\012\uffbd\016\uffbd\032\uffbd\044\uffbd\057\uffbd" +
    "\062\uffbd\071\uffbd\072\uffbd\074\uffbd\112\uffbd\113\uffbd\117" +
    "\uffbd\120\uffbd\126\uffbd\130\uffbd\133\uffbd\134\uffbd\135\uffbd" +
    "\140\uffbd\141\uffbd\150\uffbd\164\uffbd\165\uffbd\170\uffbd\214" +
    "\uffbd\224\uffbd\242\uffbd\262\uffbd\266\uffbd\267\uffbd\327\uffbd" +
    "\333\uffbd\u0140\uffbd\u0141\uffbd\u0142\uffbd\u0143\uffbd\u0144\uffbd\u0145" +
    "\uffbd\u0146\uffbd\u014a\uffbd\u014c\uffbd\u014d\uffbd\u014f\uffbd\u0153\uffbd" +
    "\u0154\uffbd\u0159\uffbd\001\002\000\024\323\055\u0100\064\u0105" +
    "\071\u0110\074\u0111\041\u013b\067\u013c\050\u0158\046\u015c\123" +
    "\001\002\000\004\u0159\243\001\002\000\106\007\uff57\011" +
    "\uff57\012\uff57\016\uff57\032\uff57\044\uff57\062\uff57\074\uff57" +
    "\112\uff57\113\uff57\117\uff57\120\uff57\126\uff57\130\uff57\133" +
    "\uff57\134\uff57\135\uff57\140\uff57\141\uff57\150\uff57\164\uff57" +
    "\165\uff57\214\uff57\267\uff57\327\uff57\u0140\uff57\u0146\uff57\u014a" +
    "\uff57\u014c\uff57\u014d\uff57\u014f\uff57\u0153\uff57\u0154\uff57\u0159\uff57" +
    "\001\002\000\006\327\ufea5\u0153\ufea5\001\002\000\112\024" +
    "\uffc7\037\uffc7\042\uffc7\050\uffc7\110\uffc7\140\uffc7\150\330" +
    "\152\uffc7\214\uffc7\230\uffc7\231\uffc7\236\uffc7\323\uffc7\341" +
    "\uffc7\345\uffc7\360\uffc7\376\uffc7\u0100\uffc7\u0105\uffc7\u010d\uffc7" +
    "\u010e\327\u0110\uffc7\u0111\uffc7\u0112\uffc7\u0116\uffc7\u0118\uffc7\u0119" +
    "\uffc7\u0120\uffc7\u0122\uffc7\u0123\uffc7\u0137\uffc7\u013b\uffc7\u013c\uffc7" +
    "\u0140\uffc7\u0158\331\u015c\uffc7\001\002\000\006\327\ufea7\u0153" +
    "\ufea7\001\002\000\006\327\ufea9\u0153\ufea9\001\002\000\004" +
    "\u0140\306\001\002\000\006\327\ufea3\u0153\ufea3\001\002\000" +
    "\006\327\ufeab\u0153\ufeab\001\002\000\006\327\ufeae\u0153\ufeae" +
    "\001\002\000\112\024\uffc7\037\uffc7\042\uffc7\050\uffc7\110" +
    "\uffc7\140\uffc7\150\330\152\uffc7\214\uffc7\230\uffc7\231\uffc7" +
    "\236\uffc7\323\uffc7\341\uffc7\345\uffc7\360\uffc7\376\uffc7\u0100" +
    "\uffc7\u0105\uffc7\u010d\uffc7\u010e\327\u0110\uffc7\u0111\uffc7\u0112\uffc7" +
    "\u0116\uffc7\u0118\uffc7\u0119\uffc7\u0120\uffc7\u0122\uffc7\u0123\uffc7\u0137" +
    "\uffc7\u013b\uffc7\u013c\uffc7\u0140\uffc7\u0158\331\u015c\uffc7\001\002" +
    "\000\006\327\ufeb0\u0153\ufeb0\001\002\000\100\024\027\042" +
    "\033\050\063\140\044\150\036\214\072\231\076\323\055" +
    "\341\021\345\025\360\020\376\022\u0100\064\u0105\071\u010d" +
    "\030\u0110\074\u0111\041\u0112\040\u0116\075\u0118\037\u0119\026" +
    "\u0120\057\u0123\073\u0137\043\u013b\067\u013c\050\u013e\047\u0140" +
    "\062\u0143\070\u0158\046\u015c\034\001\002\000\004\022\u0197" +
    "\001\002\000\014\160\302\161\305\u0140\306\u0158\304\u015c" +
    "\310\001\002\000\004\022\263\001\002\000\006\327\ufeb2" +
    "\u0153\ufeb2\001\002\000\100\024\027\042\033\050\063\140" +
    "\044\150\036\214\072\231\076\323\055\341\021\345\025" +
    "\360\020\376\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111" +
    "\041\u0112\040\u0116\075\u0118\037\u0119\026\u0120\057\u0123\073" +
    "\u0137\043\u013b\067\u013c\050\u013e\047\u0140\062\u0143\070\u0158" +
    "\046\u015c\034\001\002\000\076\007\ufed1\012\272\016\ufed1" +
    "\032\266\044\ufed1\062\270\074\ufed1\113\ufed1\117\ufed1\120" +
    "\ufed1\126\ufed1\130\ufed1\134\ufed1\135\ufed1\140\ufed1\141\ufed1" +
    "\150\ufed1\164\ufed1\165\ufed1\214\ufed1\267\ufed1\327\ufed1\u0146" +
    "\ufed1\u014a\ufed1\u014c\ufed1\u014d\ufed1\u014f\ufed1\u0153\ufed1\u0154\271" +
    "\u0159\ufed1\001\002\000\006\327\ufea4\u0153\ufea4\001\002\000" +
    "\004\u0140\277\001\002\000\070\007\ufed5\016\ufed5\044\ufed5" +
    "\074\ufed5\113\ufed5\117\ufed5\120\ufed5\126\ufed5\130\ufed5\134" +
    "\ufed5\135\ufed5\140\ufed5\141\ufed5\150\ufed5\164\ufed5\165\ufed5" +
    "\214\ufed5\267\ufed5\327\ufed5\u0146\ufed5\u014a\ufed5\u014c\ufed5\u014d" +
    "\ufed5\u014f\ufed5\u0153\ufed5\u0154\ufed5\u0159\ufed5\001\002\000\070" +
    "\007\ufed2\016\ufed2\044\ufed2\074\ufed2\113\ufed2\117\ufed2\120" +
    "\ufed2\126\ufed2\130\ufed2\134\ufed2\135\ufed2\140\ufed2\141\ufed2" +
    "\150\ufed2\164\ufed2\165\ufed2\214\ufed2\267\ufed2\327\ufed2\u0146" +
    "\ufed2\u014a\ufed2\u014c\ufed2\u014d\ufed2\u014f\ufed2\u0153\ufed2\u0154\ufed2" +
    "\u0159\ufed2\001\002\000\004\165\275\001\002\000\070\007" +
    "\ufed3\016\ufed3\044\ufed3\074\ufed3\113\ufed3\117\ufed3\120\ufed3" +
    "\126\ufed3\130\ufed3\134\ufed3\135\ufed3\140\ufed3\141\ufed3\150" +
    "\ufed3\164\ufed3\165\ufed3\214\ufed3\267\ufed3\327\ufed3\u0146\ufed3" +
    "\u014a\ufed3\u014c\ufed3\u014d\ufed3\u014f\ufed3\u0153\ufed3\u0154\ufed3\u0159" +
    "\ufed3\001\002\000\070\007\ufed8\016\ufed8\044\ufed8\074\ufed8" +
    "\113\ufed8\117\ufed8\120\ufed8\126\ufed8\130\ufed8\134\ufed8\135" +
    "\ufed8\140\ufed8\141\ufed8\150\ufed8\164\ufed8\165\ufed8\214\ufed8" +
    "\267\ufed8\327\ufed8\u0146\ufed8\u014a\ufed8\u014c\ufed8\u014d\ufed8\u014f" +
    "\ufed8\u0153\ufed8\u0154\ufed8\u0159\ufed8\001\002\000\070\007\ufed9" +
    "\016\ufed9\044\ufed9\074\ufed9\113\ufed9\117\ufed9\120\ufed9\126" +
    "\ufed9\130\ufed9\134\ufed9\135\ufed9\140\ufed9\141\ufed9\150\ufed9" +
    "\164\ufed9\165\ufed9\214\ufed9\267\ufed9\327\ufed9\u0146\ufed9\u014a" +
    "\ufed9\u014c\ufed9\u014d\ufed9\u014f\ufed9\u0153\ufed9\u0154\ufed9\u0159\ufed9" +
    "\001\002\000\070\007\ufed7\016\ufed7\044\ufed7\074\ufed7\113" +
    "\ufed7\117\ufed7\120\ufed7\126\ufed7\130\ufed7\134\ufed7\135\ufed7" +
    "\140\ufed7\141\ufed7\150\ufed7\164\ufed7\165\ufed7\214\ufed7\267" +
    "\ufed7\327\ufed7\u0146\ufed7\u014a\ufed7\u014c\ufed7\u014d\ufed7\u014f\ufed7" +
    "\u0153\ufed7\u0154\ufed7\u0159\ufed7\001\002\000\070\007\ufed6\016" +
    "\ufed6\044\ufed6\074\ufed6\113\ufed6\117\ufed6\120\ufed6\126\ufed6" +
    "\130\ufed6\134\ufed6\135\ufed6\140\ufed6\141\ufed6\150\ufed6\164" +
    "\ufed6\165\ufed6\214\ufed6\267\ufed6\327\ufed6\u0146\ufed6\u014a\ufed6" +
    "\u014c\ufed6\u014d\ufed6\u014f\ufed6\u0153\ufed6\u0154\ufed6\u0159\ufed6\001" +
    "\002\000\074\007\ufed1\012\272\016\ufed1\044\ufed1\062\270" +
    "\074\ufed1\113\ufed1\117\ufed1\120\ufed1\126\ufed1\130\ufed1\134" +
    "\ufed1\135\ufed1\140\ufed1\141\ufed1\150\ufed1\164\ufed1\165\ufed1" +
    "\214\ufed1\267\ufed1\327\ufed1\u0146\ufed1\u014a\ufed1\u014c\ufed1\u014d" +
    "\ufed1\u014f\ufed1\u0153\ufed1\u0154\ufed1\u0159\ufed1\001\002\000\070" +
    "\007\ufed4\016\ufed4\044\ufed4\074\ufed4\113\ufed4\117\ufed4\120" +
    "\ufed4\126\ufed4\130\ufed4\134\ufed4\135\ufed4\140\ufed4\141\ufed4" +
    "\150\ufed4\164\ufed4\165\ufed4\214\ufed4\267\ufed4\327\ufed4\u0146" +
    "\ufed4\u014a\ufed4\u014c\ufed4\u014d\ufed4\u014f\ufed4\u0153\ufed4\u0154\ufed4" +
    "\u0159\ufed4\001\002\000\042\011\u016d\044\ufedc\113\ufedc\117" +
    "\ufedc\120\ufedc\130\ufedc\135\ufedc\140\ufedc\156\ufedc\165\ufedc" +
    "\214\ufedc\267\ufedc\327\ufedc\u0140\u016e\u0153\ufedc\u0154\ufedc\001" +
    "\002\000\004\u0158\u0191\001\002\000\044\011\u016d\044\ufedc" +
    "\113\ufedc\117\ufedc\120\ufedc\130\ufedc\135\ufedc\140\ufedc\156" +
    "\ufedc\165\ufedc\214\ufedc\240\ufedc\267\ufedc\327\ufedc\u0140\u016e" +
    "\u0153\ufedc\u0154\ufedc\001\002\000\004\135\u0184\001\002\000" +
    "\004\u0158\u017f\001\002\000\116\007\ufff9\011\ufff9\016\ufff9" +
    "\044\ufff9\057\ufff9\074\ufff9\112\ufff9\113\ufff9\117\ufff9\120" +
    "\ufff9\126\ufff9\130\ufff9\134\ufff9\135\ufff9\140\ufff9\141\ufff9" +
    "\150\ufff9\156\ufff9\164\ufff9\165\ufff9\214\ufff9\224\ufff9\240" +
    "\ufff9\262\ufff9\267\ufff9\327\ufff9\u0138\ufff9\u0140\ufff9\u0146\ufff9" +
    "\u014a\ufff9\u014c\ufff9\u014d\ufff9\u014f\ufff9\u0153\ufff9\u0154\ufff9\u0155" +
    "\u0177\u0158\ufff9\u0159\ufff9\001\002\000\020\117\257\120\254" +
    "\165\261\267\245\327\016\u0153\017\u0154\u0173\001\002\000" +
    "\004\u0140\u016c\001\002\000\034\044\313\113\314\117\ufee7" +
    "\120\ufee7\130\320\135\ufef2\140\312\165\ufee7\214\315\267" +
    "\ufee7\327\ufee7\u0153\ufee7\u0154\ufee7\001\002\000\006\135\ufeec" +
    "\166\u0165\001\002\000\004\u0154\u0168\001\002\000\006\135" +
    "\ufeec\166\u0165\001\002\000\006\135\ufeec\166\u0165\001\002" +
    "\000\004\135\ufef3\001\002\000\004\135\u0164\001\002\000" +
    "\004\135\ufef4\001\002\000\020\117\ufeeb\120\ufeeb\165\ufeeb" +
    "\267\ufeeb\327\ufeeb\u0153\ufeeb\u0154\ufeeb\001\002\000\012\160" +
    "\302\161\305\u0140\306\u015c\310\001\002\000\020\117\ufee9" +
    "\120\ufee9\165\ufee9\267\ufee9\327\ufee9\u0153\ufee9\u0154\ufee9\001" +
    "\002\000\004\156\325\001\002\000\112\024\uffc7\037\uffc7" +
    "\042\uffc7\050\uffc7\110\uffc7\140\uffc7\150\330\152\uffc7\214" +
    "\uffc7\230\uffc7\231\uffc7\236\uffc7\323\uffc7\341\uffc7\345\uffc7" +
    "\360\uffc7\376\uffc7\u0100\uffc7\u0105\uffc7\u010d\uffc7\u010e\327\u0110" +
    "\uffc7\u0111\uffc7\u0112\uffc7\u0116\uffc7\u0118\uffc7\u0119\uffc7\u0120\uffc7" +
    "\u0122\uffc7\u0123\uffc7\u0137\uffc7\u013b\uffc7\u013c\uffc7\u0140\uffc7\u0158" +
    "\331\u015c\uffc7\001\002\000\106\024\027\037\373\042\033" +
    "\050\063\110\357\140\044\152\375\214\072\230\366\231" +
    "\076\236\365\323\055\341\021\345\025\360\020\376\022" +
    "\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040\u0116" +
    "\075\u0118\037\u0119\026\u0120\057\u0122\364\u0123\073\u0137\043" +
    "\u013b\067\u013c\050\u0140\306\u0158\046\u015c\123\001\002\000" +
    "\004\u0158\u0150\001\002\000\106\024\uffc8\037\uffc8\042\uffc8" +
    "\050\uffc8\110\uffc8\140\uffc8\152\uffc8\214\uffc8\230\uffc8\231" +
    "\uffc8\236\uffc8\323\uffc8\341\uffc8\345\uffc8\360\uffc8\376\uffc8" +
    "\u0100\uffc8\u0105\uffc8\u010d\uffc8\u0110\uffc8\u0111\uffc8\u0112\uffc8\u0116" +
    "\uffc8\u0118\uffc8\u0119\uffc8\u0120\uffc8\u0122\uffc8\u0123\uffc8\u0137\uffc8" +
    "\u013b\uffc8\u013c\uffc8\u0140\uffc8\u0158\uffc8\u015c\uffc8\001\002\000" +
    "\110\024\uffc7\037\uffc7\042\uffc7\050\uffc7\110\uffc7\140\uffc7" +
    "\150\330\152\uffc7\214\uffc7\230\uffc7\231\uffc7\236\uffc7\323" +
    "\uffc7\341\uffc7\345\uffc7\360\uffc7\376\uffc7\u0100\uffc7\u0105\uffc7" +
    "\u010d\uffc7\u0110\uffc7\u0111\uffc7\u0112\uffc7\u0116\uffc7\u0118\uffc7\u0119" +
    "\uffc7\u0120\uffc7\u0122\uffc7\u0123\uffc7\u0137\uffc7\u013b\uffc7\u013c\uffc7" +
    "\u0140\uffc7\u0158\331\u015c\uffc7\001\002\000\040\007\ufff2\044" +
    "\ufff2\113\ufff2\117\ufff2\120\ufff2\130\ufff2\135\ufff2\140\ufff2" +
    "\165\ufff2\214\ufff2\267\ufff2\327\ufff2\u0153\ufff2\u0154\ufff2\u0159" +
    "\ufff2\001\002\000\040\007\345\044\ufff0\113\ufff0\117\ufff0" +
    "\120\ufff0\130\ufff0\135\ufff0\140\ufff0\165\ufff0\214\ufff0\267" +
    "\ufff0\327\ufff0\u0153\ufff0\u0154\ufff0\u0159\ufff0\001\002\000\034" +
    "\044\335\113\314\117\ufee2\120\ufee2\130\320\135\ufef2\140" +
    "\312\165\ufee2\214\315\267\ufee2\327\ufee2\u0153\ufee2\u0154\ufee2" +
    "\001\002\000\004\u0154\342\001\002\000\020\117\ufee4\120" +
    "\ufee4\165\ufee4\267\ufee4\327\ufee4\u0153\ufee4\u0154\ufee4\001\002" +
    "\000\020\117\ufee3\120\ufee3\165\ufee3\267\ufee3\327\ufee3\u0153" +
    "\ufee3\u0154\ufee3\001\002\000\012\160\302\161\305\u0140\306" +
    "\u015c\310\001\002\000\020\117\ufee6\120\ufee6\165\ufee6\267" +
    "\ufee6\327\ufee6\u0153\ufee6\u0154\ufee6\001\002\000\004\135\343" +
    "\001\002\000\034\044\335\113\314\117\ufee2\120\ufee2\130" +
    "\320\135\ufef2\140\312\165\ufee2\214\315\267\ufee2\327\ufee2" +
    "\u0153\ufee2\u0154\ufee2\001\002\000\020\117\ufee5\120\ufee5\165" +
    "\ufee5\267\ufee5\327\ufee5\u0153\ufee5\u0154\ufee5\001\002\000\112" +
    "\024\uffc7\037\uffc7\042\uffc7\050\uffc7\110\uffc7\140\uffc7\150" +
    "\330\152\uffc7\214\uffc7\230\uffc7\231\uffc7\236\uffc7\323\uffc7" +
    "\341\uffc7\345\uffc7\360\uffc7\376\uffc7\u0100\uffc7\u0105\uffc7\u010d" +
    "\uffc7\u010e\327\u0110\uffc7\u0111\uffc7\u0112\uffc7\u0116\uffc7\u0118\uffc7" +
    "\u0119\uffc7\u0120\uffc7\u0122\uffc7\u0123\uffc7\u0137\uffc7\u013b\uffc7\u013c" +
    "\uffc7\u0140\uffc7\u0158\331\u015c\uffc7\001\002\000\036\044\ufff4" +
    "\113\ufff4\117\ufff4\120\ufff4\130\ufff4\135\ufff4\140\ufff4\165" +
    "\ufff4\214\ufff4\267\ufff4\327\ufff4\u0153\ufff4\u0154\ufff4\u0159\ufff4" +
    "\001\002\000\036\044\ufff1\113\ufff1\117\ufff1\120\ufff1\130" +
    "\ufff1\135\ufff1\140\ufff1\165\ufff1\214\ufff1\267\ufff1\327\ufff1" +
    "\u0153\ufff1\u0154\ufff1\u0159\ufff1\001\002\000\004\u0159\351\001" +
    "\002\000\042\007\uffcd\044\uffcd\113\uffcd\117\uffcd\120\uffcd" +
    "\130\uffcd\135\uffcd\140\uffcd\164\353\165\uffcd\214\uffcd\267" +
    "\uffcd\327\uffcd\u0153\uffcd\u0154\uffcd\u0159\uffcd\001\002\000\040" +
    "\007\uffcf\044\uffcf\113\uffcf\117\uffcf\120\uffcf\130\uffcf\135" +
    "\uffcf\140\uffcf\165\uffcf\214\uffcf\267\uffcf\327\uffcf\u0153\uffcf" +
    "\u0154\uffcf\u0159\uffcf\001\002\000\110\024\027\037\373\042" +
    "\033\050\063\110\357\140\044\150\360\152\375\214\072" +
    "\230\366\231\076\236\365\323\055\341\021\345\025\360" +
    "\020\376\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041" +
    "\u0112\040\u0116\075\u0118\037\u0119\026\u0120\057\u0122\364\u0123" +
    "\073\u0137\043\u013b\067\u013c\050\u0140\306\u0158\370\u015c\123" +
    "\001\002\000\040\007\uffcb\044\uffcb\113\uffcb\117\uffcb\120" +
    "\uffcb\130\uffcb\135\uffcb\140\uffcb\165\uffcb\214\uffcb\267\uffcb" +
    "\327\uffcb\u0153\uffcb\u0154\uffcb\u0159\uffcb\001\002\000\040\007" +
    "\uffce\044\uffce\113\uffce\117\uffce\120\uffce\130\uffce\135\uffce" +
    "\140\uffce\165\uffce\214\uffce\267\uffce\327\uffce\u0153\uffce\u0154" +
    "\uffce\u0159\uffce\001\002\000\070\007\uffe7\016\uffe7\044\uffe7" +
    "\074\uffe7\113\uffe7\117\uffe7\120\uffe7\126\uffe7\130\uffe7\134" +
    "\uffe7\135\uffe7\140\uffe7\141\uffe7\150\uffe7\164\uffe7\165\uffe7" +
    "\214\uffe7\267\uffe7\327\uffe7\u0146\uffe7\u014a\uffe7\u014c\uffe7\u014d" +
    "\uffe7\u014f\uffe7\u0153\uffe7\u0154\uffe7\u0159\uffe7\001\002\000\004" +
    "\u0158\u0148\001\002\000\106\024\027\037\373\042\033\050" +
    "\063\110\357\140\044\152\375\214\072\230\366\231\076" +
    "\236\365\323\055\341\021\345\025\360\020\376\022\u0100" +
    "\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040\u0116\075" +
    "\u0118\037\u0119\026\u0120\057\u0122\364\u0123\073\u0137\043\u013b" +
    "\067\u013c\050\u0140\306\u0158\370\u015c\123\001\002\000\070" +
    "\007\uffea\016\uffea\044\uffea\074\uffea\113\uffea\117\uffea\120" +
    "\uffea\126\uffea\130\uffea\134\uffea\135\uffea\140\uffea\141\uffea" +
    "\150\uffea\164\uffea\165\uffea\214\uffea\267\uffea\327\uffea\u0146" +
    "\uffea\u014a\uffea\u014c\uffea\u014d\uffea\u014f\uffea\u0153\uffea\u0154\uffea" +
    "\u0159\uffea\001\002\000\070\007\uffec\016\uffec\044\uffec\074" +
    "\uffec\113\uffec\117\uffec\120\uffec\126\uffec\130\uffec\134\uffec" +
    "\135\uffec\140\uffec\141\uffec\150\uffec\164\uffec\165\uffec\214" +
    "\uffec\267\uffec\327\uffec\u0146\uffec\u014a\uffec\u014c\uffec\u014d\uffec" +
    "\u014f\uffec\u0153\uffec\u0154\uffec\u0159\uffec\001\002\000\026\016" +
    "\u0128\126\u0126\134\u012b\141\u012a\150\u0129\u0146\171\u014a\173" +
    "\u014c\174\u014d\167\u014f\176\001\002\000\004\u012a\u0114\001" +
    "\002\000\070\007\uff4d\016\uff4d\044\uff4d\074\uff4d\113\uff4d" +
    "\117\uff4d\120\uff4d\126\uff4d\130\uff4d\134\uff4d\135\uff4d\140" +
    "\uff4d\141\uff4d\150\uff4d\164\uff4d\165\uff4d\214\uff4d\267\uff4d" +
    "\327\uff4d\u0146\uff4d\u014a\uff4d\u014c\uff4d\u014d\uff4d\u014f\uff4d\u0153" +
    "\uff4d\u0154\uff4d\u0159\uff4d\001\002\000\070\007\uff4c\016\uff4c" +
    "\044\uff4c\074\uff4c\113\uff4c\117\uff4c\120\uff4c\126\uff4c\130" +
    "\uff4c\134\uff4c\135\uff4c\140\uff4c\141\uff4c\150\uff4c\164\uff4c" +
    "\165\uff4c\214\uff4c\267\uff4c\327\uff4c\u0146\uff4c\u014a\uff4c\u014c" +
    "\uff4c\u014d\uff4c\u014f\uff4c\u0153\uff4c\u0154\uff4c\u0159\uff4c\001\002" +
    "\000\070\007\uffeb\016\uffeb\044\uffeb\074\uffeb\113\uffeb\117" +
    "\uffeb\120\uffeb\126\uffeb\130\uffeb\134\uffeb\135\uffeb\140\uffeb" +
    "\141\uffeb\150\uffeb\164\uffeb\165\uffeb\214\uffeb\267\uffeb\327" +
    "\uffeb\u0146\uffeb\u014a\uffeb\u014c\uffeb\u014d\uffeb\u014f\uffeb\u0153\uffeb" +
    "\u0154\uffeb\u0159\uffeb\001\002\000\110\024\uffc7\037\uffc7\042" +
    "\uffc7\050\uffc7\110\uffc7\140\uffc7\150\330\152\uffc7\214\uffc7" +
    "\230\uffc7\231\uffc7\236\uffc7\323\055\341\uffc7\345\uffc7\360" +
    "\uffc7\376\uffc7\u0100\064\u0105\071\u010d\uffc7\u0110\074\u0111\041" +
    "\u0112\uffc7\u0116\uffc7\u0118\uffc7\u0119\uffc7\u0120\uffc7\u0122\uffc7\u0123" +
    "\uffc7\u0137\uffc7\u013b\067\u013c\050\u0140\uffc7\u0158\u010f\u015c\123" +
    "\001\002\000\100\007\uffe9\016\uffe9\044\uffe9\074\uffe9\113" +
    "\uffe9\117\uffe9\120\uffe9\126\uffe9\130\uffe9\134\uffe9\135\uffe9" +
    "\140\uffe9\141\uffe9\150\uffe9\164\uffe9\165\uffe9\214\uffe9\267" +
    "\uffe9\327\uffe9\u0141\uffb7\u0142\uffb7\u0143\uffb7\u0144\uffb7\u0146\uffe9" +
    "\u014a\uffe9\u014c\uffe9\u014d\uffe9\u014f\uffe9\u0153\uffe9\u0154\uffe9\u0159" +
    "\uffe9\001\002\000\042\007\uffcd\044\uffcd\113\uffcd\117\uffcd" +
    "\120\uffcd\130\uffcd\135\uffcd\140\uffcd\164\353\165\uffcd\214" +
    "\uffcd\267\uffcd\327\uffcd\u0153\uffcd\u0154\uffcd\u0159\uffcd\001\002" +
    "\000\004\u0158\u0105\001\002\000\070\007\uffe5\016\uffe5\044" +
    "\uffe5\074\uffe5\113\uffe5\117\uffe5\120\uffe5\126\uffe5\130\uffe5" +
    "\134\uffe5\135\uffe5\140\uffe5\141\uffe5\150\uffe5\164\uffe5\165" +
    "\uffe5\214\uffe5\267\uffe5\327\uffe5\u0146\uffe5\u014a\uffe5\u014c\uffe5" +
    "\u014d\uffe5\u014f\uffe5\u0153\uffe5\u0154\uffe5\u0159\uffe5\001\002\000" +
    "\004\u0158\u0100\001\002\000\070\007\uffe8\016\uffe8\044\uffe8" +
    "\074\uffe8\113\uffe8\117\uffe8\120\uffe8\126\uffe8\130\uffe8\134" +
    "\uffe8\135\uffe8\140\uffe8\141\uffe8\150\uffe8\164\uffe8\165\uffe8" +
    "\214\uffe8\267\uffe8\327\uffe8\u0146\uffe8\u014a\uffe8\u014c\uffe8\u014d" +
    "\uffe8\u014f\uffe8\u0153\uffe8\u0154\uffe8\u0159\uffe8\001\002\000\070" +
    "\007\uffe6\016\uffe6\044\uffe6\074\uffe6\113\uffe6\117\uffe6\120" +
    "\uffe6\126\uffe6\130\uffe6\134\uffe6\135\uffe6\140\uffe6\141\uffe6" +
    "\150\uffe6\164\uffe6\165\uffe6\214\uffe6\267\uffe6\327\uffe6\u0146" +
    "\uffe6\u014a\uffe6\u014c\uffe6\u014d\uffe6\u014f\uffe6\u0153\uffe6\u0154\uffe6" +
    "\u0159\uffe6\001\002\000\032\150\036\323\055\u0100\064\u0105" +
    "\071\u0110\074\u0111\041\u013b\067\u013c\050\u013e\047\u0140\163" +
    "\u0158\046\u015c\123\001\002\000\004\u0154\u0102\001\002\000" +
    "\032\150\036\323\055\u0100\064\u0105\071\u0110\074\u0111\041" +
    "\u013b\067\u013c\050\u013e\047\u0140\163\u0158\046\u015c\123\001" +
    "\002\000\004\u0159\u0104\001\002\000\070\007\uff4b\016\uff4b" +
    "\044\uff4b\074\uff4b\113\uff4b\117\uff4b\120\uff4b\126\uff4b\130" +
    "\uff4b\134\uff4b\135\uff4b\140\uff4b\141\uff4b\150\uff4b\164\uff4b" +
    "\165\uff4b\214\uff4b\267\uff4b\327\uff4b\u0146\uff4b\u014a\uff4b\u014c" +
    "\uff4b\u014d\uff4b\u014f\uff4b\u0153\uff4b\u0154\uff4b\u0159\uff4b\001\002" +
    "\000\006\u0140\306\u0143\u0108\001\002\000\004\u0154\u0109\001" +
    "\002\000\004\u0154\uffd4\001\002\000\004\u0154\uffd5\001\002" +
    "\000\112\024\uffc7\037\uffc7\042\uffc7\050\uffc7\110\uffc7\140" +
    "\uffc7\150\330\152\uffc7\214\uffc7\230\uffc7\231\uffc7\236\uffc7" +
    "\323\uffc7\341\uffc7\345\uffc7\360\uffc7\376\uffc7\u0100\uffc7\u0105" +
    "\uffc7\u010d\uffc7\u010e\327\u0110\uffc7\u0111\uffc7\u0112\uffc7\u0116\uffc7" +
    "\u0118\uffc7\u0119\uffc7\u0120\uffc7\u0122\uffc7\u0123\uffc7\u0137\uffc7\u013b" +
    "\uffc7\u013c\uffc7\u0140\uffc7\u0158\331\u015c\uffc7\001\002\000\004" +
    "\u0159\u010c\001\002\000\004\u0159\uffd3\001\002\000\042\007" +
    "\uffee\044\uffee\113\uffee\117\uffee\120\uffee\130\uffee\135\uffee" +
    "\140\uffee\164\uffee\165\uffee\214\uffee\267\uffee\327\uffee\u0153" +
    "\uffee\u0154\uffee\u0159\uffee\001\002\000\040\007\uffca\044\uffca" +
    "\113\uffca\117\uffca\120\uffca\130\uffca\135\uffca\140\uffca\165" +
    "\uffca\214\uffca\267\uffca\327\uffca\u0153\uffca\u0154\uffca\u0159\uffca" +
    "\001\002\000\004\u0159\u0113\001\002\000\110\024\uffc7\037" +
    "\uffc7\042\uffc7\050\uffc7\110\uffc7\140\uffc7\150\330\152\uffc7" +
    "\214\uffc7\230\uffc7\231\uffc7\236\uffc7\323\055\341\uffc7\345" +
    "\uffc7\360\uffc7\376\uffc7\u0100\064\u0105\071\u010d\uffc7\u0110\074" +
    "\u0111\041\u0112\uffc7\u0116\uffc7\u0118\uffc7\u0119\uffc7\u0120\uffc7\u0122" +
    "\uffc7\u0123\uffc7\u0137\uffc7\u013b\067\u013c\050\u0140\uffc7\u0158\u010f" +
    "\u015c\123\001\002\000\004\u0159\u0111\001\002\000\042\007" +
    "\uffcd\044\uffcd\113\uffcd\117\uffcd\120\uffcd\130\uffcd\135\uffcd" +
    "\140\uffcd\164\353\165\uffcd\214\uffcd\267\uffcd\327\uffcd\u0153" +
    "\uffcd\u0154\uffcd\u0159\uffcd\001\002\000\040\007\uffc9\044\uffc9" +
    "\113\uffc9\117\uffc9\120\uffc9\130\uffc9\135\uffc9\140\uffc9\165" +
    "\uffc9\214\uffc9\267\uffc9\327\uffc9\u0153\uffc9\u0154\uffc9\u0159\uffc9" +
    "\001\002\000\142\007\uffbb\011\uffbb\012\uffbb\016\uffbb\032" +
    "\uffbb\044\uffbb\057\uffbb\062\uffbb\071\uffbb\072\uffbb\074\uffbb" +
    "\112\uffbb\113\uffbb\117\uffbb\120\uffbb\126\uffbb\130\uffbb\133" +
    "\uffbb\134\uffbb\135\uffbb\140\uffbb\141\uffbb\150\uffbb\164\uffbb" +
    "\165\uffbb\170\uffbb\214\uffbb\224\uffbb\242\uffbb\262\uffbb\266" +
    "\uffbb\267\uffbb\327\uffbb\333\uffbb\u0140\uffbb\u0141\uffbb\u0142\uffbb" +
    "\u0143\uffbb\u0144\uffbb\u0145\uffbb\u0146\uffbb\u014a\uffbb\u014c\uffbb\u014d" +
    "\uffbb\u014f\uffbb\u0153\uffbb\u0154\uffbb\u0159\uffbb\001\002\000\004" +
    "\106\u0115\001\002\000\004\u0140\u0116\001\002\000\006\167" +
    "\u0118\u0155\u011b\001\002\000\070\007\uff47\016\uff47\044\uff47" +
    "\074\uff47\113\uff47\117\uff47\120\uff47\126\uff47\130\uff47\134" +
    "\uff47\135\uff47\140\uff47\141\uff47\150\uff47\164\uff47\165\uff47" +
    "\214\uff47\267\uff47\327\uff47\u0146\uff47\u014a\uff47\u014c\uff47\u014d" +
    "\uff47\u014f\uff47\u0153\uff47\u0154\uff47\u0159\uff47\001\002\000\004" +
    "\165\u0122\001\002\000\070\007\uff49\016\uff49\044\uff49\074" +
    "\uff49\113\uff49\117\uff49\120\uff49\126\uff49\130\uff49\134\uff49" +
    "\135\uff49\140\uff49\141\uff49\150\uff49\164\uff49\165\uff49\214" +
    "\uff49\267\uff49\327\uff49\u0146\uff49\u014a\uff49\u014c\uff49\u014d\uff49" +
    "\u014f\uff49\u0153\uff49\u0154\uff49\u0159\uff49\001\002\000\070\007" +
    "\uff4e\016\uff4e\044\uff4e\074\uff4e\113\uff4e\117\uff4e\120\uff4e" +
    "\126\uff4e\130\uff4e\134\uff4e\135\uff4e\140\uff4e\141\uff4e\150" +
    "\uff4e\164\uff4e\165\uff4e\214\uff4e\267\uff4e\327\uff4e\u0146\uff4e" +
    "\u014a\uff4e\u014c\uff4e\u014d\uff4e\u014f\uff4e\u0153\uff4e\u0154\uff4e\u0159" +
    "\uff4e\001\002\000\004\u0140\u011c\001\002\000\006\167\u0118" +
    "\u0155\u011f\001\002\000\070\007\uff48\016\uff48\044\uff48\074" +
    "\uff48\113\uff48\117\uff48\120\uff48\126\uff48\130\uff48\134\uff48" +
    "\135\uff48\140\uff48\141\uff48\150\uff48\164\uff48\165\uff48\214" +
    "\uff48\267\uff48\327\uff48\u0146\uff48\u014a\uff48\u014c\uff48\u014d\uff48" +
    "\u014f\uff48\u0153\uff48\u0154\uff48\u0159\uff48\001\002\000\070\007" +
    "\uff4a\016\uff4a\044\uff4a\074\uff4a\113\uff4a\117\uff4a\120\uff4a" +
    "\126\uff4a\130\uff4a\134\uff4a\135\uff4a\140\uff4a\141\uff4a\150" +
    "\uff4a\164\uff4a\165\uff4a\214\uff4a\267\uff4a\327\uff4a\u0146\uff4a" +
    "\u014a\uff4a\u014c\uff4a\u014d\uff4a\u014f\uff4a\u0153\uff4a\u0154\uff4a\u0159" +
    "\uff4a\001\002\000\004\u0140\u0120\001\002\000\004\167\u0118" +
    "\001\002\000\070\007\uff48\016\uff48\044\uff48\074\uff48\113" +
    "\uff48\117\uff48\120\uff48\126\uff48\130\uff48\134\uff48\135\uff48" +
    "\140\uff48\141\uff48\150\uff48\164\uff48\165\uff48\214\uff48\267" +
    "\uff48\327\uff48\u0146\uff48\u014a\uff48\u014c\uff48\u014d\uff48\u014f\uff48" +
    "\u0153\uff48\u0154\uff48\u0159\uff48\001\002\000\004\022\u0123\001" +
    "\002\000\100\024\027\042\033\050\063\140\044\150\036" +
    "\214\072\231\076\323\055\341\021\345\025\360\020\376" +
    "\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040" +
    "\u0116\075\u0118\037\u0119\026\u0120\057\u0123\073\u0137\043\u013b" +
    "\067\u013c\050\u013e\047\u0140\062\u0143\070\u0158\046\u015c\034" +
    "\001\002\000\070\007\uff46\016\uff46\044\uff46\074\uff46\113" +
    "\uff46\117\uff46\120\uff46\126\uff46\130\uff46\134\uff46\135\uff46" +
    "\140\uff46\141\uff46\150\uff46\164\uff46\165\uff46\214\uff46\267" +
    "\uff46\327\uff46\u0146\uff46\u014a\uff46\u014c\uff46\u014d\uff46\u014f\uff46" +
    "\u0153\uff46\u0154\uff46\u0159\uff46\001\002\000\102\024\027\042" +
    "\033\050\063\140\044\152\375\214\072\230\366\231\076" +
    "\236\365\323\055\341\021\345\025\360\020\376\022\u0100" +
    "\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040\u0116\075" +
    "\u0118\037\u0119\026\u0120\057\u0122\364\u0123\073\u0137\043\u013b" +
    "\067\u013c\050\u0140\306\u0158\046\u015c\123\001\002\000\102" +
    "\024\027\042\033\050\063\140\044\152\375\214\072\230" +
    "\366\231\076\236\365\323\055\341\021\345\025\360\020" +
    "\376\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112" +
    "\040\u0116\075\u0118\037\u0119\026\u0120\057\u0122\364\u0123\073" +
    "\u0137\043\u013b\067\u013c\050\u0140\306\u0158\046\u015c\123\001" +
    "\002\000\042\007\uffef\044\uffef\113\uffef\117\uffef\120\uffef" +
    "\130\uffef\135\uffef\140\uffef\164\uffef\165\uffef\214\uffef\267" +
    "\uffef\327\uffef\u0153\uffef\u0154\uffef\u0159\uffef\001\002\000\102" +
    "\024\027\042\033\050\063\140\044\152\375\214\072\230" +
    "\366\231\076\236\365\323\055\341\021\345\025\360\020" +
    "\376\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112" +
    "\040\u0116\075\u0118\037\u0119\026\u0120\057\u0122\364\u0123\073" +
    "\u0137\043\u013b\067\u013c\050\u0140\306\u0158\046\u015c\123\001" +
    "\002\000\010\016\u0135\126\u0134\141\u0133\001\002\000\102" +
    "\024\027\042\033\050\063\140\044\152\375\214\072\230" +
    "\366\231\076\236\365\323\055\341\021\345\025\360\020" +
    "\376\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112" +
    "\040\u0116\075\u0118\037\u0119\026\u0120\057\u0122\364\u0123\073" +
    "\u0137\043\u013b\067\u013c\050\u0140\306\u0158\046\u015c\123\001" +
    "\002\000\006\150\u012c\151\uffda\001\002\000\004\151\uffdb" +
    "\001\002\000\004\151\u012e\001\002\000\042\007\uffe0\044" +
    "\uffe0\113\uffe0\117\uffe0\120\uffe0\130\uffe0\135\uffe0\140\uffe0" +
    "\164\uffe0\165\uffe0\214\uffe0\267\uffe0\327\uffe0\u0153\uffe0\u0154" +
    "\uffe0\u0159\uffe0\001\002\000\044\007\uffd6\044\uffd6\074\u0131" +
    "\113\uffd6\117\uffd6\120\uffd6\130\uffd6\135\uffd6\140\uffd6\164" +
    "\uffd6\165\uffd6\214\uffd6\267\uffd6\327\uffd6\u0153\uffd6\u0154\uffd6" +
    "\u0159\uffd6\001\002\000\042\007\uffe2\044\uffe2\113\uffe2\117" +
    "\uffe2\120\uffe2\130\uffe2\135\uffe2\140\uffe2\164\uffe2\165\uffe2" +
    "\214\uffe2\267\uffe2\327\uffe2\u0153\uffe2\u0154\uffe2\u0159\uffe2\001" +
    "\002\000\004\u013e\u0132\001\002\000\042\007\uffd7\044\uffd7" +
    "\113\uffd7\117\uffd7\120\uffd7\130\uffd7\135\uffd7\140\uffd7\164" +
    "\uffd7\165\uffd7\214\uffd7\267\uffd7\327\uffd7\u0153\uffd7\u0154\uffd7" +
    "\u0159\uffd7\001\002\000\102\024\027\042\033\050\063\140" +
    "\044\152\375\214\072\230\366\231\076\236\365\323\055" +
    "\341\021\345\025\360\020\376\022\u0100\064\u0105\071\u010d" +
    "\030\u0110\074\u0111\041\u0112\040\u0116\075\u0118\037\u0119\026" +
    "\u0120\057\u0122\364\u0123\073\u0137\043\u013b\067\u013c\050\u0140" +
    "\306\u0158\046\u015c\123\001\002\000\102\024\027\042\033" +
    "\050\063\140\044\152\375\214\072\230\366\231\076\236" +
    "\365\323\055\341\021\345\025\360\020\376\022\u0100\064" +
    "\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040\u0116\075\u0118" +
    "\037\u0119\026\u0120\057\u0122\364\u0123\073\u0137\043\u013b\067" +
    "\u013c\050\u0140\306\u0158\046\u015c\123\001\002\000\102\024" +
    "\027\042\033\050\063\140\044\152\375\214\072\230\366" +
    "\231\076\236\365\323\055\341\021\345\025\360\020\376" +
    "\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040" +
    "\u0116\075\u0118\037\u0119\026\u0120\057\u0122\364\u0123\073\u0137" +
    "\043\u013b\067\u013c\050\u0140\306\u0158\046\u015c\123\001\002" +
    "\000\042\007\uffe3\044\uffe3\113\uffe3\117\uffe3\120\uffe3\130" +
    "\uffe3\135\uffe3\140\uffe3\164\uffe3\165\uffe3\214\uffe3\267\uffe3" +
    "\327\uffe3\u0153\uffe3\u0154\uffe3\u0159\uffe3\001\002\000\004\007" +
    "\u0138\001\002\000\102\024\027\042\033\050\063\140\044" +
    "\152\375\214\072\230\366\231\076\236\365\323\055\341" +
    "\021\345\025\360\020\376\022\u0100\064\u0105\071\u010d\030" +
    "\u0110\074\u0111\041\u0112\040\u0116\075\u0118\037\u0119\026\u0120" +
    "\057\u0122\364\u0123\073\u0137\043\u013b\067\u013c\050\u0140\306" +
    "\u0158\046\u015c\123\001\002\000\042\007\uffdd\044\uffdd\113" +
    "\uffdd\117\uffdd\120\uffdd\130\uffdd\135\uffdd\140\uffdd\164\uffdd" +
    "\165\uffdd\214\uffdd\267\uffdd\327\uffdd\u0153\uffdd\u0154\uffdd\u0159" +
    "\uffdd\001\002\000\042\007\uffd8\044\uffd8\113\uffd8\117\uffd8" +
    "\120\uffd8\130\uffd8\135\uffd8\140\uffd8\164\uffd8\165\uffd8\214" +
    "\uffd8\267\uffd8\327\uffd8\u0153\uffd8\u0154\u013b\u0159\uffd8\001\002" +
    "\000\102\024\027\042\033\050\063\140\044\152\375\214" +
    "\072\230\366\231\076\236\365\323\055\341\021\345\025" +
    "\360\020\376\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111" +
    "\041\u0112\040\u0116\075\u0118\037\u0119\026\u0120\057\u0122\364" +
    "\u0123\073\u0137\043\u013b\067\u013c\050\u0140\306\u0158\046\u015c" +
    "\123\001\002\000\042\007\uffdc\044\uffdc\113\uffdc\117\uffdc" +
    "\120\uffdc\130\uffdc\135\uffdc\140\uffdc\164\uffdc\165\uffdc\214" +
    "\uffdc\267\uffdc\327\uffdc\u0153\uffdc\u0154\uffdc\u0159\uffdc\001\002" +
    "\000\042\007\uffd8\044\uffd8\113\uffd8\117\uffd8\120\uffd8\130" +
    "\uffd8\135\uffd8\140\uffd8\164\uffd8\165\uffd8\214\uffd8\267\uffd8" +
    "\327\uffd8\u0153\uffd8\u0154\u013b\u0159\uffd8\001\002\000\042\007" +
    "\uffd9\044\uffd9\113\uffd9\117\uffd9\120\uffd9\130\uffd9\135\uffd9" +
    "\140\uffd9\164\uffd9\165\uffd9\214\uffd9\267\uffd9\327\uffd9\u0153" +
    "\uffd9\u0154\uffd9\u0159\uffd9\001\002\000\044\007\uffd6\044\uffd6" +
    "\074\u0131\113\uffd6\117\uffd6\120\uffd6\130\uffd6\135\uffd6\140" +
    "\uffd6\164\uffd6\165\uffd6\214\uffd6\267\uffd6\327\uffd6\u0153\uffd6" +
    "\u0154\uffd6\u0159\uffd6\001\002\000\042\007\uffde\044\uffde\113" +
    "\uffde\117\uffde\120\uffde\130\uffde\135\uffde\140\uffde\164\uffde" +
    "\165\uffde\214\uffde\267\uffde\327\uffde\u0153\uffde\u0154\uffde\u0159" +
    "\uffde\001\002\000\004\007\u0142\001\002\000\102\024\027" +
    "\042\033\050\063\140\044\152\375\214\072\230\366\231" +
    "\076\236\365\323\055\341\021\345\025\360\020\376\022" +
    "\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040\u0116" +
    "\075\u0118\037\u0119\026\u0120\057\u0122\364\u0123\073\u0137\043" +
    "\u013b\067\u013c\050\u0140\306\u0158\046\u015c\123\001\002\000" +
    "\042\007\uffe1\044\uffe1\113\uffe1\117\uffe1\120\uffe1\130\uffe1" +
    "\135\uffe1\140\uffe1\164\uffe1\165\uffe1\214\uffe1\267\uffe1\327" +
    "\uffe1\u0153\uffe1\u0154\uffe1\u0159\uffe1\001\002\000\042\007\uffd8" +
    "\044\uffd8\113\uffd8\117\uffd8\120\uffd8\130\uffd8\135\uffd8\140" +
    "\uffd8\164\uffd8\165\uffd8\214\uffd8\267\uffd8\327\uffd8\u0153\uffd8" +
    "\u0154\u013b\u0159\uffd8\001\002\000\042\007\uffdf\044\uffdf\113" +
    "\uffdf\117\uffdf\120\uffdf\130\uffdf\135\uffdf\140\uffdf\164\uffdf" +
    "\165\uffdf\214\uffdf\267\uffdf\327\uffdf\u0153\uffdf\u0154\uffdf\u0159" +
    "\uffdf\001\002\000\042\007\uffe4\044\uffe4\113\uffe4\117\uffe4" +
    "\120\uffe4\130\uffe4\135\uffe4\140\uffe4\164\uffe4\165\uffe4\214" +
    "\uffe4\267\uffe4\327\uffe4\u0153\uffe4\u0154\uffe4\u0159\uffe4\001\002" +
    "\000\040\007\uffcc\044\uffcc\113\uffcc\117\uffcc\120\uffcc\130" +
    "\uffcc\135\uffcc\140\uffcc\165\uffcc\214\uffcc\267\uffcc\327\uffcc" +
    "\u0153\uffcc\u0154\uffcc\u0159\uffcc\001\002\000\006\u0140\306\u0143" +
    "\u0108\001\002\000\004\u0154\u014a\001\002\000\006\u013e\u014b" +
    "\u015c\u014c\001\002\000\004\u0159\uffd2\001\002\000\004\u0140" +
    "\u014f\001\002\000\004\u0159\u014e\001\002\000\042\007\uffed" +
    "\044\uffed\113\uffed\117\uffed\120\uffed\130\uffed\135\uffed\140" +
    "\uffed\164\uffed\165\uffed\214\uffed\267\uffed\327\uffed\u0153\uffed" +
    "\u0154\uffed\u0159\uffed\001\002\000\004\u0159\uffd1\001\002\000" +
    "\004\u0140\u0151\001\002\000\006\u0142\u0154\u014d\u0155\001\002" +
    "\000\004\u0159\u0153\001\002\000\040\007\ufff3\044\ufff3\113" +
    "\ufff3\117\ufff3\120\ufff3\130\ufff3\135\ufff3\140\ufff3\165\ufff3" +
    "\214\ufff3\267\ufff3\327\ufff3\u0153\ufff3\u0154\ufff3\u0159\ufff3\001" +
    "\002\000\004\u0158\u015d\001\002\000\004\u0142\u0158\001\002" +
    "\000\004\u0140\u0157\001\002\000\004\u0159\uffc6\001\002\000" +
    "\004\u0158\u0159\001\002\000\004\u0140\u015a\001\002\000\004" +
    "\u0159\u015b\001\002\000\004\u0142\u015c\001\002\000\004\u0140" +
    "\uffc5\001\002\000\004\u0140\u015e\001\002\000\004\u0159\u015f" +
    "\001\002\000\004\u0142\u0160\001\002\000\004\u014c\u0161\001" +
    "\002\000\004\u0140\uffc4\001\002\000\042\007\uffcd\044\uffcd" +
    "\113\uffcd\117\uffcd\120\uffcd\130\uffcd\135\uffcd\140\uffcd\164" +
    "\353\165\uffcd\214\uffcd\267\uffcd\327\uffcd\u0153\uffcd\u0154\uffcd" +
    "\u0159\uffcd\001\002\000\040\007\uffd0\044\uffd0\113\uffd0\117" +
    "\uffd0\120\uffd0\130\uffd0\135\uffd0\140\uffd0\165\uffd0\214\uffd0" +
    "\267\uffd0\327\uffd0\u0153\uffd0\u0154\uffd0\u0159\uffd0\001\002\000" +
    "\012\160\ufef5\161\ufef5\u0140\ufef5\u015c\ufef5\001\002\000\004" +
    "\135\ufeed\001\002\000\004\135\ufef0\001\002\000\004\135" +
    "\ufeef\001\002\000\004\135\u0169\001\002\000\034\044\335" +
    "\113\314\117\ufee2\120\ufee2\130\320\135\ufef2\140\312\165" +
    "\ufee2\214\315\267\ufee2\327\ufee2\u0153\ufee2\u0154\ufee2\001\002" +
    "\000\020\117\ufee8\120\ufee8\165\ufee8\267\ufee8\327\ufee8\u0153" +
    "\ufee8\u0154\ufee8\001\002\000\004\135\ufef1\001\002\000\042" +
    "\011\u016d\044\ufedc\113\ufedc\117\ufedc\120\ufedc\130\ufedc\135" +
    "\ufedc\140\ufedc\156\ufedc\165\ufedc\214\ufedc\267\ufedc\327\ufedc" +
    "\u0140\u016e\u0153\ufedc\u0154\ufedc\001\002\000\004\u0140\u0170\001" +
    "\002\000\040\044\ufedd\113\ufedd\117\ufedd\120\ufedd\130\ufedd" +
    "\135\ufedd\140\ufedd\156\ufedd\165\ufedd\214\ufedd\240\ufedd\267" +
    "\ufedd\327\ufedd\u0153\ufedd\u0154\ufedd\001\002\000\036\044\ufedf" +
    "\113\ufedf\117\ufedf\120\ufedf\130\ufedf\135\ufedf\140\ufedf\156" +
    "\ufedf\165\ufedf\214\ufedf\267\ufedf\327\ufedf\u0153\ufedf\u0154\ufedf" +
    "\001\002\000\040\044\ufede\113\ufede\117\ufede\120\ufede\130" +
    "\ufede\135\ufede\140\ufede\156\ufede\165\ufede\214\ufede\240\ufede" +
    "\267\ufede\327\ufede\u0153\ufede\u0154\ufede\001\002\000\006\327" +
    "\ufeac\u0153\ufeac\001\002\000\006\327\ufea1\u0153\ufea1\001\002" +
    "\000\014\160\302\161\305\u0140\306\u0158\304\u015c\310\001" +
    "\002\000\020\117\257\120\254\165\261\267\245\327\016" +
    "\u0153\017\u0154\u0173\001\002\000\006\327\ufea2\u0153\ufea2\001" +
    "\002\000\114\007\ufffb\011\ufffb\016\ufffb\044\ufffb\057\ufffb" +
    "\074\ufffb\112\ufffb\113\ufffb\117\ufffb\120\ufffb\126\ufffb\130" +
    "\ufffb\134\ufffb\135\ufffb\140\ufffb\141\ufffb\150\ufffb\156\ufffb" +
    "\164\ufffb\165\ufffb\214\ufffb\224\ufffb\240\ufffb\262\ufffb\267" +
    "\ufffb\327\ufffb\u0138\ufffb\u0140\ufffb\u0146\ufffb\u014a\ufffb\u014c\ufffb" +
    "\u014d\ufffb\u014f\ufffb\u0153\ufffb\u0154\ufffb\u0158\ufffb\u0159\ufffb\001" +
    "\002\000\004\u0140\u0178\001\002\000\116\007\ufff7\011\ufff7" +
    "\016\ufff7\044\ufff7\057\ufff7\074\ufff7\112\ufff7\113\ufff7\117" +
    "\ufff7\120\ufff7\126\ufff7\130\ufff7\134\ufff7\135\ufff7\140\ufff7" +
    "\141\ufff7\150\ufff7\156\ufff7\164\ufff7\165\ufff7\214\ufff7\224" +
    "\ufff7\240\ufff7\262\ufff7\267\ufff7\327\ufff7\u0138\ufff7\u0140\ufff7" +
    "\u0146\ufff7\u014a\ufff7\u014c\ufff7\u014d\ufff7\u014f\ufff7\u0153\ufff7\u0154" +
    "\ufff7\u0155\u017a\u0158\ufff7\u0159\ufff7\001\002\000\114\007\ufffa" +
    "\011\ufffa\016\ufffa\044\ufffa\057\ufffa\074\ufffa\112\ufffa\113" +
    "\ufffa\117\ufffa\120\ufffa\126\ufffa\130\ufffa\134\ufffa\135\ufffa" +
    "\140\ufffa\141\ufffa\150\ufffa\156\ufffa\164\ufffa\165\ufffa\214" +
    "\ufffa\224\ufffa\240\ufffa\262\ufffa\267\ufffa\327\ufffa\u0138\ufffa" +
    "\u0140\ufffa\u0146\ufffa\u014a\ufffa\u014c\ufffa\u014d\ufffa\u014f\ufffa\u0153" +
    "\ufffa\u0154\ufffa\u0158\ufffa\u0159\ufffa\001\002\000\004\u0140\u017b" +
    "\001\002\000\116\007\ufff5\011\ufff5\016\ufff5\044\ufff5\057" +
    "\ufff5\074\ufff5\112\ufff5\113\ufff5\117\ufff5\120\ufff5\126\ufff5" +
    "\130\ufff5\134\ufff5\135\ufff5\140\ufff5\141\ufff5\150\ufff5\156" +
    "\ufff5\164\ufff5\165\ufff5\214\ufff5\224\ufff5\240\ufff5\262\ufff5" +
    "\267\ufff5\327\ufff5\u0138\ufff5\u0140\ufff5\u0146\ufff5\u014a\ufff5\u014c" +
    "\ufff5\u014d\ufff5\u014f\ufff5\u0153\ufff5\u0154\ufff5\u0155\u017d\u0158\ufff5" +
    "\u0159\ufff5\001\002\000\114\007\ufff8\011\ufff8\016\ufff8\044" +
    "\ufff8\057\ufff8\074\ufff8\112\ufff8\113\ufff8\117\ufff8\120\ufff8" +
    "\126\ufff8\130\ufff8\134\ufff8\135\ufff8\140\ufff8\141\ufff8\150" +
    "\ufff8\156\ufff8\164\ufff8\165\ufff8\214\ufff8\224\ufff8\240\ufff8" +
    "\262\ufff8\267\ufff8\327\ufff8\u0138\ufff8\u0140\ufff8\u0146\ufff8\u014a" +
    "\ufff8\u014c\ufff8\u014d\ufff8\u014f\ufff8\u0153\ufff8\u0154\ufff8\u0158\ufff8" +
    "\u0159\ufff8\001\002\000\004\u0140\u017e\001\002\000\114\007" +
    "\ufff6\011\ufff6\016\ufff6\044\ufff6\057\ufff6\074\ufff6\112\ufff6" +
    "\113\ufff6\117\ufff6\120\ufff6\126\ufff6\130\ufff6\134\ufff6\135" +
    "\ufff6\140\ufff6\141\ufff6\150\ufff6\156\ufff6\164\ufff6\165\ufff6" +
    "\214\ufff6\224\ufff6\240\ufff6\262\ufff6\267\ufff6\327\ufff6\u0138" +
    "\ufff6\u0140\ufff6\u0146\ufff6\u014a\ufff6\u014c\ufff6\u014d\ufff6\u014f\ufff6" +
    "\u0153\ufff6\u0154\ufff6\u0158\ufff6\u0159\ufff6\001\002\000\004\u0140" +
    "\u0180\001\002\000\004\u0154\u0181\001\002\000\004\u013e\u0182" +
    "\001\002\000\004\u0159\u0183\001\002\000\042\011\ufefb\044" +
    "\ufefb\113\ufefb\117\ufefb\120\ufefb\130\ufefb\135\ufefb\140\ufefb" +
    "\156\ufefb\165\ufefb\214\ufefb\267\ufefb\327\ufefb\u0140\ufefb\u0153" +
    "\ufefb\u0154\ufefb\001\002\000\004\u0159\u0185\001\002\000\020" +
    "\117\ufeea\120\ufeea\165\ufeea\267\ufeea\327\ufeea\u0153\ufeea\u0154" +
    "\ufeea\001\002\000\040\044\ufeda\113\ufeda\117\ufeda\120\ufeda" +
    "\130\ufeda\135\ufeda\140\ufeda\156\ufeda\165\ufeda\214\ufeda\240" +
    "\u0187\267\ufeda\327\ufeda\u0153\ufeda\u0154\ufeda\001\002\000\004" +
    "\u0158\u018a\001\002\000\036\044\ufee1\113\ufee1\117\ufee1\120" +
    "\ufee1\130\ufee1\135\ufee1\140\ufee1\156\ufee1\165\ufee1\214\ufee1" +
    "\267\ufee1\327\ufee1\u0153\ufee1\u0154\ufee1\001\002\000\036\044" +
    "\ufedb\113\ufedb\117\ufedb\120\ufedb\130\ufedb\135\ufedb\140\ufedb" +
    "\156\ufedb\165\ufedb\214\ufedb\267\ufedb\327\ufedb\u0153\ufedb\u0154" +
    "\ufedb\001\002\000\024\323\055\u0100\064\u0105\071\u0110\074" +
    "\u0111\041\u013b\067\u013c\050\u0158\046\u015c\123\001\002\000" +
    "\010\170\u018f\333\u018e\u0159\ufef6\001\002\000\004\u0159\u018d" +
    "\001\002\000\036\044\ufefa\113\ufefa\117\ufefa\120\ufefa\130" +
    "\ufefa\135\ufefa\140\ufefa\156\ufefa\165\ufefa\214\ufefa\267\ufefa" +
    "\327\ufefa\u0153\ufefa\u0154\ufefa\001\002\000\004\u0159\ufef7\001" +
    "\002\000\004\u0159\ufef8\001\002\000\004\u0159\ufef9\001\002" +
    "\000\004\u013e\u0192\001\002\000\004\u0154\u0193\001\002\000" +
    "\004\u013e\u0194\001\002\000\004\u0159\u0195\001\002\000\042" +
    "\011\ufefc\044\ufefc\113\ufefc\117\ufefc\120\ufefc\130\ufefc\135" +
    "\ufefc\140\ufefc\156\ufefc\165\ufefc\214\ufefc\267\ufefc\327\ufefc" +
    "\u0140\ufefc\u0153\ufefc\u0154\ufefc\001\002\000\036\044\ufee0\113" +
    "\ufee0\117\ufee0\120\ufee0\130\ufee0\135\ufee0\140\ufee0\156\ufee0" +
    "\165\ufee0\214\ufee0\267\ufee0\327\ufee0\u0153\ufee0\u0154\ufee0\001" +
    "\002\000\032\150\036\323\055\u0100\064\u0105\071\u0110\074" +
    "\u0111\041\u013b\067\u013c\050\u013e\047\u0140\163\u0158\046\u015c" +
    "\123\001\002\000\014\120\ufe9f\165\ufe9f\327\ufe9f\u0153\ufe9f" +
    "\u0154\u0199\001\002\000\032\150\036\323\055\u0100\064\u0105" +
    "\071\u0110\074\u0111\041\u013b\067\u013c\050\u013e\047\u0140\163" +
    "\u0158\046\u015c\123\001\002\000\012\120\254\165\261\327" +
    "\016\u0153\017\001\002\000\006\327\ufea8\u0153\ufea8\001\002" +
    "\000\014\120\ufe9f\165\ufe9f\327\ufe9f\u0153\ufe9f\u0154\u0199\001" +
    "\002\000\012\120\ufea0\165\ufea0\327\ufea0\u0153\ufea0\001\002" +
    "\000\006\327\ufeb1\u0153\ufeb1\001\002\000\010\165\261\327" +
    "\016\u0153\017\001\002\000\006\327\ufea6\u0153\ufea6\001\002" +
    "\000\020\112\260\117\257\120\254\165\261\267\245\327" +
    "\016\u0153\017\001\002\000\006\327\ufeaf\u0153\ufeaf\001\002" +
    "\000\006\327\ufead\u0153\ufead\001\002\000\014\117\257\120" +
    "\254\165\261\327\016\u0153\017\001\002\000\006\327\ufeaa" +
    "\u0153\ufeaa\001\002\000\032\005\u01aa\064\u01a7\323\uff3d\u0100" +
    "\uff3d\u0105\uff3d\u0110\uff3d\u0111\uff3d\u013b\uff3d\u013c\uff3d\u0140\uff3d" +
    "\u0158\uff3d\u015c\uff3d\001\002\000\026\323\uff3e\u0100\uff3e\u0105" +
    "\uff3e\u0110\uff3e\u0111\uff3e\u013b\uff3e\u013c\uff3e\u0140\uff3e\u0158\uff3e" +
    "\u015c\uff3e\001\002\000\026\323\055\u0100\064\u0105\071\u0110" +
    "\074\u0111\041\u013b\067\u013c\050\u0140\u01ae\u0158\046\u015c\123" +
    "\001\002\000\004\u0159\u01ab\001\002\000\026\323\uff3f\u0100" +
    "\uff3f\u0105\uff3f\u0110\uff3f\u0111\uff3f\u013b\uff3f\u013c\uff3f\u0140\uff3f" +
    "\u0158\uff3f\u015c\uff3f\001\002\000\142\007\uff45\011\uff45\012" +
    "\uff45\016\uff45\032\uff45\044\uff45\057\uff45\062\uff45\071\uff45" +
    "\072\uff45\074\uff45\112\uff45\113\uff45\117\uff45\120\uff45\126" +
    "\uff45\130\uff45\133\uff45\134\uff45\135\uff45\140\uff45\141\uff45" +
    "\150\uff45\164\uff45\165\uff45\170\uff45\214\uff45\224\uff45\242" +
    "\uff45\262\uff45\266\uff45\267\uff45\327\uff45\333\uff45\u0140\uff45" +
    "\u0141\uff45\u0142\uff45\u0143\uff45\u0144\uff45\u0145\uff45\u0146\uff45\u014a" +
    "\uff45\u014c\uff45\u014d\uff45\u014f\uff45\u0153\uff45\u0154\uff45\u0159\uff45" +
    "\001\002\000\004\u0159\uff3c\001\002\000\004\u0159\uff40\001" +
    "\002\000\006\u0155\u01b0\u0159\uff39\001\002\000\004\u0159\uff3b" +
    "\001\002\000\004\u0140\u01b1\001\002\000\004\u0159\uff3a\001" +
    "\002\000\024\323\055\u0100\064\u0105\071\u0110\074\u0111\041" +
    "\u013b\067\u013c\050\u0158\046\u015c\123\001\002\000\006\327" +
    "\ufeb7\u0153\ufeb7\001\002\000\004\u0159\u01b5\001\002\000\102" +
    "\024\027\042\033\050\063\140\044\150\036\170\u01b6\214" +
    "\072\231\076\323\055\341\021\345\025\360\020\376\022" +
    "\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040\u0116" +
    "\075\u0118\037\u0119\026\u0120\057\u0123\073\u0137\043\u013b\067" +
    "\u013c\050\u013e\047\u0140\062\u0143\070\u0158\046\u015c\034\001" +
    "\002\000\100\024\027\042\033\050\063\140\044\150\036" +
    "\214\072\231\076\323\055\341\021\345\025\360\020\376" +
    "\022\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040" +
    "\u0116\075\u0118\037\u0119\026\u0120\057\u0123\073\u0137\043\u013b" +
    "\067\u013c\050\u013e\047\u0140\062\u0143\070\u0158\046\u015c\034" +
    "\001\002\000\006\327\ufeb3\u0153\ufeb3\001\002\000\006\327" +
    "\ufeb5\u0153\ufeb5\001\002\000\006\327\ufeb4\u0153\ufeb4\001\002" +
    "\000\030\323\uff22\u0100\uff22\u0105\uff22\u0110\uff22\u0111\uff22\u013b" +
    "\uff22\u013c\uff22\u013e\uff22\u0140\uff22\u0158\uff22\u015c\uff22\001\002" +
    "\000\030\323\uff13\u0100\uff13\u0105\uff13\u0110\uff13\u0111\uff13\u013b" +
    "\uff13\u013c\uff13\u013e\uff13\u0140\uff13\u0158\uff13\u015c\uff13\001\002" +
    "\000\030\323\uff14\u0100\uff14\u0105\uff14\u0110\uff14\u0111\uff14\u013b" +
    "\uff14\u013c\uff14\u013e\uff14\u0140\uff14\u0158\uff14\u015c\uff14\001\002" +
    "\000\030\323\uff12\u0100\uff12\u0105\uff12\u0110\uff12\u0111\uff12\u013b" +
    "\uff12\u013c\uff12\u013e\uff12\u0140\uff12\u0158\uff12\u015c\uff12\001\002" +
    "\000\030\323\uff21\u0100\uff21\u0105\uff21\u0110\uff21\u0111\uff21\u013b" +
    "\uff21\u013c\uff21\u013e\uff21\u0140\uff21\u0158\uff21\u015c\uff21\001\002" +
    "\000\030\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b" +
    "\067\u013c\050\u013e\u01c3\u0140\u01c6\u0158\046\u015c\123\001\002" +
    "\000\030\323\uff23\u0100\uff23\u0105\uff23\u0110\uff23\u0111\uff23\u013b" +
    "\uff23\u013c\uff23\u013e\uff23\u0140\uff23\u0158\uff23\u015c\uff23\001\002" +
    "\000\030\323\uff11\u0100\uff11\u0105\uff11\u0110\uff11\u0111\uff11\u013b" +
    "\uff11\u013c\uff11\u013e\uff11\u0140\uff11\u0158\uff11\u015c\uff11\001\002" +
    "\000\030\323\uff10\u0100\uff10\u0105\uff10\u0110\uff10\u0111\uff10\u013b" +
    "\uff10\u013c\uff10\u013e\uff10\u0140\uff10\u0158\uff10\u015c\uff10\001\002" +
    "\000\116\007\uff1c\011\uff1c\012\uff1c\016\uff1c\032\uff1c\044" +
    "\uff1c\062\uff1c\071\uff1c\072\uff1c\074\uff1c\112\uff1c\113\uff1c" +
    "\117\uff1c\120\uff1c\126\uff1c\130\uff1c\133\uff1c\134\uff1c\135" +
    "\uff1c\140\uff1c\141\uff1c\150\uff1c\164\uff1c\165\uff1c\214\uff1c" +
    "\242\uff1c\266\uff1c\267\uff1c\327\uff1c\u0140\uff1c\u0146\uff1c\u014a" +
    "\uff1c\u014c\uff1c\u014d\uff1c\u014f\uff1c\u0153\uff1c\u0154\uff1c\u0159\uff1c" +
    "\001\002\000\116\007\uff1e\011\uff1e\012\uff1e\016\uff1e\032" +
    "\uff1e\044\uff1e\062\uff1e\071\uff1e\072\uff1e\074\uff1e\112\uff1e" +
    "\113\uff1e\117\uff1e\120\uff1e\126\uff1e\130\uff1e\133\uff1e\134" +
    "\uff1e\135\uff1e\140\uff1e\141\uff1e\150\uff1e\164\uff1e\165\uff1e" +
    "\214\uff1e\242\uff1e\266\uff1e\267\uff1e\327\uff1e\u0140\uff1e\u0146" +
    "\uff1e\u014a\uff1e\u014c\uff1e\u014d\uff1e\u014f\uff1e\u0153\uff1e\u0154\uff1e" +
    "\u0159\uff1e\001\002\000\116\007\uff27\011\uff27\012\uff27\016" +
    "\uff27\032\uff27\044\uff27\062\uff27\071\uff27\072\uff27\074\uff27" +
    "\112\uff27\113\uff27\117\uff27\120\uff27\126\uff27\130\uff27\133" +
    "\uff27\134\uff27\135\uff27\140\uff27\141\uff27\150\uff27\164\uff27" +
    "\165\uff27\214\uff27\242\uff27\266\uff27\267\uff27\327\uff27\u0140" +
    "\uff27\u0146\uff27\u014a\uff27\u014c\uff27\u014d\uff27\u014f\uff27\u0153\uff27" +
    "\u0154\uff27\u0159\uff27\001\002\000\116\007\uff1d\011\uff1d\012" +
    "\uff1d\016\uff1d\032\uff1d\044\uff1d\062\uff1d\071\uff1d\072\uff1d" +
    "\074\uff1d\112\uff1d\113\uff1d\117\uff1d\120\uff1d\126\uff1d\130" +
    "\uff1d\133\uff1d\134\uff1d\135\uff1d\140\uff1d\141\uff1d\150\uff1d" +
    "\164\uff1d\165\uff1d\214\uff1d\242\uff1d\266\uff1d\267\uff1d\327" +
    "\uff1d\u0140\uff1d\u0146\uff1d\u014a\uff1d\u014c\uff1d\u014d\uff1d\u014f\uff1d" +
    "\u0153\uff1d\u0154\uff1d\u0159\uff1d\001\002\000\010\u013e\135\u0140" +
    "\133\u015c\134\001\002\000\004\u0154\u01c9\001\002\000\024" +
    "\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c" +
    "\050\u0158\046\u015c\123\001\002\000\004\u0159\u01cb\001\002" +
    "\000\106\007\uff59\011\uff59\012\uff59\016\uff59\032\uff59\044" +
    "\uff59\062\uff59\074\uff59\112\uff59\113\uff59\117\uff59\120\uff59" +
    "\126\uff59\130\uff59\133\uff59\134\uff59\135\uff59\140\uff59\141" +
    "\uff59\150\uff59\164\uff59\165\uff59\214\uff59\267\uff59\327\uff59" +
    "\u0140\uff59\u0146\uff59\u014a\uff59\u014c\uff59\u014d\uff59\u014f\uff59\u0153" +
    "\uff59\u0154\uff59\u0159\uff59\001\002\000\006\u013e\106\u015c\107" +
    "\001\002\000\004\u0159\u01ce\001\002\000\106\007\uff63\011" +
    "\uff63\012\uff63\016\uff63\032\uff63\044\uff63\062\uff63\074\uff63" +
    "\112\uff63\113\uff63\117\uff63\120\uff63\126\uff63\130\uff63\133" +
    "\uff63\134\uff63\135\uff63\140\uff63\141\uff63\150\uff63\164\uff63" +
    "\165\uff63\214\uff63\267\uff63\327\uff63\u0140\uff63\u0146\uff63\u014a" +
    "\uff63\u014c\uff63\u014d\uff63\u014f\uff63\u0153\uff63\u0154\uff63\u0159\uff63" +
    "\001\002\000\102\007\uff84\012\uff84\016\uff84\032\uff84\044" +
    "\uff84\062\uff84\074\uff84\112\uff84\113\uff84\117\uff84\120\uff84" +
    "\126\uff84\130\uff84\133\uff84\134\uff84\135\uff84\140\uff84\141" +
    "\uff84\150\uff84\164\uff84\165\uff84\214\uff84\267\uff84\327\uff84" +
    "\u0146\uff84\u014a\uff84\u014c\uff84\u014d\uff84\u014f\uff84\u0153\uff84\u0154" +
    "\uff84\u0159\uff84\001\002\000\032\005\115\064\114\323\uff2c" +
    "\u0100\uff2c\u0105\uff2c\u0110\uff2c\u0111\uff2c\u013b\uff2c\u013c\uff2c\u0140" +
    "\uff2c\u0158\uff2c\u015c\uff2c\001\002\000\004\u0159\u01d2\001\002" +
    "\000\142\007\uff42\011\uff42\012\uff42\016\uff42\032\uff42\044" +
    "\uff42\057\uff42\062\uff42\071\uff42\072\uff42\074\uff42\112\uff42" +
    "\113\uff42\117\uff42\120\uff42\126\uff42\130\uff42\133\uff42\134" +
    "\uff42\135\uff42\140\uff42\141\uff42\150\uff42\164\uff42\165\uff42" +
    "\170\uff42\214\uff42\224\uff42\242\uff42\262\uff42\266\uff42\267" +
    "\uff42\327\uff42\333\uff42\u0140\uff42\u0141\uff42\u0142\uff42\u0143\uff42" +
    "\u0144\uff42\u0145\uff42\u0146\uff42\u014a\uff42\u014c\uff42\u014d\uff42\u014f" +
    "\uff42\u0153\uff42\u0154\uff42\u0159\uff42\001\002\000\010\u013e\135" +
    "\u0140\133\u015c\134\001\002\000\004\u0154\u01d5\001\002\000" +
    "\010\u013e\135\u0140\133\u015c\134\001\002\000\004\u0154\u01d7" +
    "\001\002\000\010\u013e\135\u0140\133\u015c\134\001\002\000" +
    "\004\u0159\u01d9\001\002\000\106\007\uff5c\011\uff5c\012\uff5c" +
    "\016\uff5c\032\uff5c\044\uff5c\062\uff5c\074\uff5c\112\uff5c\113" +
    "\uff5c\117\uff5c\120\uff5c\126\uff5c\130\uff5c\133\uff5c\134\uff5c" +
    "\135\uff5c\140\uff5c\141\uff5c\150\uff5c\164\uff5c\165\uff5c\214" +
    "\uff5c\267\uff5c\327\uff5c\u0140\uff5c\u0146\uff5c\u014a\uff5c\u014c\uff5c" +
    "\u014d\uff5c\u014f\uff5c\u0153\uff5c\u0154\uff5c\u0159\uff5c\001\002\000" +
    "\010\u013e\135\u0140\133\u015c\134\001\002\000\006\112\u01dc" +
    "\u0159\uff4f\001\002\000\010\u013e\135\u0140\133\u015c\134\001" +
    "\002\000\004\u0159\u01de\001\002\000\106\007\uff58\011\uff58" +
    "\012\uff58\016\uff58\032\uff58\044\uff58\062\uff58\074\uff58\112" +
    "\uff58\113\uff58\117\uff58\120\uff58\126\uff58\130\uff58\133\uff58" +
    "\134\uff58\135\uff58\140\uff58\141\uff58\150\uff58\164\uff58\165" +
    "\uff58\214\uff58\267\uff58\327\uff58\u0140\uff58\u0146\uff58\u014a\uff58" +
    "\u014c\uff58\u014d\uff58\u014f\uff58\u0153\uff58\u0154\uff58\u0159\uff58\001" +
    "\002\000\004\u0159\uff50\001\002\000\122\007\uffb8\011\uffb8" +
    "\012\uffb8\016\uffb8\032\uffb8\044\uffb8\062\uffb8\074\uffb8\112" +
    "\uffb8\113\uffb8\117\uffb8\120\uffb8\126\uffb8\130\uffb8\133\uffb8" +
    "\134\uffb8\135\uffb8\140\uffb8\141\uffb8\150\uffb8\164\uffb8\165" +
    "\uffb8\214\uffb8\267\uffb8\327\uffb8\u0140\uffb8\u0141\uffb8\u0142\uffb8" +
    "\u0143\uffb8\u0144\uffb8\u0145\uffb8\u0146\uffb8\u014a\uffb8\u014b\u01e1\u014c" +
    "\uffb8\u014d\uffb8\u014f\uffb8\u0153\uffb8\u0154\uffb8\u0159\uffb8\001\002" +
    "\000\076\024\027\042\033\050\063\140\044\150\036\214" +
    "\072\231\076\323\055\341\021\345\025\360\020\376\022" +
    "\u0100\064\u0105\071\u010d\030\u0110\074\u0111\041\u0112\040\u0116" +
    "\075\u0118\037\u0119\026\u0120\057\u0123\073\u0137\043\u013b\067" +
    "\u013c\050\u013e\047\u0140\062\u0158\046\u015c\123\001\002\000" +
    "\102\007\uff82\012\uff82\016\uff82\032\uff82\044\uff82\062\uff82" +
    "\074\uff82\112\uff82\113\uff82\117\uff82\120\uff82\126\uff82\130" +
    "\uff82\133\uff82\134\uff82\135\uff82\140\uff82\141\uff82\150\uff82" +
    "\164\uff82\165\uff82\214\uff82\267\uff82\327\uff82\u0146\uff82\u014a" +
    "\uff82\u014c\uff82\u014d\uff82\u014f\uff82\u0153\uff82\u0154\uff82\u0159\uff82" +
    "\001\002\000\036\312\u01f3\322\u01f0\330\u01eb\345\u01f4\356" +
    "\u01ee\361\u01e4\364\u01e6\u0107\u01e8\u0113\u01e7\u011d\u01e5\u0120\u01e9" +
    "\u012d\u01ea\u012e\u01ed\u0140\u01ef\001\002\000\034\150\ufebf\323" +
    "\ufebf\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b\ufebf\u013c\ufebf" +
    "\u013e\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf\001\002\000" +
    "\034\150\ufebf\323\ufebf\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf" +
    "\u013b\ufebf\u013c\ufebf\u013e\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c" +
    "\ufebf\001\002\000\034\150\ufebf\323\ufebf\u0100\ufebf\u0105\ufebf" +
    "\u0110\ufebf\u0111\ufebf\u013b\ufebf\u013c\ufebf\u013e\ufebf\u0140\ufebf\u0158" +
    "\u01f6\u0159\ufebf\u015c\ufebf\001\002\000\034\150\ufebf\323\ufebf" +
    "\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b\ufebf\u013c\ufebf\u013e" +
    "\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf\001\002\000\034" +
    "\150\ufebf\323\ufebf\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b" +
    "\ufebf\u013c\ufebf\u013e\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf" +
    "\001\002\000\034\150\ufebf\323\ufebf\u0100\ufebf\u0105\ufebf\u0110" +
    "\ufebf\u0111\ufebf\u013b\ufebf\u013c\ufebf\u013e\ufebf\u0140\ufebf\u0158\u01f6" +
    "\u0159\ufebf\u015c\ufebf\001\002\000\034\150\ufebf\323\ufebf\u0100" +
    "\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b\ufebf\u013c\ufebf\u013e\ufebf" +
    "\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf\001\002\000\034\150" +
    "\ufebf\323\ufebf\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b\ufebf" +
    "\u013c\ufebf\u013e\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf\001" +
    "\002\000\106\007\uff6e\011\uff6e\012\uff6e\016\uff6e\032\uff6e" +
    "\044\uff6e\062\uff6e\074\uff6e\112\uff6e\113\uff6e\117\uff6e\120" +
    "\uff6e\126\uff6e\130\uff6e\133\uff6e\134\uff6e\135\uff6e\140\uff6e" +
    "\141\uff6e\150\uff6e\164\uff6e\165\uff6e\214\uff6e\267\uff6e\327" +
    "\uff6e\u0140\uff6e\u0146\uff6e\u014a\uff6e\u014c\uff6e\u014d\uff6e\u014f\uff6e" +
    "\u0153\uff6e\u0154\uff6e\u0159\uff6e\001\002\000\034\150\ufebf\323" +
    "\ufebf\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b\ufebf\u013c\ufebf" +
    "\u013e\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf\001\002\000" +
    "\034\150\ufebf\323\ufebf\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf" +
    "\u013b\ufebf\u013c\ufebf\u013e\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c" +
    "\ufebf\001\002\000\004\u0155\u0209\001\002\000\034\150\ufebf" +
    "\323\ufebf\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b\ufebf\u013c" +
    "\ufebf\u013e\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf\001\002" +
    "\000\032\150\uff6a\323\uff6a\u0100\uff6a\u0105\uff6a\u0110\uff6a\u0111" +
    "\uff6a\u013b\uff6a\u013c\uff6a\u013e\uff6a\u0140\uff6a\u0158\u01ff\u015c\uff6a" +
    "\001\002\000\034\150\ufecf\323\ufecf\u0100\ufecf\u0105\ufecf\u0110" +
    "\ufecf\u0111\ufecf\u013b\ufecf\u013c\ufecf\u013e\ufecf\u0140\ufecf\u0158\ufecf" +
    "\u0159\ufecf\u015c\ufecf\001\002\000\034\150\ufebf\323\ufebf\u0100" +
    "\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b\ufebf\u013c\ufebf\u013e\ufebf" +
    "\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf\001\002\000\034\150" +
    "\ufebf\323\ufebf\u0100\ufebf\u0105\ufebf\u0110\ufebf\u0111\ufebf\u013b\ufebf" +
    "\u013c\ufebf\u013e\ufebf\u0140\ufebf\u0158\u01f6\u0159\ufebf\u015c\ufebf\001" +
    "\002\000\034\150\ufec2\323\ufec2\u0100\ufec2\u0105\ufec2\u0110\ufec2" +
    "\u0111\ufec2\u013b\ufec2\u013c\ufec2\u013e\ufec2\u0140\ufec2\u0158\ufec2\u0159" +
    "\ufec2\u015c\ufec2\001\002\000\004\u013b\u01f7\001\002\000\006" +
    "\u0154\u01f8\u0159\u01fa\001\002\000\004\u013b\u01fb\001\002\000" +
    "\034\150\ufec0\323\ufec0\u0100\ufec0\u0105\ufec0\u0110\ufec0\u0111\ufec0" +
    "\u013b\ufec0\u013c\ufec0\u013e\ufec0\u0140\ufec0\u0158\ufec0\u0159\ufec0\u015c" +
    "\ufec0\001\002\000\034\150\ufebd\323\ufebd\u0100\ufebd\u0105\ufebd" +
    "\u0110\ufebd\u0111\ufebd\u013b\ufebd\u013c\ufebd\u013e\ufebd\u0140\ufebd\u0158" +
    "\ufebd\u0159\ufebd\u015c\ufebd\001\002\000\004\u0159\u01fc\001\002" +
    "\000\034\150\ufebe\323\ufebe\u0100\ufebe\u0105\ufebe\u0110\ufebe\u0111" +
    "\ufebe\u013b\ufebe\u013c\ufebe\u013e\ufebe\u0140\ufebe\u0158\ufebe\u0159\ufebe" +
    "\u015c\ufebe\001\002\000\034\150\ufeca\323\ufeca\u0100\ufeca\u0105" +
    "\ufeca\u0110\ufeca\u0111\ufeca\u013b\ufeca\u013c\ufeca\u013e\ufeca\u0140\ufeca" +
    "\u0158\ufeca\u0159\ufeca\u015c\ufeca\001\002\000\032\150\036\323" +
    "\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050" +
    "\u013e\047\u0140\163\u0158\046\u015c\123\001\002\000\004\u013b" +
    "\u0200\001\002\000\004\u0159\u0201\001\002\000\034\150\uff6b" +
    "\323\uff6b\u0100\uff6b\u0105\uff6b\u0110\uff6b\u0111\uff6b\u013b\uff6b\u013c" +
    "\uff6b\u013e\uff6b\u0140\uff6b\u0158\uff6b\u0159\uff6b\u015c\uff6b\001\002" +
    "\000\106\007\uff6c\011\uff6c\012\uff6c\016\uff6c\032\uff6c\044" +
    "\uff6c\062\uff6c\074\uff6c\112\uff6c\113\uff6c\117\uff6c\120\uff6c" +
    "\126\uff6c\130\uff6c\133\uff6c\134\uff6c\135\uff6c\140\uff6c\141" +
    "\uff6c\150\uff6c\164\uff6c\165\uff6c\214\uff6c\267\uff6c\327\uff6c" +
    "\u0140\uff6c\u0146\uff6c\u014a\uff6c\u014c\uff6c\u014d\uff6c\u014f\uff6c\u0153" +
    "\uff6c\u0154\uff6c\u0159\uff6c\001\002\000\006\u0154\u0204\u0159\u0206" +
    "\001\002\000\024\323\055\u0100\064\u0105\071\u0110\074\u0111" +
    "\041\u013b\067\u013c\050\u0158\046\u015c\123\001\002\000\106" +
    "\007\uff69\011\uff69\012\uff69\016\uff69\032\uff69\044\uff69\062" +
    "\uff69\074\uff69\112\uff69\113\uff69\117\uff69\120\uff69\126\uff69" +
    "\130\uff69\133\uff69\134\uff69\135\uff69\140\uff69\141\uff69\150" +
    "\uff69\164\uff69\165\uff69\214\uff69\267\uff69\327\uff69\u0140\uff69" +
    "\u0146\uff69\u014a\uff69\u014c\uff69\u014d\uff69\u014f\uff69\u0153\uff69\u0154" +
    "\uff69\u0159\uff69\001\002\000\106\007\uff67\011\uff67\012\uff67" +
    "\016\uff67\032\uff67\044\uff67\062\uff67\074\uff67\112\uff67\113" +
    "\uff67\117\uff67\120\uff67\126\uff67\130\uff67\133\uff67\134\uff67" +
    "\135\uff67\140\uff67\141\uff67\150\uff67\164\uff67\165\uff67\214" +
    "\uff67\267\uff67\327\uff67\u0140\uff67\u0146\uff67\u014a\uff67\u014c\uff67" +
    "\u014d\uff67\u014f\uff67\u0153\uff67\u0154\uff67\u0159\uff67\001\002\000" +
    "\106\007\uff68\011\uff68\012\uff68\016\uff68\032\uff68\044\uff68" +
    "\062\uff68\074\uff68\112\uff68\113\uff68\117\uff68\120\uff68\126" +
    "\uff68\130\uff68\133\uff68\134\uff68\135\uff68\140\uff68\141\uff68" +
    "\150\uff68\164\uff68\165\uff68\214\uff68\267\uff68\327\uff68\u0140" +
    "\uff68\u0146\uff68\u014a\uff68\u014c\uff68\u014d\uff68\u014f\uff68\u0153\uff68" +
    "\u0154\uff68\u0159\uff68\001\002\000\034\150\ufec7\323\ufec7\u0100" +
    "\ufec7\u0105\ufec7\u0110\ufec7\u0111\ufec7\u013b\ufec7\u013c\ufec7\u013e\ufec7" +
    "\u0140\ufec7\u0158\ufec7\u0159\ufec7\u015c\ufec7\001\002\000\004\u0140" +
    "\u020b\001\002\000\034\150\ufed0\323\ufed0\u0100\ufed0\u0105\ufed0" +
    "\u0110\ufed0\u0111\ufed0\u013b\ufed0\u013c\ufed0\u013e\ufed0\u0140\ufed0\u0158" +
    "\ufed0\u0159\ufed0\u015c\ufed0\001\002\000\034\150\ufece\323\ufece" +
    "\u0100\ufece\u0105\ufece\u0110\ufece\u0111\ufece\u013b\ufece\u013c\ufece\u013e" +
    "\ufece\u0140\ufece\u0158\ufece\u0159\ufece\u015c\ufece\001\002\000\034" +
    "\150\ufec4\323\ufec4\u0100\ufec4\u0105\ufec4\u0110\ufec4\u0111\ufec4\u013b" +
    "\ufec4\u013c\ufec4\u013e\ufec4\u0140\ufec4\u0158\ufec4\u0159\ufec4\u015c\ufec4" +
    "\001\002\000\034\150\ufec9\323\ufec9\u0100\ufec9\u0105\ufec9\u0110" +
    "\ufec9\u0111\ufec9\u013b\ufec9\u013c\ufec9\u013e\ufec9\u0140\ufec9\u0158\ufec9" +
    "\u0159\ufec9\u015c\ufec9\001\002\000\034\150\ufecd\323\ufecd\u0100" +
    "\ufecd\u0105\ufecd\u0110\ufecd\u0111\ufecd\u013b\ufecd\u013c\ufecd\u013e\ufecd" +
    "\u0140\ufecd\u0158\ufecd\u0159\ufecd\u015c\ufecd\001\002\000\034\150" +
    "\ufec5\323\ufec5\u0100\ufec5\u0105\ufec5\u0110\ufec5\u0111\ufec5\u013b\ufec5" +
    "\u013c\ufec5\u013e\ufec5\u0140\ufec5\u0158\ufec5\u0159\ufec5\u015c\ufec5\001" +
    "\002\000\034\150\ufec1\323\ufec1\u0100\ufec1\u0105\ufec1\u0110\ufec1" +
    "\u0111\ufec1\u013b\ufec1\u013c\ufec1\u013e\ufec1\u0140\ufec1\u0158\ufec1\u0159" +
    "\ufec1\u015c\ufec1\001\002\000\034\150\ufec3\323\ufec3\u0100\ufec3" +
    "\u0105\ufec3\u0110\ufec3\u0111\ufec3\u013b\ufec3\u013c\ufec3\u013e\ufec3\u0140" +
    "\ufec3\u0158\ufec3\u0159\ufec3\u015c\ufec3\001\002\000\034\150\ufec8" +
    "\323\ufec8\u0100\ufec8\u0105\ufec8\u0110\ufec8\u0111\ufec8\u013b\ufec8\u013c" +
    "\ufec8\u013e\ufec8\u0140\ufec8\u0158\ufec8\u0159\ufec8\u015c\ufec8\001\002" +
    "\000\034\150\ufecb\323\ufecb\u0100\ufecb\u0105\ufecb\u0110\ufecb\u0111" +
    "\ufecb\u013b\ufecb\u013c\ufecb\u013e\ufecb\u0140\ufecb\u0158\ufecb\u0159\ufecb" +
    "\u015c\ufecb\001\002\000\034\150\ufec6\323\ufec6\u0100\ufec6\u0105" +
    "\ufec6\u0110\ufec6\u0111\ufec6\u013b\ufec6\u013c\ufec6\u013e\ufec6\u0140\ufec6" +
    "\u0158\ufec6\u0159\ufec6\u015c\ufec6\001\002\000\034\150\ufecc\323" +
    "\ufecc\u0100\ufecc\u0105\ufecc\u0110\ufecc\u0111\ufecc\u013b\ufecc\u013c\ufecc" +
    "\u013e\ufecc\u0140\ufecc\u0158\ufecc\u0159\ufecc\u015c\ufecc\001\002\000" +
    "\010\u013e\135\u0140\133\u015c\134\001\002\000\004\u0159\u0218" +
    "\001\002\000\106\007\uff5d\011\uff5d\012\uff5d\016\uff5d\032" +
    "\uff5d\044\uff5d\062\uff5d\074\uff5d\112\uff5d\113\uff5d\117\uff5d" +
    "\120\uff5d\126\uff5d\130\uff5d\133\uff5d\134\uff5d\135\uff5d\140" +
    "\uff5d\141\uff5d\150\uff5d\164\uff5d\165\uff5d\214\uff5d\267\uff5d" +
    "\327\uff5d\u0140\uff5d\u0146\uff5d\u014a\uff5d\u014c\uff5d\u014d\uff5d\u014f" +
    "\uff5d\u0153\uff5d\u0154\uff5d\u0159\uff5d\001\002\000\032\150\036" +
    "\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c" +
    "\050\u013e\047\u0140\163\u0158\046\u015c\123\001\002\000\004" +
    "\266\u0219\001\002\000\106\007\uff01\011\uff01\012\uff01\016" +
    "\uff01\032\uff01\044\uff01\062\uff01\074\uff01\112\uff01\113\uff01" +
    "\117\uff01\120\uff01\126\uff01\130\uff01\133\uff01\134\uff01\135" +
    "\uff01\140\uff01\141\uff01\150\uff01\164\uff01\165\uff01\214\uff01" +
    "\267\uff01\327\uff01\u0140\uff01\u0146\uff01\u014a\uff01\u014c\uff01\u014d" +
    "\uff01\u014f\uff01\u0153\uff01\u0154\uff01\u0159\uff01\001\002\000\106" +
    "\007\uff03\011\uff03\012\uff03\016\uff03\032\uff03\044\uff03\062" +
    "\uff03\074\uff03\112\uff03\113\uff03\117\uff03\120\uff03\126\uff03" +
    "\130\uff03\133\uff03\134\uff03\135\uff03\140\uff03\141\uff03\150" +
    "\uff03\164\uff03\165\uff03\214\uff03\267\uff03\327\uff03\u0140\uff03" +
    "\u0146\uff03\u014a\uff03\u014c\uff03\u014d\uff03\u014f\uff03\u0153\uff03\u0154" +
    "\uff03\u0159\uff03\001\002\000\106\007\uff02\011\uff02\012\uff02" +
    "\016\uff02\032\uff02\044\uff02\062\uff02\074\uff02\112\uff02\113" +
    "\uff02\117\uff02\120\uff02\126\uff02\130\uff02\133\uff02\134\uff02" +
    "\135\uff02\140\uff02\141\uff02\150\uff02\164\uff02\165\uff02\214" +
    "\uff02\267\uff02\327\uff02\u0140\uff02\u0146\uff02\u014a\uff02\u014c\uff02" +
    "\u014d\uff02\u014f\uff02\u0153\uff02\u0154\uff02\u0159\uff02\001\002\000" +
    "\004\242\u021f\001\002\000\032\150\036\323\055\u0100\064" +
    "\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050\u013e\047\u0140" +
    "\163\u0158\046\u015c\123\001\002\000\010\071\u0221\072\u0224" +
    "\266\u0219\001\002\000\032\150\036\323\055\u0100\064\u0105" +
    "\071\u0110\074\u0111\041\u013b\067\u013c\050\u013e\047\u0140\163" +
    "\u0158\046\u015c\123\001\002\000\106\007\uff00\011\uff00\012" +
    "\uff00\016\uff00\032\uff00\044\uff00\062\uff00\074\uff00\112\uff00" +
    "\113\uff00\117\uff00\120\uff00\126\uff00\130\uff00\133\uff00\134" +
    "\uff00\135\uff00\140\uff00\141\uff00\150\uff00\164\uff00\165\uff00" +
    "\214\uff00\267\uff00\327\uff00\u0140\uff00\u0146\uff00\u014a\uff00\u014c" +
    "\uff00\u014d\uff00\u014f\uff00\u0153\uff00\u0154\uff00\u0159\uff00\001\002" +
    "\000\106\007\ufefe\011\ufefe\012\ufefe\016\ufefe\032\ufefe\044" +
    "\ufefe\062\ufefe\074\ufefe\112\ufefe\113\ufefe\117\ufefe\120\ufefe" +
    "\126\ufefe\130\ufefe\133\ufefe\134\ufefe\135\ufefe\140\ufefe\141" +
    "\ufefe\150\ufefe\164\ufefe\165\ufefe\214\ufefe\267\ufefe\327\ufefe" +
    "\u0140\ufefe\u0146\ufefe\u014a\ufefe\u014c\ufefe\u014d\ufefe\u014f\ufefe\u0153" +
    "\ufefe\u0154\ufefe\u0159\ufefe\001\002\000\106\007\ufefd\011\ufefd" +
    "\012\ufefd\016\ufefd\032\ufefd\044\ufefd\062\ufefd\074\ufefd\112" +
    "\ufefd\113\ufefd\117\ufefd\120\ufefd\126\ufefd\130\ufefd\133\ufefd" +
    "\134\ufefd\135\ufefd\140\ufefd\141\ufefd\150\ufefd\164\ufefd\165" +
    "\ufefd\214\ufefd\267\ufefd\327\ufefd\u0140\ufefd\u0146\ufefd\u014a\ufefd" +
    "\u014c\ufefd\u014d\ufefd\u014f\ufefd\u0153\ufefd\u0154\ufefd\u0159\ufefd\001" +
    "\002\000\004\072\u0226\001\002\000\106\007\ufeff\011\ufeff" +
    "\012\ufeff\016\ufeff\032\ufeff\044\ufeff\062\ufeff\074\ufeff\112" +
    "\ufeff\113\ufeff\117\ufeff\120\ufeff\126\ufeff\130\ufeff\133\ufeff" +
    "\134\ufeff\135\ufeff\140\ufeff\141\ufeff\150\ufeff\164\ufeff\165" +
    "\ufeff\214\ufeff\267\ufeff\327\ufeff\u0140\ufeff\u0146\ufeff\u014a\ufeff" +
    "\u014c\ufeff\u014d\ufeff\u014f\ufeff\u0153\ufeff\u0154\ufeff\u0159\ufeff\001" +
    "\002\000\006\u013e\106\u015c\107\001\002\000\004\u0159\u0229" +
    "\001\002\000\106\007\uff64\011\uff64\012\uff64\016\uff64\032" +
    "\uff64\044\uff64\062\uff64\074\uff64\112\uff64\113\uff64\117\uff64" +
    "\120\uff64\126\uff64\130\uff64\133\uff64\134\uff64\135\uff64\140" +
    "\uff64\141\uff64\150\uff64\164\uff64\165\uff64\214\uff64\267\uff64" +
    "\327\uff64\u0140\uff64\u0146\uff64\u014a\uff64\u014c\uff64\u014d\uff64\u014f" +
    "\uff64\u0153\uff64\u0154\uff64\u0159\uff64\001\002\000\024\323\055" +
    "\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050\u0158" +
    "\046\u015c\123\001\002\000\004\u0159\u022c\001\002\000\106" +
    "\007\uff5a\011\uff5a\012\uff5a\016\uff5a\032\uff5a\044\uff5a\062" +
    "\uff5a\074\uff5a\112\uff5a\113\uff5a\117\uff5a\120\uff5a\126\uff5a" +
    "\130\uff5a\133\uff5a\134\uff5a\135\uff5a\140\uff5a\141\uff5a\150" +
    "\uff5a\164\uff5a\165\uff5a\214\uff5a\267\uff5a\327\uff5a\u0140\uff5a" +
    "\u0146\uff5a\u014a\uff5a\u014c\uff5a\u014d\uff5a\u014f\uff5a\u0153\uff5a\u0154" +
    "\uff5a\u0159\uff5a\001\002\000\006\u013e\u0230\u0140\u022f\001\002" +
    "\000\116\007\uff26\011\uff26\012\uff26\016\uff26\032\uff26\044" +
    "\uff26\062\uff26\071\uff26\072\uff26\074\uff26\112\uff26\113\uff26" +
    "\117\uff26\120\uff26\126\uff26\130\uff26\133\uff26\134\uff26\135" +
    "\uff26\140\uff26\141\uff26\150\uff26\164\uff26\165\uff26\214\uff26" +
    "\242\uff26\266\uff26\267\uff26\327\uff26\u0140\uff26\u0146\uff26\u014a" +
    "\uff26\u014c\uff26\u014d\uff26\u014f\uff26\u0153\uff26\u0154\uff26\u0159\uff26" +
    "\001\002\000\116\007\uff1f\011\uff1f\012\uff1f\016\uff1f\032" +
    "\uff1f\044\uff1f\062\uff1f\071\uff1f\072\uff1f\074\uff1f\112\uff1f" +
    "\113\uff1f\117\uff1f\120\uff1f\126\uff1f\130\uff1f\133\uff1f\134" +
    "\uff1f\135\uff1f\140\uff1f\141\uff1f\150\uff1f\164\uff1f\165\uff1f" +
    "\214\uff1f\242\uff1f\266\uff1f\267\uff1f\327\uff1f\u0140\uff1f\u0146" +
    "\uff1f\u014a\uff1f\u014c\uff1f\u014d\uff1f\u014f\uff1f\u0153\uff1f\u0154\uff1f" +
    "\u0159\uff1f\001\002\000\116\007\uff20\011\uff20\012\uff20\016" +
    "\uff20\032\uff20\044\uff20\062\uff20\071\uff20\072\uff20\074\uff20" +
    "\112\uff20\113\uff20\117\uff20\120\uff20\126\uff20\130\uff20\133" +
    "\uff20\134\uff20\135\uff20\140\uff20\141\uff20\150\uff20\164\uff20" +
    "\165\uff20\214\uff20\242\uff20\266\uff20\267\uff20\327\uff20\u0140" +
    "\uff20\u0146\uff20\u014a\uff20\u014c\uff20\u014d\uff20\u014f\uff20\u0153\uff20" +
    "\u0154\uff20\u0159\uff20\001\002\000\010\u013e\135\u0140\133\u015c" +
    "\134\001\002\000\004\u0154\u0233\001\002\000\024\323\055" +
    "\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050\u0158" +
    "\046\u015c\123\001\002\000\004\u0154\u0235\001\002\000\024" +
    "\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c" +
    "\050\u0158\046\u015c\123\001\002\000\004\u0159\u0237\001\002" +
    "\000\106\007\uff54\011\uff54\012\uff54\016\uff54\032\uff54\044" +
    "\uff54\062\uff54\074\uff54\112\uff54\113\uff54\117\uff54\120\uff54" +
    "\126\uff54\130\uff54\133\uff54\134\uff54\135\uff54\140\uff54\141" +
    "\uff54\150\uff54\164\uff54\165\uff54\214\uff54\267\uff54\327\uff54" +
    "\u0140\uff54\u0146\uff54\u014a\uff54\u014c\uff54\u014d\uff54\u014f\uff54\u0153" +
    "\uff54\u0154\uff54\u0159\uff54\001\002\000\032\150\036\323\055" +
    "\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050\u013e" +
    "\047\u0140\163\u0158\046\u015c\123\001\002\000\106\007\uff6f" +
    "\011\uff6f\012\uff6f\016\uff6f\032\uff6f\044\uff6f\062\uff6f\074" +
    "\uff6f\112\uff6f\113\uff6f\117\uff6f\120\uff6f\126\uff6f\130\uff6f" +
    "\133\uff6f\134\uff6f\135\uff6f\140\uff6f\141\uff6f\150\uff6f\164" +
    "\uff6f\165\uff6f\214\uff6f\267\uff6f\327\uff6f\u0140\uff6f\u0146\uff6f" +
    "\u014a\uff6f\u014c\uff6f\u014d\uff6f\u014f\uff6f\u0153\uff6f\u0154\uff6f\u0159" +
    "\uff6f\001\002\000\004\011\u023b\001\002\000\036\312\u01f3" +
    "\322\u01f0\330\u01eb\345\u01f4\356\u01ee\361\u01e4\364\u01e6\u0107" +
    "\u01e8\u0113\u01e7\u011d\u01e5\u0120\u01e9\u012d\u01ea\u012e\u01ed\u0140\u01ef" +
    "\001\002\000\006\u0158\u01ff\u0159\uff6a\001\002\000\004\u0159" +
    "\u023e\001\002\000\106\007\uff6d\011\uff6d\012\uff6d\016\uff6d" +
    "\032\uff6d\044\uff6d\062\uff6d\074\uff6d\112\uff6d\113\uff6d\117" +
    "\uff6d\120\uff6d\126\uff6d\130\uff6d\133\uff6d\134\uff6d\135\uff6d" +
    "\140\uff6d\141\uff6d\150\uff6d\164\uff6d\165\uff6d\214\uff6d\267" +
    "\uff6d\327\uff6d\u0140\uff6d\u0146\uff6d\u014a\uff6d\u014c\uff6d\u014d\uff6d" +
    "\u014f\uff6d\u0153\uff6d\u0154\uff6d\u0159\uff6d\001\002\000\024\323" +
    "\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050" +
    "\u0158\046\u015c\123\001\002\000\004\u0159\u0241\001\002\000" +
    "\106\007\uff55\011\uff55\012\uff55\016\uff55\032\uff55\044\uff55" +
    "\062\uff55\074\uff55\112\uff55\113\uff55\117\uff55\120\uff55\126" +
    "\uff55\130\uff55\133\uff55\134\uff55\135\uff55\140\uff55\141\uff55" +
    "\150\uff55\164\uff55\165\uff55\214\uff55\267\uff55\327\uff55\u0140" +
    "\uff55\u0146\uff55\u014a\uff55\u014c\uff55\u014d\uff55\u014f\uff55\u0153\uff55" +
    "\u0154\uff55\u0159\uff55\001\002\000\004\002\001\001\002\000" +
    "\010\002\uff9b\131\uff9b\224\uff9b\001\002\000\010\002\uff9d" +
    "\131\uff9d\224\uff9d\001\002\000\014\057\u0252\224\010\262" +
    "\u025a\u0138\u0251\u0158\u0258\001\002\000\004\u0158\u024a\001\002" +
    "\000\004\u0140\306\001\002\000\010\002\uff97\131\uff97\224" +
    "\uff97\001\002\000\010\002\uff98\131\uff98\224\uff98\001\002" +
    "\000\024\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b" +
    "\067\u013c\050\u0158\046\u015c\123\001\002\000\004\u0159\u024c" +
    "\001\002\000\010\133\u0247\170\u024f\u0140\306\001\002\000" +
    "\010\002\uff99\131\uff99\224\uff99\001\002\000\010\002\uff9c" +
    "\131\uff9c\224\uff9c\001\002\000\006\133\u0247\u0140\306\001" +
    "\002\000\010\002\uff9a\131\uff9a\224\uff9a\001\002\000\026" +
    "\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c" +
    "\050\u0140\u027c\u0158\046\u015c\123\001\002\000\004\262\u0278" +
    "\001\002\000\012\057\u0252\224\010\262\u025a\u0138\u0251\001" +
    "\002\000\010\002\uff92\131\uff92\224\uff92\001\002\000\010" +
    "\057\u0252\224\010\262\u025a\001\002\000\010\002\uff94\131" +
    "\uff94\224\uff94\001\002\000\010\002\uff96\131\uff96\224\uff96" +
    "\001\002\000\004\u0140\u0270\001\002\000\006\327\u026a\u0153" +
    "\u026b\001\002\000\004\u0158\u025b\001\002\000\034\057\u0260" +
    "\151\u0261\323\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b" +
    "\067\u013c\050\u013d\u025c\u013e\u025e\u0158\046\u015c\123\001\002" +
    "\000\006\u0154\uff9e\u0159\uff9e\001\002\000\006\u0154\u0265\u0159" +
    "\u0266\001\002\000\006\u0154\uff9f\u0159\uff9f\001\002\000\006" +
    "\u0154\uffa0\u0159\uffa0\001\002\000\006\u0154\uff8d\u0159\uff8d\001" +
    "\002\000\006\u0154\uff8c\u0159\uff8c\001\002\000\010\002\uff91" +
    "\131\uff91\224\uff91\001\002\000\006\u0154\uff8b\u0159\uff8b\001" +
    "\002\000\010\002\uff8e\131\uff8e\224\uff8e\001\002\000\034" +
    "\057\u0260\151\u0261\323\055\u0100\064\u0105\071\u0110\074\u0111" +
    "\041\u013b\067\u013c\050\u013d\u025c\u013e\u025e\u0158\046\u015c\123" +
    "\001\002\000\010\327\u026a\u0153\u026b\u0154\u0268\001\002\000" +
    "\010\002\uff89\131\uff89\224\uff89\001\002\000\004\u0158\u026c" +
    "\001\002\000\010\002\uff87\131\uff87\224\uff87\001\002\000" +
    "\010\002\uff85\131\uff85\224\uff85\001\002\000\010\002\uff86" +
    "\131\uff86\224\uff86\001\002\000\034\057\u0260\151\u0261\323" +
    "\055\u0100\064\u0105\071\u0110\074\u0111\041\u013b\067\u013c\050" +
    "\u013d\u025c\u013e\u025e\u0158\046\u015c\123\001\002\000\010\002" +
    "\uff88\131\uff88\224\uff88\001\002\000\010\002\uff8a\131\uff8a" +
    "\224\uff8a\001\002\000\010\002\uff90\131\uff90\224\uff90\001" +
    "\002\000\006\u0154\u0272\u0159\u0274\001\002\000\012\057\uffa4" +
    "\224\uffa4\262\uffa4\u0138\uffa4\001\002\000\004\u0140\u0270\001" +
    "\002\000\012\057\uffa3\224\uffa3\262\uffa3\u0138\uffa3\001\002" +
    "\000\012\057\uffa1\224\uffa1\262\uffa1\u0138\uffa1\001\002\000" +
    "\012\057\uffa2\224\uffa2\262\uffa2\u0138\uffa2\001\002\000\010" +
    "\002\uff93\131\uff93\224\uff93\001\002\000\010\002\uff95\131" +
    "\uff95\224\uff95\001\002\000\006\327\u026a\u0153\u026b\001\002" +
    "\000\010\002\uff8f\131\uff8f\224\uff8f\001\002\000\014\011" +
    "\uffb4\057\uffb4\133\uffb4\224\uffb4\262\uffb4\001\002\000\014" +
    "\011\u028c\057\uffb2\133\uffb2\224\uffb2\262\uffb2\001\002\000" +
    "\004\u0155\u0288\001\002\000\012\057\uffa9\133\u0280\224\uffa9" +
    "\262\uffa9\001\002\000\014\011\uffb5\057\uffb5\133\uffb5\224" +
    "\uffb5\262\uffb5\001\002\000\010\057\uffac\224\uffac\262\uffac" +
    "\001\002\000\006\u0140\u0283\u015c\u0282\001\002\000\010\057" +
    "\uffaa\224\uffaa\262\uffaa\001\002\000\004\u0140\u0286\001\002" +
    "\000\012\057\uffa5\224\uffa5\262\uffa5\u0158\u0258\001\002\000" +
    "\010\057\uffa7\224\uffa7\262\uffa7\001\002\000\010\057\uffa6" +
    "\224\uffa6\262\uffa6\001\002\000\012\057\uffa5\224\uffa5\262" +
    "\uffa5\u0158\u0258\001\002\000\010\057\uffa8\224\uffa8\262\uffa8" +
    "\001\002\000\006\u0140\u028a\u0143\u028b\001\002\000\014\011" +
    "\uffaf\057\uffaf\133\uffaf\224\uffaf\262\uffaf\001\002\000\014" +
    "\011\uffad\057\uffad\133\uffad\224\uffad\262\uffad\001\002\000" +
    "\014\011\uffae\057\uffae\133\uffae\224\uffae\262\uffae\001\002" +
    "\000\004\u0140\u028e\001\002\000\012\057\uffb6\133\uffb6\224" +
    "\uffb6\262\uffb6\001\002\000\014\057\uffb0\133\uffb0\224\uffb0" +
    "\262\uffb0\u0154\u028f\001\002\000\026\323\055\u0100\064\u0105" +
    "\071\u0110\074\u0111\041\u013b\067\u013c\050\u0140\u027c\u0158\046" +
    "\u015c\123\001\002\000\012\057\uffb3\133\uffb3\224\uffb3\262" +
    "\uffb3\001\002\000\012\057\uffb1\133\uffb1\224\uffb1\262\uffb1" +
    "\001\002\000\004\002\uffff\001\002\000\010\002\ufffe\131" +
    "\006\224\010\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0292\000\010\002\006\122\003\220\004\001\001\000" +
    "\004\201\u0292\001\001\000\010\002\u0291\122\003\220\004" +
    "\001\001\000\012\175\u0244\221\u0243\223\u0242\224\u0247\001" +
    "\001\000\002\001\001\000\006\123\012\124\011\001\001" +
    "\000\002\001\001\000\042\003\055\004\041\012\076\020" +
    "\031\023\064\032\050\047\030\051\023\052\022\063\065" +
    "\064\034\125\052\130\051\144\044\146\060\150\057\001" +
    "\001\000\004\201\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u022c\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\032\123\047\u0219\051\023\052\022\063\065" +
    "\065\u021b\066\u021a\144\044\146\060\150\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u01ce\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\050\u01be\055\u01bf\060\u01b9\062\u01bd\001\001" +
    "\000\012\032\123\144\u010d\146\060\150\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\126\u01b2\001\001\000" +
    "\002\001\001\000\022\131\254\133\252\134\251\135\246" +
    "\136\245\137\243\143\261\201\250\001\001\000\002\001" +
    "\001\000\004\147\232\001\001\000\004\145\224\001\001" +
    "\000\004\005\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\032\123\047\163\051\023" +
    "\052\022\063\065\144\044\146\060\150\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\115\044\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\032\123\045\117\144\120\146\060\150\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\141\001\001" +
    "\000\002\001\001\000\012\032\123\144\143\146\060\150" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\150\040\146\001\001\000\014\032\123\041\156\144" +
    "\154\146\060\150\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\053\167\060\164\061\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\200\044\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\207\001\001\000\024\010\205\032\123" +
    "\047\206\051\023\052\022\063\065\144\044\146\060\150" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\216\011\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\123" +
    "\146\227\150\057\001\001\000\010\032\123\146\225\150" +
    "\057\001\001\000\002\001\001\000\004\145\226\001\001" +
    "\000\002\001\001\000\004\145\230\001\001\000\002\001" +
    "\001\000\006\032\123\150\236\001\001\000\002\001\001" +
    "\000\006\032\123\150\234\001\001\000\004\147\235\001" +
    "\001\000\002\001\001\000\004\147\237\001\001\000\002" +
    "\001\001\000\012\032\123\144\241\146\060\150\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\151\u01a3\152\332\166\331\172\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\132\u01a1\175\u01a0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\151\u019e\152\332\166\331\172\325\001\001" +
    "\000\002\001\001\000\040\003\055\004\041\012\076\020" +
    "\031\023\064\032\050\047\030\051\023\052\022\063\065" +
    "\064\034\130\u019d\144\044\146\060\150\057\001\001\000" +
    "\002\001\001\000\012\070\300\100\306\105\310\175\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\263\004\041\012\076\020\031\023\064\032\050\047\030" +
    "\051\023\052\022\063\065\064\034\110\264\144\044\146" +
    "\060\150\057\001\001\000\010\111\273\112\272\114\266" +
    "\001\001\000\002\001\001\000\004\113\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\114\277\001\001\000\002" +
    "\001\001\000\004\106\u0195\001\001\000\002\001\001\000" +
    "\004\106\u0185\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\176\u0175\001\001\000\016\134\u0171\135\246\136" +
    "\245\137\243\140\u0170\201\250\001\001\000\002\001\001" +
    "\000\012\074\321\075\316\076\315\101\320\001\001\000" +
    "\004\077\u016a\001\001\000\002\001\001\000\004\077\u0166" +
    "\001\001\000\004\077\u0165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\070\300\103\322\105\323\175\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\151\333\152\332\166\331" +
    "\172\325\001\001\000\032\012\376\020\355\023\375\026" +
    "\373\032\370\064\360\144\366\146\060\150\057\154\u0161" +
    "\155\362\175\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\166\347\172\325\001\001\000\002\001\001" +
    "\000\004\153\345\001\001\000\014\074\337\075\316\076" +
    "\315\102\336\104\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\070\300\103\340\105" +
    "\323\175\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\074\337\075\316\076\315\102\336\104\343\001" +
    "\001\000\002\001\001\000\012\151\346\152\332\166\331" +
    "\172\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\167\351\001\001\000\002\001\001" +
    "\000\036\012\376\020\355\023\375\026\373\032\370\064" +
    "\360\144\366\146\060\150\057\154\371\155\362\170\354" +
    "\171\353\175\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\012\376" +
    "\020\355\023\375\026\373\032\370\064\360\144\366\146" +
    "\060\150\057\154\371\155\362\171\u0146\175\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\060\u0124\156" +
    "\u0126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\032\123\144\u010d\146" +
    "\060\150\057\166\u010f\172\325\001\001\000\002\001\001" +
    "\000\004\167\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\032\123\047\u0100\051\023\052\022\063\065\144" +
    "\044\146\060\150\057\001\001\000\002\001\001\000\022" +
    "\032\123\047\u0102\051\023\052\022\063\065\144\044\146" +
    "\060\150\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\163\u0105\175\u0106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\151\u010a\152\332" +
    "\164\u0109\166\331\172\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\032\123\144\u010d\146\060\150\057\166" +
    "\347\172\325\001\001\000\002\001\001\000\004\167\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\u0119\030\u0118\031\u0116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u011d" +
    "\031\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\263\004\041\012\076\020" +
    "\031\023\064\032\050\047\030\051\023\052\022\063\065" +
    "\064\034\110\u0123\144\044\146\060\150\057\001\001\000" +
    "\002\001\001\000\030\012\376\020\355\023\375\026\373" +
    "\032\370\064\360\144\366\146\060\150\057\155\u0145\175" +
    "\361\001\001\000\030\012\376\020\355\023\375\026\373" +
    "\032\370\064\360\144\366\146\060\150\057\155\u0143\175" +
    "\361\001\001\000\002\001\001\000\030\012\376\020\355" +
    "\023\375\026\373\032\370\064\360\144\366\146\060\150" +
    "\057\155\u0140\175\361\001\001\000\004\157\u0135\001\001" +
    "\000\030\012\376\020\355\023\375\026\373\032\370\064" +
    "\360\144\366\146\060\150\057\155\u012e\175\361\001\001" +
    "\000\004\160\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\162\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\376\020\355\023\375\026\373\032\370\064\360\144\366" +
    "\146\060\150\057\155\u013e\175\361\001\001\000\030\012" +
    "\376\020\355\023\375\026\373\032\370\064\360\144\366" +
    "\146\060\150\057\155\u0139\175\361\001\001\000\030\012" +
    "\376\020\355\023\375\026\373\032\370\064\360\144\366" +
    "\146\060\150\057\155\u0136\175\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\376\020\355\023\375" +
    "\026\373\032\370\064\360\144\366\146\060\150\057\155" +
    "\u0138\175\361\001\001\000\002\001\001\000\004\161\u013b" +
    "\001\001\000\030\012\376\020\355\023\375\026\373\032" +
    "\370\064\360\144\366\146\060\150\057\155\u013c\175\361" +
    "\001\001\000\002\001\001\000\004\161\u013d\001\001\000" +
    "\002\001\001\000\004\162\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\376\020\355\023\375\026" +
    "\373\032\370\064\360\144\366\146\060\150\057\155\u0142" +
    "\175\361\001\001\000\002\001\001\000\004\161\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\163\u0148\175\u0106\001\001\000\002\001\001\000" +
    "\004\165\u014c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\173\u0151\001\001\000\004\174\u0155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\167" +
    "\u0162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\074\337\075\316\076\315\102\336\104\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\u016e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\070\300\100\u0173\105\310\175\302\001\001" +
    "\000\016\134\u0171\135\246\136\245\137\243\140\u0174\201" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\177\u0178\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\200\u017b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\071" +
    "\u0188\107\u0187\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\032\123\072\u018b\144\u018a\146" +
    "\060\150\057\001\001\000\004\073\u018f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\032\123\047\u0197\051\023\052\022" +
    "\063\065\144\044\146\060\150\057\001\001\000\004\141" +
    "\u0199\001\001\000\022\032\123\047\u019b\051\023\052\022" +
    "\063\065\144\044\146\060\150\057\001\001\000\010\136" +
    "\u019a\137\243\201\250\001\001\000\002\001\001\000\004" +
    "\141\u019c\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\137\u019f\201\250\001\001\000\002\001\001\000\016" +
    "\133\u01a2\134\251\135\246\136\245\137\243\201\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\135\u01a4" +
    "\136\245\137\243\201\250\001\001\000\002\001\001\000" +
    "\006\033\u01a8\034\u01a7\001\001\000\002\001\001\000\014" +
    "\032\123\035\u01ac\144\u01ab\146\060\150\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u01ae\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\123\144\u01b3\146\060\150\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\055\004\041\012\076" +
    "\020\031\023\064\032\050\047\030\051\023\052\022\063" +
    "\065\064\034\127\u01b7\130\u01b6\144\044\146\060\150\057" +
    "\001\001\000\040\003\055\004\041\012\076\020\031\023" +
    "\064\032\050\047\030\051\023\052\022\063\065\064\034" +
    "\130\u01b8\144\044\146\060\150\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\032\123\052\u01c4\144\u01c3\146\060" +
    "\150\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u01c7\001\001\000" +
    "\002\001\001\000\012\032\123\144\u01c9\146\060\150\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u01cc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\u01d0\044\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u01d3\001\001\000\002" +
    "\001\001\000\004\024\u01d5\001\001\000\002\001\001\000" +
    "\004\024\u01d7\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u01da\001\001\000\004\025\u01dc\001\001\000" +
    "\004\024\u01de\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\u01e1\012" +
    "\076\020\031\023\064\032\050\047\030\051\023\052\022" +
    "\063\065\064\034\144\044\146\060\150\057\001\001\000" +
    "\002\001\001\000\010\014\u01eb\115\u01f0\117\u01f1\001\001" +
    "\000\004\120\u0214\001\001\000\004\120\u0213\001\001\000" +
    "\004\120\u0212\001\001\000\004\120\u0211\001\001\000\004" +
    "\120\u0210\001\001\000\004\120\u020f\001\001\000\004\120" +
    "\u020e\001\001\000\004\120\u020d\001\001\000\002\001\001" +
    "\000\004\120\u020c\001\001\000\004\120\u020b\001\001\000" +
    "\004\116\u0209\001\001\000\004\120\u0207\001\001\000\004" +
    "\015\u01fd\001\001\000\002\001\001\000\004\120\u01fc\001" +
    "\001\000\004\120\u01f4\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u01f8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\016\u0201\032\123\047" +
    "\u0202\051\023\052\022\063\065\144\044\146\060\150\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u0204\001\001\000\012" +
    "\032\123\144\u0206\146\060\150\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0216\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\032\123\047\u021d\051\023\052\022\063\065" +
    "\144\044\146\060\150\057\001\001\000\004\066\u021c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\032\123\047\u021f\051\023\052" +
    "\022\063\065\144\044\146\060\150\057\001\001\000\006" +
    "\066\u0222\067\u0221\001\001\000\022\032\123\047\u0224\051" +
    "\023\052\022\063\065\144\044\146\060\150\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u0227\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\123\144" +
    "\u022a\146\060\150\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u022d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u0231\001\001" +
    "\000\002\001\001\000\012\032\123\144\u0233\146\060\150" +
    "\057\001\001\000\002\001\001\000\012\032\123\144\u0235" +
    "\146\060\150\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\013\u0238\032\123\047\u0239\051\023\052\022" +
    "\063\065\144\044\146\060\150\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\115\u023b\117\u01f1\001\001" +
    "\000\004\015\u023c\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\032\123\144\u023f\146\060\150\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\122\u0258\210\u0254" +
    "\214\u0252\225\u0256\226\u0255\227\u0253\001\001\000\002\001" +
    "\001\000\006\175\u0244\224\u0248\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\123\144\u024a\146\060\150" +
    "\057\001\001\000\002\001\001\000\012\175\u0244\222\u024d" +
    "\223\u024c\224\u0247\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\175\u0244\223\u024f\224\u0247\001\001\000\002" +
    "\001\001\000\020\032\123\144\u0279\146\060\150\057\202" +
    "\u027c\203\u027a\206\u027d\001\001\000\002\001\001\000\012" +
    "\122\u0258\210\u0254\226\u0276\227\u0253\001\001\000\002\001" +
    "\001\000\006\122\u0258\227\u0275\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\215\u0270\001\001\000\004\234" +
    "\u026e\001\001\000\002\001\001\000\020\032\123\144\u025e" +
    "\146\060\150\057\217\u0262\230\u0261\231\u025c\001\001\000" +
    "\002\001\001\000\004\232\u0263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\032\123\144\u025e\146\060\150\057\217\u0262\230\u026d\231" +
    "\u025c\001\001\000\006\233\u0266\234\u0268\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\032\123\144\u025e\146\060" +
    "\150\057\217\u0262\230\u026c\231\u025c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\216\u0272" +
    "\001\001\000\002\001\001\000\004\215\u0274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\234\u0278\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\204\u028c\001\001" +
    "\000\002\001\001\000\004\211\u027e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\212\u0280\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\213\u0283\214\u0284\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\213\u0286" +
    "\214\u0284\001\001\000\002\001\001\000\004\207\u0288\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\205\u028f\001" +
    "\001\000\020\032\123\144\u0279\146\060\150\057\202\u0290" +
    "\203\u027a\206\u027d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\u0293\122\003\220\004" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    try {
        BufferedReader buffered = new BufferedReader(new FileReader(MiniSql.ubicacionArchivo));
        analizadorFlex = new Lexemas(buffered);
    } catch (IOException ex) {
        ex.printStackTrace();
    }

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return analizadorFlex.next_token(); 

    }


Lexemas analizadorFlex = null;

public void syntax_error(Symbol cur_token){
    Errores.SyntaxErrorCup((MyToken) cur_token.value);
}

public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        m.append(" " + s.value.toString());
        if (s.left >= 0) {                
            m.append(" in line "+(s.left));
            if (s.right >= 0)
                m.append(", column "+(s.right));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= SELECT1 FIN_AN INICIAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIAL ::= INSERT0 INICIAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIAL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FIN_AN ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN_AN",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FIN_AN ::= GO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN_AN",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OBJECT ::= Identificador OBJECT1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",123, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OBJECT1 ::= Punto Identificador OBJECT2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT1",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OBJECT1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT1",124, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OBJECT2 ::= Punto Identificador OBJECT3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT2",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OBJECT2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT2",125, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OBJECT3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT3",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OBJECT3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT3",126, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SH_COND ::= SH_COND1 SH_COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SH_COND1 ::= MATCH ParentesisAbrir GSP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND1",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SH_COND1 ::= SH_CONDWM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND1",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SH_COND2 ::= AND SH_COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND2",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SH_COND2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND2",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PREDICATE ::= PREDICATE1 PREDICATE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PREDICATE ::= CONTAINS ParentesisAbrir PREDICATE7 Coma PREDICATE8 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PREDICATE ::= FREETEXT ParentesisAbrir PREDICATE7 Coma PREDICATE9 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PREDICATE1 ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PREDICATE1 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PREDICATE1 ::= CASEW 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PREDICATE1 ::= AGG_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PREDICATE1 ::= STR_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PREDICATE1 ::= DT_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PREDICATE1 ::= CONV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PREDICATE1 ::= OTH_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PREDICATE2 ::= COMPARE_OPR PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PREDICATE2 ::= NOT PREDICATE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PREDICATE2 ::= LIKE PREDICATE1 PREDICATE6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PREDICATE2 ::= BETWEEN PREDICATE1 AND PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PREDICATE2 ::= IS PREDICATE4 NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PREDICATE2 ::= IN PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PREDICATE3 ::= LIKE PREDICATE1 PREDICATE6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PREDICATE3 ::= BETWEEN PREDICATE1 AND PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PREDICATE3 ::= IN PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PREDICATE4 ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE4",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PREDICATE4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE4",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PREDICATE5 ::= Coma PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE5",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PREDICATE5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE5",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PREDICATE6 ::= ESCAPE DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE6",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PREDICATE6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE6",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PREDICATE7 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE7",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PREDICATE7 ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE7",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PREDICATE8 ::= SH_COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE8",114, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PREDICATE9 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE9",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PREDICATE9 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE9",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SH_CONDWM ::= SH_CONDWM4 PREDICATE SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SH_CONDWM ::= ParentesisAbrir SH_CONDWM ParentesisCerrar SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SH_CONDWM1 ::= OR SH_CONDWM2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM1",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SH_CONDWM1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM1",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SH_CONDWM2 ::= NOT SH_CONDWM3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SH_CONDWM2 ::= SH_CONDWM3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SH_CONDWM3 ::= PREDICATE SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM3",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SH_CONDWM3 ::= ParentesisAbrir SH_CONDWM ParentesisCerrar SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM3",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SH_CONDWM4 ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM4",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SH_CONDWM4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM4",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // GSP ::= Identificador GSP1 Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // GSP1 ::= Menor Menos ParentesisAbrir Identificador ParentesisCerrar Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP1",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // GSP1 ::= Menos ParentesisAbrir Identificador ParentesisCerrar Menos Mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP1",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SEXP ::= SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SEXP2 ::= Mas SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SEXP2 ::= Menos SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SEXP2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SEXP3 ::= SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP3",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SEXP4 ::= Multiplicacion SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SEXP4 ::= Division SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SEXP4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SEXP5 ::= ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SEXP5 ::= DatoEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SEXP5 ::= DatoFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SEXP5 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SEXP5 ::= AGG_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DML ::= DML2 DML3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DML",128, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DML2 ::= COLNAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DML2",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DML2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DML2",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DML3 ::= AS Identificador DML4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DML3",130, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DML3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DML3",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DML4 ::= Coma DML 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DML4",131, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DML4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DML4",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COLNAME ::= Identificador Punto COLNAME1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLNAME",132, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COLNAME1 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLNAME1",133, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COLNAME1 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLNAME1",133, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OUTCL ::= OUTPUT DML OUTCL1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTCL",134, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OUTCL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTCL",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OUTCL1 ::= INTO OUTCL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTCL1",135, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OUTCL1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTCL1",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OUTCL2 ::= Arroba Identificador OUTCL3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTCL2",136, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OUTCL2 ::= Identificador OUTCL3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTCL2",136, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OUTCL3 ::= COLST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTCL3",137, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OUTCL3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTCL3",137, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COLST ::= ParentesisAbrir COLST1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLST",138, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COLST1 ::= Identificador COLST2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLST1",139, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COLST2 ::= Coma COLST1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLST2",140, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COLST2 ::= ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLST2",140, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR_INSERT ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_INSERT",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR_INSERT ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_INSERT",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR_INSERT ::= DatoBit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_INSERT",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INSERT0 ::= INSERT INSERT1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT0",142, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSERT1 ::= TOP ParentesisAbrir SEXP ParentesisCerrar INSERT2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT1",143, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSERT1 ::= INSERT3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT1",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSERT2 ::= PERCENT INSERT3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT2",144, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSERT2 ::= INSERT3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT2",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSERT3 ::= INTO INSERT4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT3",145, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INSERT3 ::= INSERT4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT3",145, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSERT4 ::= OBJECT INSERT5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT4",146, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSERT5 ::= COLST INSERT6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT5",147, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSERT5 ::= INSERT6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT5",147, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INSERT6 ::= OUTCL INSERT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT6",148, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INSERT6 ::= INSERT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT6",148, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INSERT7 ::= VALUES ParentesisAbrir INSERT8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT7",149, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INSERT7 ::= SELECT1 INSERT9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT7",149, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INSERT7 ::= DEFAULT VALUES INSERT9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT7",149, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INSERT8 ::= INSERT10 INSERT11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT8",150, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INSERT10 ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT10",151, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INSERT10 ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT10",151, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INSERT10 ::= EXPR_INSERT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT10",151, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INSERT11 ::= Coma INSERT8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT11",152, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INSERT11 ::= ParentesisCerrar INSERT12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT11",152, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSERT12 ::= Coma ParentesisAbrir INSERT8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT12",153, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INSERT12 ::= INSERT9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT12",153, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSERT9 ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT9",154, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INSERT9 ::= GO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERT9",154, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SELIST ::= SELIST1 SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SELIST ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SELIST ::= Arroba Identificador Igual SELIST1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SELIST1 ::= Identificador SELIST2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SELIST1 ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SELIST1 ::= AGG_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SELIST1 ::= STR_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SELIST1 ::= DT_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SELIST1 ::= CONV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SELIST1 ::= CASEW 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SELIST2 ::= Punto SELIST3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SELIST2 ::= Igual SELIST6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SELIST2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SELIST3 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SELIST3 ::= Identificador SELIST7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SELIST5 ::= AS Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SELIST5 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SELIST5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SELIST6 ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SELIST7 ::= Punto Identificador SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SELIST7 ::= SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONV ::= CAST ParentesisAbrir CONV1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONV ::= CONVERT ParentesisAbrir CONV2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONV1 ::= EXPRESSION AS DATATYPE CONV3 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONV2 ::= DATATYPE CONV3 CONV4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONV3 ::= ParentesisAbrir DatoEntero ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV3",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONV3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV3",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONV4 ::= EXPRESSION CONV5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV4",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONV5 ::= Coma SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV5",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONV5 ::= ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV5",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DT_FN ::= CURRENT_TIMESTAMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DT_FN ::= DAY ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DT_FN ::= MONTH ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DT_FN ::= YEAR ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DT_FN ::= SET LANGUAGE DT_FN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DT_FN1 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DT_FN1 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DT_FN2 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DT_FN2 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // STR_FN ::= LOWER ParentesisAbrir STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // STR_FN ::= TRANSLATE ParentesisAbrir STR_FN1 Coma STR_FN1 Coma STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // STR_FN ::= UPPER ParentesisAbrir STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // STR_FN ::= CHAR ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // STR_FN ::= LEFT ParentesisAbrir STR_FN1 Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // STR_FN ::= TRIM ParentesisAbrir STR_FN1 STR_FN2 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // STR_FN ::= NCHAR ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // STR_FN ::= RIGHT ParentesisAbrir STR_FN1 Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // STR_FN ::= SPACE ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // STR_FN ::= SUBSTRING ParentesisAbrir STR_FN1 Coma SEXP Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // STR_FN1 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // STR_FN1 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // STR_FN1 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // STR_FN2 ::= FROM STR_FN1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // STR_FN2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OTH_FN ::= NEXT VALUE FOR Identificador OTH_FN1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OTH_FN ::= SYSTEM_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OTH_FN ::= SESSION_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OTH_FN ::= NULLIF ParentesisAbrir EXPRESSION Coma EXPRESSION ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OTH_FN1 ::= Punto Identificador OTH_FN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OTH_FN1 ::= OTH_FN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OTH_FN2 ::= Punto Identificador OTH_FN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OTH_FN2 ::= OTH_FN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OTH_FN3 ::= OVER ORDER BY ORDERB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // AGG_FN ::= AVG ParentesisAbrir SEL_AVG ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // AGG_FN ::= COUNT ParentesisAbrir SEL_COUNT ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // AGG_FN ::= MAX ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // AGG_FN ::= MIN ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // AGG_FN ::= SUM ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SEL_AVG ::= SEL_AVG1 SEL_AVG2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SEL_AVG1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SEL_AVG1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SEL_AVG1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SEL_AVG2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SEL_AVG2 ::= Identificador SEL_AVG3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SEL_AVG3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SEL_AVG3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SEL_COUNT ::= SEL_COUNT1 SEL_COUNT2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SEL_COUNT1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SEL_COUNT1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SEL_COUNT1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SEL_COUNT2 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SEL_COUNT2 ::= Identificador SEL_COUNT3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SEL_COUNT2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SEL_COUNT3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SEL_COUNT3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SEL_AGR ::= SEL_AGR1 SEL_AGR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SEL_AGR1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SEL_AGR1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SEL_AGR1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SEL_AGR2 ::= Identificador SEL_AGR3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SEL_AGR2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SEL_AGR3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SEL_AGR3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXPRESSION ::= SEXP EXPRESSION1 EXPRESSION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXPRESSION ::= EXPRESSION2 SUM_OPR EXPRESSION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXPRESSION ::= NOT_OPR EXPRESSION EXPRESSION4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXPRESSION ::= EXPRESSION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXPRESSION1 ::= AR_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // EXPRESSION1 ::= COMPARE_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // EXPRESSION1 ::= SUM_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // EXPRESSION2 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // EXPRESSION2 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // EXPRESSION3 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // EXPRESSION3 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // EXPRESSION3 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // EXPRESSION4 ::= COMPARE_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // EXPRESSION4 ::= LOGIC_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // BIN_OPR ::= AR_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // BIN_OPR ::= ASIG_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // BIN_OPR ::= BIT_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // BIN_OPR ::= COMPARE_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // BIN_OPR ::= LOGIC_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // AR_OPR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // AR_OPR ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // AR_OPR ::= Division 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // AR_OPR ::= Modulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // SUM_OPR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUM_OPR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ASIG_OPR ::= Igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_OPR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // BIT_OPR ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIT_OPR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // BIT_OPR ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIT_OPR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NOT_OPR ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOT_OPR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // COMPARE_OPR ::= Mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // COMPARE_OPR ::= Menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // COMPARE_OPR ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // COMPARE_OPR ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // COMPARE_OPR ::= Diferente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // LOGIC_OPR ::= BETWEEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // LOGIC_OPR ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // LOGIC_OPR ::= LIKE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CASEW ::= CASE CASEW1 
            {
              Object RESULT =null;
		 System.out.println("termino case when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CASEW1 ::= EXPRESSION CASEW2 
            {
              Object RESULT =null;
		 System.out.println("exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW1",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CASEW1 ::= CASEW2 
            {
              Object RESULT =null;
		 System.out.println("casew2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW1",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CASEW2 ::= WHEN EXPRESSION THEN EXPRESSION CASEW3 
            {
              Object RESULT =null;
		 System.out.println("when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CASEW3 ::= ELSE EXPRESSION END 
            {
              Object RESULT =null;
		 System.out.println("else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CASEW3 ::= CASEW2 
            {
              Object RESULT =null;
		 System.out.println("mas when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CASEW3 ::= END 
            {
              Object RESULT =null;
		 System.out.println("end case"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ROWSET ::= OPENDATASOURCE ParentesisAbrir DatoString Coma DatoString ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROWSET",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ROWSET ::= OPENQUERY ParentesisAbrir Identificador Coma DatoString ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROWSET",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // SAM_CL ::= TABLESAMPLE ParentesisAbrir SAM_CL1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // SAM_CL1 ::= SEXP SAM_CL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL1",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // SAM_CL2 ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // SAM_CL2 ::= ROWS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // SAM_CL2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // JOIN_TYPE ::= JOIN_TYPE1 JOIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // JOIN_TYPE1 ::= INNER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // JOIN_TYPE1 ::= JOIN_TYPE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // JOIN_TYPE1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // JOIN_TYPE2 ::= LEFT JOIN_TYPE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // JOIN_TYPE2 ::= RIGHT JOIN_TYPE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // JOIN_TYPE2 ::= FULL JOIN_TYPE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // JOIN_TYPE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // JOIN_TYPE3 ::= OUTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // JOIN_TYPE3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // JOINTB ::= TB_SOURCE JOINTB1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // JOINTB ::= ParentesisAbrir JOIN ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // JOINTB1 ::= JOIN_TYPE JOINTB3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB1",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // JOINTB1 ::= CROSS Coma JOIN JOINTB4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB1",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // JOINTB1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB1",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // JOINTB2 ::= JOIN_TYPE JOINTB3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // JOINTB2 ::= CROSS Coma JOIN JOINTB4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // JOINTB3 ::= TB_SOURCE ON SH_COND JOINTB4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB3",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // JOINTB4 ::= JOINTB2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB4",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // JOINTB4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB4",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TB_SOURCE ::= OBJECT TB_SOURCE1 TB_SOURCE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TB_SOURCE ::= ROWSET TB_SOURCE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TB_SOURCE ::= Arroba Identificador TB_SOURCE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TB_SOURCE1 ::= AS Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE1",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TB_SOURCE1 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE1",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TB_SOURCE1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE1",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TB_SOURCE2 ::= SAM_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE2",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TB_SOURCE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE2",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ORDERB ::= SELIST ORDER1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDERB",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ORDER1 ::= ORDER2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER1",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ORDER1 ::= Coma ORDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER1",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ORDER2 ::= COLLATE ORDER3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER2",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ORDER2 ::= ORDER4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER2",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ORDER3 ::= Identificador ORDER4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER3",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ORDER4 ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER4",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ORDER4 ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER4",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ORDER4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER4",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // DATATYPE ::= Identificador DATATYPE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // DATATYPE ::= DATATYPE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // DATATYPE2 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE2",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // DATATYPE3 ::= BIT DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // DATATYPE3 ::= INT DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // DATATYPE3 ::= INTEGER DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // DATATYPE3 ::= FLOAT DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // DATATYPE3 ::= VARCHAR DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // DATATYPE3 ::= DATE DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // DATATYPE3 ::= REAL DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // DATATYPE3 ::= DECIMAL DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // DATATYPE3 ::= NUMERIC DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // DATATYPE3 ::= SMALLINT DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // DATATYPE3 ::= TIME DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // DATATYPE3 ::= CHAR DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // DATATYPE3 ::= NCHAR DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // DATATYPE4 ::= ParentesisAbrir DatoEntero DATATYPE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE4",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // DATATYPE4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE4",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // DATATYPE5 ::= Coma DatoEntero ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE5",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // DATATYPE5 ::= ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE5",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // SELECT1 ::= SELECT SELECT2 FIN_AN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT1",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // SELECT2 ::= SELECT3 SELECT4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT2",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // SELECT3 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT3",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // SELECT3 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT3",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // SELECT3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT3",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // SELECT4 ::= TOP SELECT5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT4",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // SELECT4 ::= SELECT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT4",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // SELECT5 ::= ParentesisAbrir SEXP ParentesisCerrar SELECT6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT5",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // SELECT6 ::= PERCENT SELECT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT6",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // SELECT6 ::= SELECT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT6",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // SELECT7 ::= SELIST SELECT20 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT7",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // SELECT20 ::= Coma SELECT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT20",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // SELECT20 ::= SELECT8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT20",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // SELECT8 ::= INTO SELECT9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT8",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // SELECT8 ::= SELECT11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT8",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // SELECT9 ::= OBJECT SELECT11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT9",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // SELECT11 ::= FROM JOINTB SELECT17 
            {
              Object RESULT =null;
		 System.out.println("from"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT11",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // SELECT11 ::= SELECT12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT11",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // SELECT12 ::= WHERE SH_COND SELECT13 
            {
              Object RESULT =null;
		 System.out.println("where"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT12",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // SELECT12 ::= SELECT13 
            {
              Object RESULT =null;
		 System.out.println("where nel"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT12",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // SELECT13 ::= GROUP BY EXPRESSION SELECT18 SELECT14 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT13",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // SELECT13 ::= SELECT14 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT13",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // SELECT14 ::= HAVING SH_COND SELECT15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT14",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // SELECT14 ::= SELECT15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT14",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // SELECT15 ::= ORDER BY ORDERB 
            {
              Object RESULT =null;
		 System.out.println("order by"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT15",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // SELECT15 ::= FIN_AN 
            {
              Object RESULT =null;
		 System.out.println("order by vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT15",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // SELECT17 ::= Coma JOINTB SELECT17 
            {
              Object RESULT =null;
		 System.out.println("jointb"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT17",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // SELECT17 ::= SELECT12 
            {
              Object RESULT =null;
		 System.out.println("jointb ignore"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT17",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // SELECT18 ::= Coma EXPRESSION SELECT18 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT18",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // SELECT18 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT18",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
