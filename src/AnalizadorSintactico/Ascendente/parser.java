
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorSintactico.Ascendente;

import java_cup.runtime.*;
import AnalizadorSintactico.Ascendente.Lexemas;
import MiniSql.MiniSql;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import MiniSql.Errores;
import AnalizadorLexico.MyToken;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\002\002\004\000\002\200\003\000\002\200" +
    "\003\000\002\174\004\000\002\175\005\000\002\175\002" +
    "\000\002\176\005\000\002\176\002\000\002\177\004\000" +
    "\002\177\002\000\002\150\004\000\002\151\006\000\002" +
    "\151\003\000\002\152\004\000\002\153\004\000\002\153" +
    "\010\000\002\153\010\000\002\154\003\000\002\154\003" +
    "\000\002\154\003\000\002\154\003\000\002\154\003\000" +
    "\002\154\003\000\002\154\003\000\002\154\003\000\002" +
    "\155\004\000\002\155\004\000\002\155\005\000\002\155" +
    "\006\000\002\155\005\000\002\155\005\000\002\156\005" +
    "\000\002\156\006\000\002\156\005\000\002\157\003\000" +
    "\002\157\002\000\002\160\005\000\002\160\002\000\002" +
    "\161\004\000\002\161\002\000\002\162\003\000\002\162" +
    "\003\000\002\163\003\000\002\164\003\000\002\164\004" +
    "\000\002\165\005\000\002\165\006\000\002\166\004\000" +
    "\002\166\002\000\002\167\004\000\002\167\003\000\002" +
    "\170\004\000\002\170\006\000\002\171\003\000\002\171" +
    "\002\000\002\172\005\000\002\173\010\000\002\173\010" +
    "\000\002\143\004\000\002\144\005\000\002\144\005\000" +
    "\002\144\002\000\002\145\004\000\002\146\005\000\002" +
    "\146\005\000\002\146\002\000\002\147\005\000\002\147" +
    "\003\000\002\147\003\000\002\147\004\000\002\147\003" +
    "\000\002\002\004\000\002\002\003\000\002\002\006\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\003\000\002\005\004\000\002\006\004\000" +
    "\002\006\003\000\002\006\002\000\002\007\003\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\012\007\000\002\013\005\000\002\014\005" +
    "\000\002\014\002\000\002\015\004\000\002\016\004\000" +
    "\002\016\003\000\002\017\003\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\005\000\002\020" +
    "\003\000\002\020\004\000\002\021\004\000\002\021\003" +
    "\000\002\022\006\000\002\022\012\000\002\022\006\000" +
    "\002\022\006\000\002\022\010\000\002\022\007\000\002" +
    "\022\006\000\002\022\010\000\002\022\006\000\002\022" +
    "\012\000\002\023\004\000\002\023\003\000\002\023\003" +
    "\000\002\024\004\000\002\024\002\000\002\025\007\000" +
    "\002\025\003\000\002\025\003\000\002\025\010\000\002" +
    "\026\005\000\002\026\003\000\002\027\005\000\002\027" +
    "\003\000\002\030\006\000\002\031\006\000\002\031\006" +
    "\000\002\031\006\000\002\031\006\000\002\031\006\000" +
    "\002\032\004\000\002\033\003\000\002\033\003\000\002" +
    "\033\002\000\002\034\003\000\002\034\004\000\002\035" +
    "\004\000\002\035\002\000\002\036\004\000\002\037\003" +
    "\000\002\037\003\000\002\037\002\000\002\040\003\000" +
    "\002\040\004\000\002\040\003\000\002\041\004\000\002" +
    "\041\002\000\002\042\004\000\002\043\003\000\002\043" +
    "\003\000\002\043\002\000\002\044\004\000\002\044\003" +
    "\000\002\045\004\000\002\045\002\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\002\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\050" +
    "\003\000\002\050\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\061\003" +
    "\000\002\055\003\000\002\056\003\000\002\056\003\000" +
    "\002\062\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\063\004" +
    "\000\002\064\004\000\002\064\003\000\002\065\007\000" +
    "\002\066\005\000\002\066\003\000\002\066\003\000\002" +
    "\067\010\000\002\067\010\000\002\070\006\000\002\071" +
    "\004\000\002\072\003\000\002\072\003\000\002\072\002" +
    "\000\002\073\004\000\002\074\003\000\002\074\003\000" +
    "\002\074\002\000\002\075\004\000\002\075\004\000\002" +
    "\075\004\000\002\075\002\000\002\076\003\000\002\076" +
    "\002\000\002\077\004\000\002\077\005\000\002\100\004" +
    "\000\002\100\006\000\002\100\002\000\002\101\004\000" +
    "\002\101\006\000\002\102\006\000\002\103\003\000\002" +
    "\103\002\000\002\104\005\000\002\104\004\000\002\104" +
    "\005\000\002\105\004\000\002\105\003\000\002\105\002" +
    "\000\002\106\003\000\002\106\002\000\002\107\004\000" +
    "\002\110\003\000\002\110\004\000\002\111\004\000\002" +
    "\111\003\000\002\112\004\000\002\113\003\000\002\113" +
    "\003\000\002\114\004\000\002\114\003\000\002\115\004" +
    "\000\002\116\004\000\002\116\004\000\002\116\004\000" +
    "\002\116\004\000\002\116\004\000\002\116\004\000\002" +
    "\116\004\000\002\116\004\000\002\116\004\000\002\116" +
    "\004\000\002\116\004\000\002\116\004\000\002\116\004" +
    "\000\002\117\005\000\002\117\002\000\002\120\005\000" +
    "\002\120\003\000\002\121\005\000\002\122\004\000\002" +
    "\123\003\000\002\123\003\000\002\123\002\000\002\124" +
    "\004\000\002\124\003\000\002\125\006\000\002\126\004" +
    "\000\002\126\003\000\002\127\004\000\002\142\004\000" +
    "\002\142\003\000\002\130\004\000\002\130\003\000\002" +
    "\131\004\000\002\132\005\000\002\132\003\000\002\133" +
    "\005\000\002\133\003\000\002\134\007\000\002\134\003" +
    "\000\002\135\005\000\002\135\003\000\002\136\005\000" +
    "\002\136\002\000\002\137\005\000\002\137\003\000\002" +
    "\140\005\000\002\140\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u023f\000\004\224\005\001\002\000\004\002\u0241\001" +
    "\002\000\132\005\011\011\ufeef\024\ufeef\042\ufeef\050\ufeef" +
    "\064\006\112\ufeef\117\ufeef\120\ufeef\133\ufeef\140\ufeef\150" +
    "\ufeef\165\ufeef\214\ufeef\231\ufeef\244\ufeef\267\ufeef\323\ufeef" +
    "\327\ufeef\341\ufeef\345\ufeef\360\ufeef\376\ufeef\u0100\ufeef\u0105" +
    "\ufeef\u010d\ufeef\u0110\ufeef\u0111\ufeef\u0112\ufeef\u0116\ufeef\u0118\ufeef" +
    "\u0119\ufeef\u0120\ufeef\u0123\ufeef\u0137\ufeef\u013b\ufeef\u013c\ufeef\u013e" +
    "\ufeef\u0140\ufeef\u0143\ufeef\u0153\ufeef\u0154\ufeef\u0158\ufeef\u015c\ufeef" +
    "\001\002\000\126\011\ufef0\024\ufef0\042\ufef0\050\ufef0\112" +
    "\ufef0\117\ufef0\120\ufef0\133\ufef0\140\ufef0\150\ufef0\165\ufef0" +
    "\214\ufef0\231\ufef0\244\ufef0\267\ufef0\323\ufef0\327\ufef0\341" +
    "\ufef0\345\ufef0\360\ufef0\376\ufef0\u0100\ufef0\u0105\ufef0\u010d\ufef0" +
    "\u0110\ufef0\u0111\ufef0\u0112\ufef0\u0116\ufef0\u0118\ufef0\u0119\ufef0\u0120" +
    "\ufef0\u0123\ufef0\u0137\ufef0\u013b\ufef0\u013c\ufef0\u013e\ufef0\u0140\ufef0" +
    "\u0143\ufef0\u0153\ufef0\u0154\ufef0\u0158\ufef0\u015c\ufef0\001\002\000" +
    "\126\011\uff5a\024\023\042\027\050\057\112\uff5a\117\uff5a" +
    "\120\uff5a\133\uff5a\140\040\150\032\165\uff5a\214\066\231" +
    "\072\244\050\267\uff5a\323\051\327\uff5a\341\016\345\021" +
    "\360\015\376\017\u0100\060\u0105\065\u010d\024\u0110\070\u0111" +
    "\035\u0112\034\u0116\071\u0118\033\u0119\022\u0120\053\u0123\067" +
    "\u0137\037\u013b\063\u013c\044\u013e\042\u0140\056\u0143\064\u0153" +
    "\uff5a\u0154\uff5a\u0158\043\u015c\030\001\002\000\006\327\013" +
    "\u0153\014\001\002\000\126\011\ufef1\024\ufef1\042\ufef1\050" +
    "\ufef1\112\ufef1\117\ufef1\120\ufef1\133\ufef1\140\ufef1\150\ufef1" +
    "\165\ufef1\214\ufef1\231\ufef1\244\ufef1\267\ufef1\323\ufef1\327" +
    "\ufef1\341\ufef1\345\ufef1\360\ufef1\376\ufef1\u0100\ufef1\u0105\ufef1" +
    "\u010d\ufef1\u0110\ufef1\u0111\ufef1\u0112\ufef1\u0116\ufef1\u0118\ufef1\u0119" +
    "\ufef1\u0120\ufef1\u0123\ufef1\u0137\ufef1\u013b\ufef1\u013c\ufef1\u013e\ufef1" +
    "\u0140\ufef1\u0143\ufef1\u0153\ufef1\u0154\ufef1\u0158\ufef1\u015c\ufef1\001" +
    "\002\000\004\002\ufef3\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\u0158\u023e\001\002\000" +
    "\004\u0158\u0237\001\002\000\004\u0158\u0230\001\002\000\004" +
    "\u0141\u01bf\001\002\000\004\u0158\u022b\001\002\000\004\u0158" +
    "\u0228\001\002\000\034\150\032\266\u021a\323\051\u0100\060" +
    "\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u013e\042\u0140" +
    "\163\u0158\043\u015c\123\001\002\000\004\u0158\u0217\001\002" +
    "\000\036\011\074\012\uffa9\032\uffa9\062\uffa9\112\uffa9\117" +
    "\uffa9\120\uffa9\133\uffa9\165\uffa9\267\uffa9\327\uffa9\u0140\075" +
    "\u0153\uffa9\u0154\uffa9\001\002\000\036\011\074\012\uffa9\032" +
    "\uffa9\062\uffa9\112\uffa9\117\uffa9\120\uffa9\133\uffa9\165\uffa9" +
    "\267\uffa9\327\uffa9\u0140\075\u0153\uffa9\u0154\uffa9\001\002\000" +
    "\004\u0158\u01e2\001\002\000\004\u0140\u01df\001\002\000\036" +
    "\011\074\012\uffa9\032\uffa9\062\uffa9\112\uffa9\117\uffa9\120" +
    "\uffa9\133\uffa9\165\uffa9\267\uffa9\327\uffa9\u0140\075\u0153\uffa9" +
    "\u0154\uffa9\001\002\000\052\016\uff42\126\uff42\141\uff42\150" +
    "\uff42\323\uff42\u0100\uff42\u0105\uff42\u0110\uff42\u0111\uff42\u013b\uff42" +
    "\u013c\uff42\u013e\uff42\u0140\uff42\u0146\uff42\u014a\uff42\u014c\uff42\u014d" +
    "\uff42\u014f\uff42\u0158\uff42\u015c\uff42\001\002\000\004\u0158\u01d8" +
    "\001\002\000\004\u0158\u01d1\001\002\000\004\u0158\u01ce\001" +
    "\002\000\036\011\074\012\uffa9\032\uffa9\062\uffa9\112\uffa9" +
    "\117\uffa9\120\uffa9\133\uffa9\165\uffa9\267\uffa9\327\uffa9\u0140" +
    "\075\u0153\uffa9\u0154\uffa9\001\002\000\004\u0158\u01ca\001\002" +
    "\000\004\u0158\u01c5\001\002\000\026\u0141\u01bf\u0142\u01ba\u0143" +
    "\u01b8\u0144\u01bb\u0145\u01c0\u0146\171\u014a\173\u014c\174\u014d\167" +
    "\u014f\176\001\002\000\072\011\uff56\012\uff56\016\uff56\032" +
    "\uff56\062\uff56\071\uff56\072\uff56\112\uff56\117\uff56\120\uff56" +
    "\126\uff56\133\uff56\141\uff56\165\uff56\242\uff56\266\uff56\267" +
    "\uff56\327\uff56\u0140\uff56\u0141\uff56\u0146\uff56\u014a\uff56\u014c\uff56" +
    "\u014d\uff56\u014f\uff56\u0153\uff56\u0154\uff56\u0159\uff56\001\002\000" +
    "\024\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063" +
    "\u013c\044\u0158\043\u015c\123\001\002\000\120\007\uffbd\011" +
    "\uffbd\012\uffbd\016\uffbd\032\uffbd\062\uffbd\071\uffbd\072\uffbd" +
    "\074\uffbd\112\uffbd\117\uffbd\120\uffbd\126\uffbd\133\uffbd\134" +
    "\uffbd\141\uffbd\150\uffbd\164\uffbd\165\uffbd\170\uffbd\242\uffbd" +
    "\266\uffbd\267\uffbd\327\uffbd\333\uffbd\u0140\uffbd\u0141\uffbd\u0142" +
    "\uffbd\u0143\uffbd\u0144\uffbd\u0145\uffbd\u0146\uffbd\u014a\uffbd\u014c\uffbd" +
    "\u014d\uffbd\u014f\uffbd\u0153\uffbd\u0154\uffbd\u0159\uffbd\001\002\000" +
    "\062\011\074\012\uffa9\032\uffa9\062\uffa9\112\uffa9\117\uffa9" +
    "\120\uffa9\133\uffa9\165\uffa9\267\uffa9\327\uffa9\u0140\075\u0141" +
    "\uffbb\u0142\uffbb\u0143\uffbb\u0144\uffbb\u0145\uffbb\u0146\uffbb\u014a\uffbb" +
    "\u014c\uffbb\u014d\uffbb\u014f\uffbb\u0153\uffa9\u0154\uffa9\001\002\000" +
    "\006\327\ufeed\u0153\ufeed\001\002\000\006\327\ufef2\u0153\ufef2" +
    "\001\002\000\004\u0158\u01af\001\002\000\004\u0158\u01a3\001" +
    "\002\000\024\112\255\117\254\120\251\133\246\165\256" +
    "\267\242\327\ufeda\u0153\ufeda\u0154\253\001\002\000\004\u0158" +
    "\237\001\002\000\120\007\uffc0\011\uffc0\012\uffc0\016\uffc0" +
    "\032\uffc0\062\uffc0\071\uffc0\072\uffc0\074\uffc0\112\uffc0\117" +
    "\uffc0\120\uffc0\126\uffc0\133\uffc0\134\uffc0\141\uffc0\150\uffc0" +
    "\164\uffc0\165\uffc0\170\uffc0\242\uffc0\266\uffc0\267\uffc0\327" +
    "\uffc0\333\uffc0\u0140\uffc0\u0141\uffc0\u0142\uffc0\u0143\232\u0144\230" +
    "\u0145\uffc0\u0146\uffc0\u014a\uffc0\u014c\uffc0\u014d\uffc0\u014f\uffc0\u0153" +
    "\uffc0\u0154\uffc0\u0159\uffc0\001\002\000\120\007\uffc4\011\uffc4" +
    "\012\uffc4\016\uffc4\032\uffc4\062\uffc4\071\uffc4\072\uffc4\074" +
    "\uffc4\112\uffc4\117\uffc4\120\uffc4\126\uffc4\133\uffc4\134\uffc4" +
    "\141\uffc4\150\uffc4\164\uffc4\165\uffc4\170\uffc4\242\uffc4\266" +
    "\uffc4\267\uffc4\327\uffc4\333\uffc4\u0140\uffc4\u0141\221\u0142\222" +
    "\u0143\uffc4\u0144\uffc4\u0145\uffc4\u0146\uffc4\u014a\uffc4\u014c\uffc4\u014d" +
    "\uffc4\u014f\uffc4\u0153\uffc4\u0154\uffc4\u0159\uffc4\001\002\000\044" +
    "\011\uffae\012\uffae\032\uffae\062\uffae\112\uffae\117\uffae\120" +
    "\uffae\133\uffae\165\uffae\267\uffae\327\uffae\u0140\uffae\u0141\uff55" +
    "\u014b\206\u0153\uffae\u0154\uffae\u0155\205\001\002\000\072\007" +
    "\uff9c\011\uff9c\012\uff9c\016\uff9c\032\uff9c\062\uff9c\074\uff9c" +
    "\112\uff9c\117\uff9c\120\uff9c\126\uff9c\133\uff9c\134\uff9c\141" +
    "\uff9c\150\uff9c\164\uff9c\165\uff9c\267\uff9c\327\uff9c\u0140\uff9c" +
    "\u0146\uff9c\u014a\uff9c\u014c\uff9c\u014d\uff9c\u014f\uff9c\u0153\uff9c\u0154" +
    "\uff9c\u0159\uff9c\001\002\000\004\u0158\201\001\002\000\036" +
    "\011\074\012\uffa9\032\uffa9\062\uffa9\112\uffa9\117\uffa9\120" +
    "\uffa9\133\uffa9\165\uffa9\267\uffa9\327\uffa9\u0140\075\u0153\uffa9" +
    "\u0154\uffa9\001\002\000\052\016\uff5a\126\uff5a\141\uff5a\150" +
    "\032\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063" +
    "\u013c\044\u013e\042\u0140\163\u0146\uff5a\u014a\uff5a\u014c\uff5a\u014d" +
    "\uff5a\u014f\uff5a\u0158\043\u015c\123\001\002\000\120\007\uffbe" +
    "\011\uffbe\012\uffbe\016\uffbe\032\uffbe\062\uffbe\071\uffbe\072" +
    "\uffbe\074\uffbe\112\uffbe\117\uffbe\120\uffbe\126\uffbe\133\uffbe" +
    "\134\uffbe\141\uffbe\150\uffbe\164\uffbe\165\uffbe\170\uffbe\242" +
    "\uffbe\266\uffbe\267\uffbe\327\uffbe\333\uffbe\u0140\uffbe\u0141\uffbe" +
    "\u0142\uffbe\u0143\uffbe\u0144\uffbe\u0145\uffbe\u0146\uffbe\u014a\uffbe\u014c" +
    "\uffbe\u014d\uffbe\u014f\uffbe\u0153\uffbe\u0154\uffbe\u0159\uffbe\001\002" +
    "\000\032\012\uffb9\032\uffb9\062\uffb9\112\uffb9\117\uffb9\120" +
    "\uffb9\133\uffb9\165\uffb9\267\uffb9\327\uffb9\u0153\uffb9\u0154\uffb9" +
    "\001\002\000\004\u0158\146\001\002\000\004\u0158\141\001" +
    "\002\000\004\u0158\132\001\002\000\004\u0158\113\001\002" +
    "\000\004\u0158\105\001\002\000\004\u0101\100\001\002\000" +
    "\036\011\074\012\uffa9\032\uffa9\062\uffa9\112\uffa9\117\uffa9" +
    "\120\uffa9\133\uffa9\165\uffa9\267\uffa9\327\uffa9\u0140\075\u0153" +
    "\uffa9\u0154\uffa9\001\002\000\004\u0140\077\001\002\000\036" +
    "\011\uffaa\012\uffaa\032\uffaa\062\uffaa\112\uffaa\117\uffaa\120" +
    "\uffaa\133\uffaa\165\uffaa\267\uffaa\327\uffaa\u0140\uffaa\u0153\uffaa" +
    "\u0154\uffaa\001\002\000\036\011\uffb2\012\uffb2\032\uffb2\062" +
    "\uffb2\112\uffb2\117\uffb2\120\uffb2\133\uffb2\165\uffb2\267\uffb2" +
    "\327\uffb2\u0140\uffb2\u0153\uffb2\u0154\uffb2\001\002\000\036\011" +
    "\uffab\012\uffab\032\uffab\062\uffab\112\uffab\117\uffab\120\uffab" +
    "\133\uffab\165\uffab\267\uffab\327\uffab\u0140\uffab\u0153\uffab\u0154" +
    "\uffab\001\002\000\006\u0140\102\u015c\101\001\002\000\004" +
    "\u0140\104\001\002\000\072\007\uff94\011\uff94\012\uff94\016" +
    "\uff94\032\uff94\062\uff94\074\uff94\112\uff94\117\uff94\120\uff94" +
    "\126\uff94\133\uff94\134\uff94\141\uff94\150\uff94\164\uff94\165" +
    "\uff94\267\uff94\327\uff94\u0140\uff94\u0146\uff94\u014a\uff94\u014c\uff94" +
    "\u014d\uff94\u014f\uff94\u0153\uff94\u0154\uff94\u0159\uff94\001\002\000" +
    "\072\007\uff98\011\uff98\012\uff98\016\uff98\032\uff98\062\uff98" +
    "\074\uff98\112\uff98\117\uff98\120\uff98\126\uff98\133\uff98\134" +
    "\uff98\141\uff98\150\uff98\164\uff98\165\uff98\267\uff98\327\uff98" +
    "\u0140\uff98\u0146\uff98\u014a\uff98\u014c\uff98\u014d\uff98\u014f\uff98\u0153" +
    "\uff98\u0154\uff98\u0159\uff98\001\002\000\072\007\uff95\011\uff95" +
    "\012\uff95\016\uff95\032\uff95\062\uff95\074\uff95\112\uff95\117" +
    "\uff95\120\uff95\126\uff95\133\uff95\134\uff95\141\uff95\150\uff95" +
    "\164\uff95\165\uff95\267\uff95\327\uff95\u0140\uff95\u0146\uff95\u014a" +
    "\uff95\u014c\uff95\u014d\uff95\u014f\uff95\u0153\uff95\u0154\uff95\u0159\uff95" +
    "\001\002\000\006\u013e\106\u015c\107\001\002\000\004\u0159" +
    "\uff97\001\002\000\004\u0140\112\001\002\000\004\u0159\111" +
    "\001\002\000\072\007\uff9b\011\uff9b\012\uff9b\016\uff9b\032" +
    "\uff9b\062\uff9b\074\uff9b\112\uff9b\117\uff9b\120\uff9b\126\uff9b" +
    "\133\uff9b\134\uff9b\141\uff9b\150\uff9b\164\uff9b\165\uff9b\267" +
    "\uff9b\327\uff9b\u0140\uff9b\u0146\uff9b\u014a\uff9b\u014c\uff9b\u014d\uff9b" +
    "\u014f\uff9b\u0153\uff9b\u0154\uff9b\u0159\uff9b\001\002\000\004\u0159" +
    "\uff96\001\002\000\032\005\115\064\114\323\uff62\u0100\uff62" +
    "\u0105\uff62\u0110\uff62\u0111\uff62\u013b\uff62\u013c\uff62\u0140\uff62\u0158" +
    "\uff62\u015c\uff62\001\002\000\026\323\uff63\u0100\uff63\u0105\uff63" +
    "\u0110\uff63\u0111\uff63\u013b\uff63\u013c\uff63\u0140\uff63\u0158\uff63\u015c" +
    "\uff63\001\002\000\026\323\uff64\u0100\uff64\u0105\uff64\u0110\uff64" +
    "\u0111\uff64\u013b\uff64\u013c\uff64\u0140\uff64\u0158\uff64\u015c\uff64\001" +
    "\002\000\004\u0159\131\001\002\000\026\323\051\u0100\060" +
    "\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u0140\122\u0158" +
    "\043\u015c\123\001\002\000\004\u0159\uff65\001\002\000\004" +
    "\u0159\uff60\001\002\000\006\u0155\127\u0159\uff5e\001\002\000" +
    "\004\u0140\125\001\002\000\120\007\uffbb\011\uffbb\012\uffbb" +
    "\016\uffbb\032\uffbb\062\uffbb\071\uffbb\072\uffbb\074\uffbb\112" +
    "\uffbb\117\uffbb\120\uffbb\126\uffbb\133\uffbb\134\uffbb\141\uffbb" +
    "\150\uffbb\164\uffbb\165\uffbb\170\uffbb\242\uffbb\266\uffbb\267" +
    "\uffbb\327\uffbb\333\uffbb\u0140\uffbb\u0141\uffbb\u0142\uffbb\u0143\uffbb" +
    "\u0144\uffbb\u0145\uffbb\u0146\uffbb\u014a\uffbb\u014c\uffbb\u014d\uffbb\u014f" +
    "\uffbb\u0153\uffbb\u0154\uffbb\u0159\uffbb\001\002\000\120\007\uffbc" +
    "\011\uffbc\012\uffbc\016\uffbc\032\uffbc\062\uffbc\071\uffbc\072" +
    "\uffbc\074\uffbc\112\uffbc\117\uffbc\120\uffbc\126\uffbc\133\uffbc" +
    "\134\uffbc\141\uffbc\150\uffbc\164\uffbc\165\uffbc\170\uffbc\242" +
    "\uffbc\266\uffbc\267\uffbc\327\uffbc\333\uffbc\u0140\uffbc\u0141\uffbc" +
    "\u0142\uffbc\u0143\uffbc\u0144\uffbc\u0145\uffbc\u0146\uffbc\u014a\uffbc\u014c" +
    "\uffbc\u014d\uffbc\u014f\uffbc\u0153\uffbc\u0154\uffbc\u0159\uffbc\001\002" +
    "\000\004\u0159\uff61\001\002\000\004\u0140\130\001\002\000" +
    "\004\u0159\uff5f\001\002\000\120\007\uff79\011\uff79\012\uff79" +
    "\016\uff79\032\uff79\062\uff79\071\uff79\072\uff79\074\uff79\112" +
    "\uff79\117\uff79\120\uff79\126\uff79\133\uff79\134\uff79\141\uff79" +
    "\150\uff79\164\uff79\165\uff79\170\uff79\242\uff79\266\uff79\267" +
    "\uff79\327\uff79\333\uff79\u0140\uff79\u0141\uff79\u0142\uff79\u0143\uff79" +
    "\u0144\uff79\u0145\uff79\u0146\uff79\u014a\uff79\u014c\uff79\u014d\uff79\u014f" +
    "\uff79\u0153\uff79\u0154\uff79\u0159\uff79\001\002\000\010\u013e\133" +
    "\u0140\134\u015c\135\001\002\000\010\112\uff88\u0154\uff88\u0159" +
    "\uff88\001\002\000\010\112\uff87\u0154\uff87\u0159\uff87\001\002" +
    "\000\004\u0140\140\001\002\000\004\u0159\137\001\002\000" +
    "\072\007\uff91\011\uff91\012\uff91\016\uff91\032\uff91\062\uff91" +
    "\074\uff91\112\uff91\117\uff91\120\uff91\126\uff91\133\uff91\134" +
    "\uff91\141\uff91\150\uff91\164\uff91\165\uff91\267\uff91\327\uff91" +
    "\u0140\uff91\u0146\uff91\u014a\uff91\u014c\uff91\u014d\uff91\u014f\uff91\u0153" +
    "\uff91\u0154\uff91\u0159\uff91\001\002\000\010\112\uff89\u0154\uff89" +
    "\u0159\uff89\001\002\000\010\u013e\133\u0140\134\u015c\135\001" +
    "\002\000\004\u0154\143\001\002\000\024\323\051\u0100\060" +
    "\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u0158\043\u015c" +
    "\123\001\002\000\004\u0159\145\001\002\000\072\007\uff8c" +
    "\011\uff8c\012\uff8c\016\uff8c\032\uff8c\062\uff8c\074\uff8c\112" +
    "\uff8c\117\uff8c\120\uff8c\126\uff8c\133\uff8c\134\uff8c\141\uff8c" +
    "\150\uff8c\164\uff8c\165\uff8c\267\uff8c\327\uff8c\u0140\uff8c\u0146" +
    "\uff8c\u014a\uff8c\u014c\uff8c\u014d\uff8c\u014f\uff8c\u0153\uff8c\u0154\uff8c" +
    "\u0159\uff8c\001\002\000\034\005\152\064\147\323\uff6b\u0100" +
    "\uff6b\u0105\uff6b\u0110\uff6b\u0111\uff6b\u013b\uff6b\u013c\uff6b\u0140\uff6b" +
    "\u0143\uff6b\u0158\uff6b\u015c\uff6b\001\002\000\030\323\uff6c\u0100" +
    "\uff6c\u0105\uff6c\u0110\uff6c\u0111\uff6c\u013b\uff6c\u013c\uff6c\u0140\uff6c" +
    "\u0143\uff6c\u0158\uff6c\u015c\uff6c\001\002\000\004\u0159\162\001" +
    "\002\000\030\323\051\u0100\060\u0105\065\u0110\070\u0111\035" +
    "\u013b\063\u013c\044\u0140\155\u0143\153\u0158\043\u015c\123\001" +
    "\002\000\030\323\uff6d\u0100\uff6d\u0105\uff6d\u0110\uff6d\u0111\uff6d" +
    "\u013b\uff6d\u013c\uff6d\u0140\uff6d\u0143\uff6d\u0158\uff6d\u015c\uff6d\001" +
    "\002\000\004\u0159\uff6a\001\002\000\004\u0159\uff68\001\002" +
    "\000\006\u0155\157\u0159\uff66\001\002\000\004\u0159\uff6e\001" +
    "\002\000\004\u0140\161\001\002\000\004\u0159\uff69\001\002" +
    "\000\004\u0159\uff67\001\002\000\120\007\uff7a\011\uff7a\012" +
    "\uff7a\016\uff7a\032\uff7a\062\uff7a\071\uff7a\072\uff7a\074\uff7a" +
    "\112\uff7a\117\uff7a\120\uff7a\126\uff7a\133\uff7a\134\uff7a\141" +
    "\uff7a\150\uff7a\164\uff7a\165\uff7a\170\uff7a\242\uff7a\266\uff7a" +
    "\267\uff7a\327\uff7a\333\uff7a\u0140\uff7a\u0141\uff7a\u0142\uff7a\u0143" +
    "\uff7a\u0144\uff7a\u0145\uff7a\u0146\uff7a\u014a\uff7a\u014c\uff7a\u014d\uff7a" +
    "\u014f\uff7a\u0153\uff7a\u0154\uff7a\u0159\uff7a\001\002\000\072\011" +
    "\uff55\012\uff55\016\uff55\032\uff55\062\uff55\071\uff55\072\uff55" +
    "\112\uff55\117\uff55\120\uff55\126\uff55\133\uff55\141\uff55\165" +
    "\uff55\242\uff55\266\uff55\267\uff55\327\uff55\u0140\uff55\u0141\uff55" +
    "\u0146\uff55\u014a\uff55\u014c\uff55\u014d\uff55\u014f\uff55\u0153\uff55\u0154" +
    "\uff55\u0159\uff55\001\002\000\022\016\172\126\166\141\177" +
    "\u0146\171\u014a\173\u014c\174\u014d\167\u014f\176\001\002\000" +
    "\070\011\uff51\012\uff51\016\uff51\032\uff51\062\uff51\071\uff51" +
    "\072\uff51\112\uff51\117\uff51\120\uff51\126\uff51\133\uff51\141" +
    "\uff51\165\uff51\242\uff51\266\uff51\267\uff51\327\uff51\u0140\uff51" +
    "\u0146\uff51\u014a\uff51\u014c\uff51\u014d\uff51\u014f\uff51\u0153\uff51\u0154" +
    "\uff51\u0159\uff51\001\002\000\070\011\uff3b\012\uff3b\016\uff3b" +
    "\032\uff3b\062\uff3b\071\uff3b\072\uff3b\112\uff3b\117\uff3b\120" +
    "\uff3b\126\uff3b\133\uff3b\141\uff3b\165\uff3b\242\uff3b\266\uff3b" +
    "\267\uff3b\327\uff3b\u0140\uff3b\u0146\uff3b\u014a\uff3b\u014c\uff3b\u014d" +
    "\uff3b\u014f\uff3b\u0153\uff3b\u0154\uff3b\u0159\uff3b\001\002\000\170" +
    "\011\uff40\012\uff40\016\uff40\024\uff40\032\uff40\042\uff40\050" +
    "\uff40\062\uff40\071\uff40\072\uff40\112\uff40\117\uff40\120\uff40" +
    "\126\uff40\133\uff40\140\uff40\141\uff40\152\uff40\165\uff40\214" +
    "\uff40\230\uff40\231\uff40\236\uff40\242\uff40\266\uff40\267\uff40" +
    "\323\uff40\327\uff40\341\uff40\345\uff40\360\uff40\376\uff40\u0100" +
    "\uff40\u0105\uff40\u010d\uff40\u0110\uff40\u0111\uff40\u0112\uff40\u0116\uff40" +
    "\u0118\uff40\u0119\uff40\u0120\uff40\u0122\uff40\u0123\uff40\u0137\uff40\u013b" +
    "\uff40\u013c\uff40\u013e\uff40\u0140\uff40\u0146\uff40\u014a\uff40\u014c\uff40" +
    "\u014d\uff40\u014f\uff40\u0153\uff40\u0154\uff40\u0158\uff40\u0159\uff40\u015c" +
    "\uff40\001\002\000\070\011\uff5b\012\uff5b\016\uff5b\032\uff5b" +
    "\062\uff5b\071\uff5b\072\uff5b\112\uff5b\117\uff5b\120\uff5b\126" +
    "\uff5b\133\uff5b\141\uff5b\165\uff5b\242\uff5b\266\uff5b\267\uff5b" +
    "\327\uff5b\u0140\uff5b\u0146\uff5b\u014a\uff5b\u014c\uff5b\u014d\uff5b\u014f" +
    "\uff5b\u0153\uff5b\u0154\uff5b\u0159\uff5b\001\002\000\170\011\uff3e" +
    "\012\uff3e\016\uff3e\024\uff3e\032\uff3e\042\uff3e\050\uff3e\062" +
    "\uff3e\071\uff3e\072\uff3e\112\uff3e\117\uff3e\120\uff3e\126\uff3e" +
    "\133\uff3e\140\uff3e\141\uff3e\152\uff3e\165\uff3e\214\uff3e\230" +
    "\uff3e\231\uff3e\236\uff3e\242\uff3e\266\uff3e\267\uff3e\323\uff3e" +
    "\327\uff3e\341\uff3e\345\uff3e\360\uff3e\376\uff3e\u0100\uff3e\u0105" +
    "\uff3e\u010d\uff3e\u0110\uff3e\u0111\uff3e\u0112\uff3e\u0116\uff3e\u0118\uff3e" +
    "\u0119\uff3e\u0120\uff3e\u0122\uff3e\u0123\uff3e\u0137\uff3e\u013b\uff3e\u013c" +
    "\uff3e\u013e\uff3e\u0140\uff3e\u0146\uff3e\u014a\uff3e\u014c\uff3e\u014d\uff3e" +
    "\u014f\uff3e\u0153\uff3e\u0154\uff3e\u0158\uff3e\u0159\uff3e\u015c\uff3e\001" +
    "\002\000\070\011\uff3c\012\uff3c\016\uff3c\032\uff3c\062\uff3c" +
    "\071\uff3c\072\uff3c\112\uff3c\117\uff3c\120\uff3c\126\uff3c\133" +
    "\uff3c\141\uff3c\165\uff3c\242\uff3c\266\uff3c\267\uff3c\327\uff3c" +
    "\u0140\uff3c\u0146\uff3c\u014a\uff3c\u014c\uff3c\u014d\uff3c\u014f\uff3c\u0153" +
    "\uff3c\u0154\uff3c\u0159\uff3c\001\002\000\170\011\uff3f\012\uff3f" +
    "\016\uff3f\024\uff3f\032\uff3f\042\uff3f\050\uff3f\062\uff3f\071" +
    "\uff3f\072\uff3f\112\uff3f\117\uff3f\120\uff3f\126\uff3f\133\uff3f" +
    "\140\uff3f\141\uff3f\152\uff3f\165\uff3f\214\uff3f\230\uff3f\231" +
    "\uff3f\236\uff3f\242\uff3f\266\uff3f\267\uff3f\323\uff3f\327\uff3f" +
    "\341\uff3f\345\uff3f\360\uff3f\376\uff3f\u0100\uff3f\u0105\uff3f\u010d" +
    "\uff3f\u0110\uff3f\u0111\uff3f\u0112\uff3f\u0116\uff3f\u0118\uff3f\u0119\uff3f" +
    "\u0120\uff3f\u0122\uff3f\u0123\uff3f\u0137\uff3f\u013b\uff3f\u013c\uff3f\u013e" +
    "\uff3f\u0140\uff3f\u0146\uff3f\u014a\uff3f\u014c\uff3f\u014d\uff3f\u014f\uff3f" +
    "\u0153\uff3f\u0154\uff3f\u0158\uff3f\u0159\uff3f\u015c\uff3f\001\002\000" +
    "\170\011\uff41\012\uff41\016\uff41\024\uff41\032\uff41\042\uff41" +
    "\050\uff41\062\uff41\071\uff41\072\uff41\112\uff41\117\uff41\120" +
    "\uff41\126\uff41\133\uff41\140\uff41\141\uff41\152\uff41\165\uff41" +
    "\214\uff41\230\uff41\231\uff41\236\uff41\242\uff41\266\uff41\267" +
    "\uff41\323\uff41\327\uff41\341\uff41\345\uff41\360\uff41\376\uff41" +
    "\u0100\uff41\u0105\uff41\u010d\uff41\u0110\uff41\u0111\uff41\u0112\uff41\u0116" +
    "\uff41\u0118\uff41\u0119\uff41\u0120\uff41\u0122\uff41\u0123\uff41\u0137\uff41" +
    "\u013b\uff41\u013c\uff41\u013e\uff41\u0140\uff41\u0146\uff41\u014a\uff41\u014c" +
    "\uff41\u014d\uff41\u014f\uff41\u0153\uff41\u0154\uff41\u0158\uff41\u0159\uff41" +
    "\u015c\uff41\001\002\000\070\011\uff50\012\uff50\016\uff50\032" +
    "\uff50\062\uff50\071\uff50\072\uff50\112\uff50\117\uff50\120\uff50" +
    "\126\uff50\133\uff50\141\uff50\165\uff50\242\uff50\266\uff50\267" +
    "\uff50\327\uff50\u0140\uff50\u0146\uff50\u014a\uff50\u014c\uff50\u014d\uff50" +
    "\u014f\uff50\u0153\uff50\u0154\uff50\u0159\uff50\001\002\000\170\011" +
    "\uff3d\012\uff3d\016\uff3d\024\uff3d\032\uff3d\042\uff3d\050\uff3d" +
    "\062\uff3d\071\uff3d\072\uff3d\112\uff3d\117\uff3d\120\uff3d\126" +
    "\uff3d\133\uff3d\140\uff3d\141\uff3d\152\uff3d\165\uff3d\214\uff3d" +
    "\230\uff3d\231\uff3d\236\uff3d\242\uff3d\266\uff3d\267\uff3d\323" +
    "\uff3d\327\uff3d\341\uff3d\345\uff3d\360\uff3d\376\uff3d\u0100\uff3d" +
    "\u0105\uff3d\u010d\uff3d\u0110\uff3d\u0111\uff3d\u0112\uff3d\u0116\uff3d\u0118" +
    "\uff3d\u0119\uff3d\u0120\uff3d\u0122\uff3d\u0123\uff3d\u0137\uff3d\u013b\uff3d" +
    "\u013c\uff3d\u013e\uff3d\u0140\uff3d\u0146\uff3d\u014a\uff3d\u014c\uff3d\u014d" +
    "\uff3d\u014f\uff3d\u0153\uff3d\u0154\uff3d\u0158\uff3d\u0159\uff3d\u015c\uff3d" +
    "\001\002\000\070\011\uff3a\012\uff3a\016\uff3a\032\uff3a\062" +
    "\uff3a\071\uff3a\072\uff3a\112\uff3a\117\uff3a\120\uff3a\126\uff3a" +
    "\133\uff3a\141\uff3a\165\uff3a\242\uff3a\266\uff3a\267\uff3a\327" +
    "\uff3a\u0140\uff3a\u0146\uff3a\u014a\uff3a\u014c\uff3a\u014d\uff3a\u014f\uff3a" +
    "\u0153\uff3a\u0154\uff3a\u0159\uff3a\001\002\000\036\011\uffb4\012" +
    "\uffb4\032\uffb4\062\uffb4\112\uffb4\117\uffb4\120\uffb4\133\uffb4" +
    "\165\uffb4\267\uffb4\327\uffb4\u0140\uffb4\u0153\uffb4\u0154\uffb4\001" +
    "\002\000\032\005\115\064\114\323\uff62\u0100\uff62\u0105\uff62" +
    "\u0110\uff62\u0111\uff62\u013b\uff62\u013c\uff62\u0140\uff62\u0158\uff62\u015c" +
    "\uff62\001\002\000\004\u0159\203\001\002\000\120\007\uff77" +
    "\011\uff77\012\uff77\016\uff77\032\uff77\062\uff77\071\uff77\072" +
    "\uff77\074\uff77\112\uff77\117\uff77\120\uff77\126\uff77\133\uff77" +
    "\134\uff77\141\uff77\150\uff77\164\uff77\165\uff77\170\uff77\242" +
    "\uff77\266\uff77\267\uff77\327\uff77\333\uff77\u0140\uff77\u0141\uff77" +
    "\u0142\uff77\u0143\uff77\u0144\uff77\u0145\uff77\u0146\uff77\u014a\uff77\u014c" +
    "\uff77\u014d\uff77\u014f\uff77\u0153\uff77\u0154\uff77\u0159\uff77\001\002" +
    "\000\036\011\uffb7\012\uffb7\032\uffb7\062\uffb7\112\uffb7\117" +
    "\uffb7\120\uffb7\133\uffb7\165\uffb7\267\uffb7\327\uffb7\u0140\uffb7" +
    "\u0153\uffb7\u0154\uffb7\001\002\000\006\u0140\212\u0143\213\001" +
    "\002\000\064\011\uff5a\012\uff5a\032\uff5a\062\uff5a\112\uff5a" +
    "\117\uff5a\120\uff5a\133\uff5a\150\032\165\uff5a\267\uff5a\323" +
    "\051\327\uff5a\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063" +
    "\u013c\044\u013e\042\u0140\163\u0153\uff5a\u0154\uff5a\u0158\043\u015c" +
    "\123\001\002\000\036\011\uffaf\012\uffaf\032\uffaf\062\uffaf" +
    "\112\uffaf\117\uffaf\120\uffaf\133\uffaf\165\uffaf\267\uffaf\327" +
    "\uffaf\u0140\uffaf\u0153\uffaf\u0154\uffaf\001\002\000\036\011\uffa8" +
    "\012\uffa8\032\uffa8\062\uffa8\112\uffa8\117\uffa8\120\uffa8\133" +
    "\uffa8\165\uffa8\267\uffa8\327\uffa8\u0140\uffa8\u0153\uffa8\u0154\uffa8" +
    "\001\002\000\036\011\uffb0\012\uffb0\032\uffb0\062\uffb0\112" +
    "\uffb0\117\uffb0\120\uffb0\133\uffb0\165\uffb0\267\uffb0\327\uffb0" +
    "\u0140\uffb0\u0153\uffb0\u0154\uffb0\001\002\000\040\011\074\012" +
    "\uffa9\032\uffa9\062\uffa9\112\uffa9\117\uffa9\120\uffa9\133\uffa9" +
    "\165\uffa9\267\uffa9\327\uffa9\u0140\075\u0153\uffa9\u0154\uffa9\u0155" +
    "\214\001\002\000\036\011\uffad\012\uffad\032\uffad\062\uffad" +
    "\112\uffad\117\uffad\120\uffad\133\uffad\165\uffad\267\uffad\327" +
    "\uffad\u0140\uffad\u0153\uffad\u0154\uffad\001\002\000\004\u0140\217" +
    "\001\002\000\036\011\uffac\012\uffac\032\uffac\062\uffac\112" +
    "\uffac\117\uffac\120\uffac\133\uffac\165\uffac\267\uffac\327\uffac" +
    "\u0140\uffac\u0153\uffac\u0154\uffac\001\002\000\036\011\uffa6\012" +
    "\uffa6\032\uffa6\062\uffa6\112\uffa6\117\uffa6\120\uffa6\133\uffa6" +
    "\165\uffa6\267\uffa6\327\uffa6\u0140\uffa6\u0153\uffa6\u0154\uffa6\001" +
    "\002\000\036\011\074\012\uffa9\032\uffa9\062\uffa9\112\uffa9" +
    "\117\uffa9\120\uffa9\133\uffa9\165\uffa9\267\uffa9\327\uffa9\u0140" +
    "\075\u0153\uffa9\u0154\uffa9\001\002\000\036\011\uffa7\012\uffa7" +
    "\032\uffa7\062\uffa7\112\uffa7\117\uffa7\120\uffa7\133\uffa7\165" +
    "\uffa7\267\uffa7\327\uffa7\u0140\uffa7\u0153\uffa7\u0154\uffa7\001\002" +
    "\000\024\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b" +
    "\063\u013c\044\u0158\043\u015c\123\001\002\000\024\323\051" +
    "\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u0158" +
    "\043\u015c\123\001\002\000\120\007\uffc7\011\uffc7\012\uffc7" +
    "\016\uffc7\032\uffc7\062\uffc7\071\uffc7\072\uffc7\074\uffc7\112" +
    "\uffc7\117\uffc7\120\uffc7\126\uffc7\133\uffc7\134\uffc7\141\uffc7" +
    "\150\uffc7\164\uffc7\165\uffc7\170\uffc7\242\uffc7\266\uffc7\267" +
    "\uffc7\327\uffc7\333\uffc7\u0140\uffc7\u0141\uffc7\u0142\uffc7\u0143\uffc7" +
    "\u0144\uffc7\u0145\uffc7\u0146\uffc7\u014a\uffc7\u014c\uffc7\u014d\uffc7\u014f" +
    "\uffc7\u0153\uffc7\u0154\uffc7\u0159\uffc7\001\002\000\120\007\uffc4" +
    "\011\uffc4\012\uffc4\016\uffc4\032\uffc4\062\uffc4\071\uffc4\072" +
    "\uffc4\074\uffc4\112\uffc4\117\uffc4\120\uffc4\126\uffc4\133\uffc4" +
    "\134\uffc4\141\uffc4\150\uffc4\164\uffc4\165\uffc4\170\uffc4\242" +
    "\uffc4\266\uffc4\267\uffc4\327\uffc4\333\uffc4\u0140\uffc4\u0141\221" +
    "\u0142\222\u0143\uffc4\u0144\uffc4\u0145\uffc4\u0146\uffc4\u014a\uffc4\u014c" +
    "\uffc4\u014d\uffc4\u014f\uffc4\u0153\uffc4\u0154\uffc4\u0159\uffc4\001\002" +
    "\000\120\007\uffc5\011\uffc5\012\uffc5\016\uffc5\032\uffc5\062" +
    "\uffc5\071\uffc5\072\uffc5\074\uffc5\112\uffc5\117\uffc5\120\uffc5" +
    "\126\uffc5\133\uffc5\134\uffc5\141\uffc5\150\uffc5\164\uffc5\165" +
    "\uffc5\170\uffc5\242\uffc5\266\uffc5\267\uffc5\327\uffc5\333\uffc5" +
    "\u0140\uffc5\u0141\uffc5\u0142\uffc5\u0143\uffc5\u0144\uffc5\u0145\uffc5\u0146" +
    "\uffc5\u014a\uffc5\u014c\uffc5\u014d\uffc5\u014f\uffc5\u0153\uffc5\u0154\uffc5" +
    "\u0159\uffc5\001\002\000\120\007\uffc4\011\uffc4\012\uffc4\016" +
    "\uffc4\032\uffc4\062\uffc4\071\uffc4\072\uffc4\074\uffc4\112\uffc4" +
    "\117\uffc4\120\uffc4\126\uffc4\133\uffc4\134\uffc4\141\uffc4\150" +
    "\uffc4\164\uffc4\165\uffc4\170\uffc4\242\uffc4\266\uffc4\267\uffc4" +
    "\327\uffc4\333\uffc4\u0140\uffc4\u0141\221\u0142\222\u0143\uffc4\u0144" +
    "\uffc4\u0145\uffc4\u0146\uffc4\u014a\uffc4\u014c\uffc4\u014d\uffc4\u014f\uffc4" +
    "\u0153\uffc4\u0154\uffc4\u0159\uffc4\001\002\000\120\007\uffc6\011" +
    "\uffc6\012\uffc6\016\uffc6\032\uffc6\062\uffc6\071\uffc6\072\uffc6" +
    "\074\uffc6\112\uffc6\117\uffc6\120\uffc6\126\uffc6\133\uffc6\134" +
    "\uffc6\141\uffc6\150\uffc6\164\uffc6\165\uffc6\170\uffc6\242\uffc6" +
    "\266\uffc6\267\uffc6\327\uffc6\333\uffc6\u0140\uffc6\u0141\uffc6\u0142" +
    "\uffc6\u0143\uffc6\u0144\uffc6\u0145\uffc6\u0146\uffc6\u014a\uffc6\u014c\uffc6" +
    "\u014d\uffc6\u014f\uffc6\u0153\uffc6\u0154\uffc6\u0159\uffc6\001\002\000" +
    "\024\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063" +
    "\u013c\044\u0158\043\u015c\123\001\002\000\120\007\uffc3\011" +
    "\uffc3\012\uffc3\016\uffc3\032\uffc3\062\uffc3\071\uffc3\072\uffc3" +
    "\074\uffc3\112\uffc3\117\uffc3\120\uffc3\126\uffc3\133\uffc3\134" +
    "\uffc3\141\uffc3\150\uffc3\164\uffc3\165\uffc3\170\uffc3\242\uffc3" +
    "\266\uffc3\267\uffc3\327\uffc3\333\uffc3\u0140\uffc3\u0141\uffc3\u0142" +
    "\uffc3\u0143\uffc3\u0144\uffc3\u0145\uffc3\u0146\uffc3\u014a\uffc3\u014c\uffc3" +
    "\u014d\uffc3\u014f\uffc3\u0153\uffc3\u0154\uffc3\u0159\uffc3\001\002\000" +
    "\024\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063" +
    "\u013c\044\u0158\043\u015c\123\001\002\000\120\007\uffc0\011" +
    "\uffc0\012\uffc0\016\uffc0\032\uffc0\062\uffc0\071\uffc0\072\uffc0" +
    "\074\uffc0\112\uffc0\117\uffc0\120\uffc0\126\uffc0\133\uffc0\134" +
    "\uffc0\141\uffc0\150\uffc0\164\uffc0\165\uffc0\170\uffc0\242\uffc0" +
    "\266\uffc0\267\uffc0\327\uffc0\333\uffc0\u0140\uffc0\u0141\uffc0\u0142" +
    "\uffc0\u0143\232\u0144\230\u0145\uffc0\u0146\uffc0\u014a\uffc0\u014c\uffc0" +
    "\u014d\uffc0\u014f\uffc0\u0153\uffc0\u0154\uffc0\u0159\uffc0\001\002\000" +
    "\120\007\uffc2\011\uffc2\012\uffc2\016\uffc2\032\uffc2\062\uffc2" +
    "\071\uffc2\072\uffc2\074\uffc2\112\uffc2\117\uffc2\120\uffc2\126" +
    "\uffc2\133\uffc2\134\uffc2\141\uffc2\150\uffc2\164\uffc2\165\uffc2" +
    "\170\uffc2\242\uffc2\266\uffc2\267\uffc2\327\uffc2\333\uffc2\u0140" +
    "\uffc2\u0141\uffc2\u0142\uffc2\u0143\uffc2\u0144\uffc2\u0145\uffc2\u0146\uffc2" +
    "\u014a\uffc2\u014c\uffc2\u014d\uffc2\u014f\uffc2\u0153\uffc2\u0154\uffc2\u0159" +
    "\uffc2\001\002\000\120\007\uffc0\011\uffc0\012\uffc0\016\uffc0" +
    "\032\uffc0\062\uffc0\071\uffc0\072\uffc0\074\uffc0\112\uffc0\117" +
    "\uffc0\120\uffc0\126\uffc0\133\uffc0\134\uffc0\141\uffc0\150\uffc0" +
    "\164\uffc0\165\uffc0\170\uffc0\242\uffc0\266\uffc0\267\uffc0\327" +
    "\uffc0\333\uffc0\u0140\uffc0\u0141\uffc0\u0142\uffc0\u0143\232\u0144\230" +
    "\u0145\uffc0\u0146\uffc0\u014a\uffc0\u014c\uffc0\u014d\uffc0\u014f\uffc0\u0153" +
    "\uffc0\u0154\uffc0\u0159\uffc0\001\002\000\120\007\uffc1\011\uffc1" +
    "\012\uffc1\016\uffc1\032\uffc1\062\uffc1\071\uffc1\072\uffc1\074" +
    "\uffc1\112\uffc1\117\uffc1\120\uffc1\126\uffc1\133\uffc1\134\uffc1" +
    "\141\uffc1\150\uffc1\164\uffc1\165\uffc1\170\uffc1\242\uffc1\266" +
    "\uffc1\267\uffc1\327\uffc1\333\uffc1\u0140\uffc1\u0141\uffc1\u0142\uffc1" +
    "\u0143\uffc1\u0144\uffc1\u0145\uffc1\u0146\uffc1\u014a\uffc1\u014c\uffc1\u014d" +
    "\uffc1\u014f\uffc1\u0153\uffc1\u0154\uffc1\u0159\uffc1\001\002\000\024" +
    "\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063\u013c" +
    "\044\u0158\043\u015c\123\001\002\000\004\u0159\241\001\002" +
    "\000\072\007\uff8d\011\uff8d\012\uff8d\016\uff8d\032\uff8d\062" +
    "\uff8d\074\uff8d\112\uff8d\117\uff8d\120\uff8d\126\uff8d\133\uff8d" +
    "\134\uff8d\141\uff8d\150\uff8d\164\uff8d\165\uff8d\267\uff8d\327" +
    "\uff8d\u0140\uff8d\u0146\uff8d\u014a\uff8d\u014c\uff8d\u014d\uff8d\u014f\uff8d" +
    "\u0153\uff8d\u0154\uff8d\u0159\uff8d\001\002\000\112\024\uffcb\037" +
    "\uffcb\042\uffcb\050\uffcb\110\uffcb\140\uffcb\150\325\152\uffcb" +
    "\214\uffcb\230\uffcb\231\uffcb\236\uffcb\323\uffcb\341\uffcb\345" +
    "\uffcb\360\uffcb\376\uffcb\u0100\uffcb\u0105\uffcb\u010d\uffcb\u010e\324" +
    "\u0110\uffcb\u0111\uffcb\u0112\uffcb\u0116\uffcb\u0118\uffcb\u0119\uffcb\u0120" +
    "\uffcb\u0122\uffcb\u0123\uffcb\u0137\uffcb\u013b\uffcb\u013c\uffcb\u0140\uffcb" +
    "\u0158\327\u015c\uffcb\001\002\000\006\327\ufedc\u0153\ufedc\001" +
    "\002\000\006\327\ufede\u0153\ufede\001\002\000\006\327\ufee0" +
    "\u0153\ufee0\001\002\000\004\u0140\303\001\002\000\006\327" +
    "\ufee2\u0153\ufee2\001\002\000\006\327\ufee5\u0153\ufee5\001\002" +
    "\000\112\024\uffcb\037\uffcb\042\uffcb\050\uffcb\110\uffcb\140" +
    "\uffcb\150\325\152\uffcb\214\uffcb\230\uffcb\231\uffcb\236\uffcb" +
    "\323\uffcb\341\uffcb\345\uffcb\360\uffcb\376\uffcb\u0100\uffcb\u0105" +
    "\uffcb\u010d\uffcb\u010e\324\u0110\uffcb\u0111\uffcb\u0112\uffcb\u0116\uffcb" +
    "\u0118\uffcb\u0119\uffcb\u0120\uffcb\u0122\uffcb\u0123\uffcb\u0137\uffcb\u013b" +
    "\uffcb\u013c\uffcb\u0140\uffcb\u0158\327\u015c\uffcb\001\002\000\006" +
    "\327\ufee7\u0153\ufee7\001\002\000\124\011\uff5a\024\023\042" +
    "\027\050\057\112\uff5a\117\uff5a\120\uff5a\133\uff5a\140\040" +
    "\150\032\165\uff5a\214\066\231\072\267\uff5a\323\051\327" +
    "\uff5a\341\016\345\021\360\015\376\017\u0100\060\u0105\065" +
    "\u010d\024\u0110\070\u0111\035\u0112\034\u0116\071\u0118\033\u0119" +
    "\022\u0120\053\u0123\067\u0137\037\u013b\063\u013c\044\u013e\042" +
    "\u0140\056\u0143\064\u0153\uff5a\u0154\uff5a\u0158\043\u015c\030\001" +
    "\002\000\004\022\u0194\001\002\000\014\160\277\161\301" +
    "\u0140\303\u0158\302\u015c\305\001\002\000\004\022\260\001" +
    "\002\000\006\327\ufee9\u0153\ufee9\001\002\000\112\011\uff5a" +
    "\012\uff5a\024\023\032\uff5a\042\027\050\057\062\uff5a\140" +
    "\040\150\032\214\066\231\072\323\051\341\016\345\021" +
    "\360\015\376\017\u0100\060\u0105\065\u010d\024\u0110\070\u0111" +
    "\035\u0112\034\u0116\071\u0118\033\u0119\022\u0120\053\u0123\067" +
    "\u0137\037\u013b\063\u013c\044\u013e\042\u0140\056\u0143\064\u0154" +
    "\uff5a\u0158\043\u015c\030\001\002\000\012\012\265\032\263" +
    "\062\266\u0154\267\001\002\000\006\327\ufedb\u0153\ufedb\001" +
    "\002\000\004\u0140\274\001\002\000\044\007\uff0b\016\uff0b" +
    "\074\uff0b\126\uff0b\134\uff0b\141\uff0b\150\uff0b\164\uff0b\327" +
    "\uff0b\u0146\uff0b\u014a\uff0b\u014c\uff0b\u014d\uff0b\u014f\uff0b\u0153\uff0b" +
    "\u0154\uff0b\u0159\uff0b\001\002\000\044\007\uff09\016\uff09\074" +
    "\uff09\126\uff09\134\uff09\141\uff09\150\uff09\164\uff09\327\uff09" +
    "\u0146\uff09\u014a\uff09\u014c\uff09\u014d\uff09\u014f\uff09\u0153\uff09\u0154" +
    "\uff09\u0159\uff09\001\002\000\044\007\uff08\016\uff08\074\uff08" +
    "\126\uff08\134\uff08\141\uff08\150\uff08\164\uff08\327\uff08\u0146" +
    "\uff08\u014a\uff08\u014c\uff08\u014d\uff08\u014f\uff08\u0153\uff08\u0154\uff08" +
    "\u0159\uff08\001\002\000\004\165\272\001\002\000\044\007" +
    "\uff0e\016\uff0e\074\uff0e\126\uff0e\134\uff0e\141\uff0e\150\uff0e" +
    "\164\uff0e\327\uff0e\u0146\uff0e\u014a\uff0e\u014c\uff0e\u014d\uff0e\u014f" +
    "\uff0e\u0153\uff0e\u0154\uff0e\u0159\uff0e\001\002\000\044\007\uff0f" +
    "\016\uff0f\074\uff0f\126\uff0f\134\uff0f\141\uff0f\150\uff0f\164" +
    "\uff0f\327\uff0f\u0146\uff0f\u014a\uff0f\u014c\uff0f\u014d\uff0f\u014f\uff0f" +
    "\u0153\uff0f\u0154\uff0f\u0159\uff0f\001\002\000\044\007\uff0d\016" +
    "\uff0d\074\uff0d\126\uff0d\134\uff0d\141\uff0d\150\uff0d\164\uff0d" +
    "\327\uff0d\u0146\uff0d\u014a\uff0d\u014c\uff0d\u014d\uff0d\u014f\uff0d\u0153" +
    "\uff0d\u0154\uff0d\u0159\uff0d\001\002\000\044\007\uff0c\016\uff0c" +
    "\074\uff0c\126\uff0c\134\uff0c\141\uff0c\150\uff0c\164\uff0c\327" +
    "\uff0c\u0146\uff0c\u014a\uff0c\u014c\uff0c\u014d\uff0c\u014f\uff0c\u0153\uff0c" +
    "\u0154\uff0c\u0159\uff0c\001\002\000\006\012\265\062\266\001" +
    "\002\000\044\007\uff0a\016\uff0a\074\uff0a\126\uff0a\134\uff0a" +
    "\141\uff0a\150\uff0a\164\uff0a\327\uff0a\u0146\uff0a\u014a\uff0a\u014c" +
    "\uff0a\u014d\uff0a\u014f\uff0a\u0153\uff0a\u0154\uff0a\u0159\uff0a\001\002" +
    "\000\042\011\u016a\044\uff12\113\uff12\117\uff12\120\uff12\130" +
    "\uff12\135\uff12\140\uff12\156\uff12\165\uff12\214\uff12\267\uff12" +
    "\327\uff12\u0140\u016b\u0153\uff12\u0154\uff12\001\002\000\004\u0158" +
    "\u018e\001\002\000\044\011\u016a\044\uff12\113\uff12\117\uff12" +
    "\120\uff12\130\uff12\135\uff12\140\uff12\156\uff12\165\uff12\214" +
    "\uff12\240\uff12\267\uff12\327\uff12\u0140\u016b\u0153\uff12\u0154\uff12" +
    "\001\002\000\004\u0158\u017e\001\002\000\004\135\u017c\001" +
    "\002\000\104\007\ufffc\011\ufffc\016\ufffc\044\ufffc\074\ufffc" +
    "\112\ufffc\113\ufffc\117\ufffc\120\ufffc\126\ufffc\130\ufffc\134" +
    "\ufffc\135\ufffc\140\ufffc\141\ufffc\150\ufffc\156\ufffc\164\ufffc" +
    "\165\ufffc\214\ufffc\240\ufffc\267\ufffc\327\ufffc\u0140\ufffc\u0146" +
    "\ufffc\u014a\ufffc\u014c\ufffc\u014d\ufffc\u014f\ufffc\u0153\ufffc\u0154\ufffc" +
    "\u0155\u0174\u0159\ufffc\001\002\000\020\117\254\120\251\165" +
    "\256\267\242\327\ufeda\u0153\ufeda\u0154\u0170\001\002\000\004" +
    "\u0140\u0169\001\002\000\034\044\310\113\311\117\uff1d\120" +
    "\uff1d\130\315\135\uff28\140\307\165\uff1d\214\312\267\uff1d" +
    "\327\uff1d\u0153\uff1d\u0154\uff1d\001\002\000\006\135\uff22\166" +
    "\u0162\001\002\000\004\u0154\u0165\001\002\000\006\135\uff22" +
    "\166\u0162\001\002\000\006\135\uff22\166\u0162\001\002\000" +
    "\004\135\uff29\001\002\000\004\135\u0161\001\002\000\004" +
    "\135\uff2a\001\002\000\020\117\uff21\120\uff21\165\uff21\267" +
    "\uff21\327\uff21\u0153\uff21\u0154\uff21\001\002\000\012\160\277" +
    "\161\301\u0140\303\u015c\305\001\002\000\020\117\uff1f\120" +
    "\uff1f\165\uff1f\267\uff1f\327\uff1f\u0153\uff1f\u0154\uff1f\001\002" +
    "\000\004\156\322\001\002\000\112\024\uffcb\037\uffcb\042" +
    "\uffcb\050\uffcb\110\uffcb\140\uffcb\150\325\152\uffcb\214\uffcb" +
    "\230\uffcb\231\uffcb\236\uffcb\323\uffcb\341\uffcb\345\uffcb\360" +
    "\uffcb\376\uffcb\u0100\uffcb\u0105\uffcb\u010d\uffcb\u010e\324\u0110\uffcb" +
    "\u0111\uffcb\u0112\uffcb\u0116\uffcb\u0118\uffcb\u0119\uffcb\u0120\uffcb\u0122" +
    "\uffcb\u0123\uffcb\u0137\uffcb\u013b\uffcb\u013c\uffcb\u0140\uffcb\u0158\327" +
    "\u015c\uffcb\001\002\000\106\024\023\037\370\042\027\050" +
    "\057\110\354\140\040\152\372\214\066\230\363\231\072" +
    "\236\362\323\051\341\016\345\021\360\015\376\017\u0100" +
    "\060\u0105\065\u010d\024\u0110\070\u0111\035\u0112\034\u0116\071" +
    "\u0118\033\u0119\022\u0120\053\u0122\361\u0123\067\u0137\037\u013b" +
    "\063\u013c\044\u0140\303\u0158\043\u015c\123\001\002\000\004" +
    "\u0158\u014d\001\002\000\106\024\uffcc\037\uffcc\042\uffcc\050" +
    "\uffcc\110\uffcc\140\uffcc\152\uffcc\214\uffcc\230\uffcc\231\uffcc" +
    "\236\uffcc\323\uffcc\341\uffcc\345\uffcc\360\uffcc\376\uffcc\u0100" +
    "\uffcc\u0105\uffcc\u010d\uffcc\u0110\uffcc\u0111\uffcc\u0112\uffcc\u0116\uffcc" +
    "\u0118\uffcc\u0119\uffcc\u0120\uffcc\u0122\uffcc\u0123\uffcc\u0137\uffcc\u013b" +
    "\uffcc\u013c\uffcc\u0140\uffcc\u0158\uffcc\u015c\uffcc\001\002\000\004" +
    "\007\ufff5\001\002\000\110\024\uffcb\037\uffcb\042\uffcb\050" +
    "\uffcb\110\uffcb\140\uffcb\150\325\152\uffcb\214\uffcb\230\uffcb" +
    "\231\uffcb\236\uffcb\323\uffcb\341\uffcb\345\uffcb\360\uffcb\376" +
    "\uffcb\u0100\uffcb\u0105\uffcb\u010d\uffcb\u0110\uffcb\u0111\uffcb\u0112\uffcb" +
    "\u0116\uffcb\u0118\uffcb\u0119\uffcb\u0120\uffcb\u0122\uffcb\u0123\uffcb\u0137" +
    "\uffcb\u013b\uffcb\u013c\uffcb\u0140\uffcb\u0158\327\u015c\uffcb\001\002" +
    "\000\034\044\335\113\311\117\uff18\120\uff18\130\315\135" +
    "\uff28\140\307\165\uff18\214\312\267\uff18\327\uff18\u0153\uff18" +
    "\u0154\uff18\001\002\000\004\007\332\001\002\000\112\024" +
    "\uffcb\037\uffcb\042\uffcb\050\uffcb\110\uffcb\140\uffcb\150\325" +
    "\152\uffcb\214\uffcb\230\uffcb\231\uffcb\236\uffcb\323\uffcb\341" +
    "\uffcb\345\uffcb\360\uffcb\376\uffcb\u0100\uffcb\u0105\uffcb\u010d\uffcb" +
    "\u010e\324\u0110\uffcb\u0111\uffcb\u0112\uffcb\u0116\uffcb\u0118\uffcb\u0119" +
    "\uffcb\u0120\uffcb\u0122\uffcb\u0123\uffcb\u0137\uffcb\u013b\uffcb\u013c\uffcb" +
    "\u0140\uffcb\u0158\327\u015c\uffcb\001\002\000\036\044\ufff7\113" +
    "\ufff7\117\ufff7\120\ufff7\130\ufff7\135\ufff7\140\ufff7\165\ufff7" +
    "\214\ufff7\267\ufff7\327\ufff7\u0153\ufff7\u0154\ufff7\u0159\ufff7\001" +
    "\002\000\036\044\ufff4\113\ufff4\117\ufff4\120\ufff4\130\ufff4" +
    "\135\ufff4\140\ufff4\165\ufff4\214\ufff4\267\ufff4\327\ufff4\u0153" +
    "\ufff4\u0154\ufff4\u0159\ufff4\001\002\000\004\u0154\342\001\002" +
    "\000\020\117\uff1a\120\uff1a\165\uff1a\267\uff1a\327\uff1a\u0153" +
    "\uff1a\u0154\uff1a\001\002\000\020\117\uff19\120\uff19\165\uff19" +
    "\267\uff19\327\uff19\u0153\uff19\u0154\uff19\001\002\000\012\160" +
    "\277\161\301\u0140\303\u015c\305\001\002\000\020\117\uff1c" +
    "\120\uff1c\165\uff1c\267\uff1c\327\uff1c\u0153\uff1c\u0154\uff1c\001" +
    "\002\000\004\135\343\001\002\000\034\044\335\113\311" +
    "\117\uff18\120\uff18\130\315\135\uff28\140\307\165\uff18\214" +
    "\312\267\uff18\327\uff18\u0153\uff18\u0154\uff18\001\002\000\020" +
    "\117\uff1b\120\uff1b\165\uff1b\267\uff1b\327\uff1b\u0153\uff1b\u0154" +
    "\uff1b\001\002\000\004\u0159\346\001\002\000\010\007\uffd1" +
    "\164\350\u0159\uffd1\001\002\000\006\007\uffd3\u0159\uffd3\001" +
    "\002\000\110\024\023\037\370\042\027\050\057\110\354" +
    "\140\040\150\355\152\372\214\066\230\363\231\072\236" +
    "\362\323\051\341\016\345\021\360\015\376\017\u0100\060" +
    "\u0105\065\u010d\024\u0110\070\u0111\035\u0112\034\u0116\071\u0118" +
    "\033\u0119\022\u0120\053\u0122\361\u0123\067\u0137\037\u013b\063" +
    "\u013c\044\u0140\303\u0158\365\u015c\123\001\002\000\006\007" +
    "\uffcf\u0159\uffcf\001\002\000\006\007\uffd2\u0159\uffd2\001\002" +
    "\000\040\007\uffeb\016\uffeb\074\uffeb\126\uffeb\134\uffeb\141" +
    "\uffeb\150\uffeb\164\uffeb\u0146\uffeb\u014a\uffeb\u014c\uffeb\u014d\uffeb" +
    "\u014f\uffeb\u0154\uffeb\u0159\uffeb\001\002\000\004\u0158\u0145\001" +
    "\002\000\106\024\023\037\370\042\027\050\057\110\354" +
    "\140\040\152\372\214\066\230\363\231\072\236\362\323" +
    "\051\341\016\345\021\360\015\376\017\u0100\060\u0105\065" +
    "\u010d\024\u0110\070\u0111\035\u0112\034\u0116\071\u0118\033\u0119" +
    "\022\u0120\053\u0122\361\u0123\067\u0137\037\u013b\063\u013c\044" +
    "\u0140\303\u0158\365\u015c\123\001\002\000\040\007\uffee\016" +
    "\uffee\074\uffee\126\uffee\134\uffee\141\uffee\150\uffee\164\uffee" +
    "\u0146\uffee\u014a\uffee\u014c\uffee\u014d\uffee\u014f\uffee\u0154\uffee\u0159" +
    "\uffee\001\002\000\040\007\ufff0\016\ufff0\074\ufff0\126\ufff0" +
    "\134\ufff0\141\ufff0\150\ufff0\164\ufff0\u0146\ufff0\u014a\ufff0\u014c" +
    "\ufff0\u014d\ufff0\u014f\ufff0\u0154\ufff0\u0159\ufff0\001\002\000\026" +
    "\016\u0125\126\u0123\134\u0128\141\u0127\150\u0126\u0146\171\u014a" +
    "\173\u014c\174\u014d\167\u014f\176\001\002\000\004\u012a\u0111" +
    "\001\002\000\040\007\uff83\016\uff83\074\uff83\126\uff83\134" +
    "\uff83\141\uff83\150\uff83\164\uff83\u0146\uff83\u014a\uff83\u014c\uff83" +
    "\u014d\uff83\u014f\uff83\u0154\uff83\u0159\uff83\001\002\000\040\007" +
    "\uff82\016\uff82\074\uff82\126\uff82\134\uff82\141\uff82\150\uff82" +
    "\164\uff82\u0146\uff82\u014a\uff82\u014c\uff82\u014d\uff82\u014f\uff82\u0154" +
    "\uff82\u0159\uff82\001\002\000\040\007\uffef\016\uffef\074\uffef" +
    "\126\uffef\134\uffef\141\uffef\150\uffef\164\uffef\u0146\uffef\u014a" +
    "\uffef\u014c\uffef\u014d\uffef\u014f\uffef\u0154\uffef\u0159\uffef\001\002" +
    "\000\110\024\uffcb\037\uffcb\042\uffcb\050\uffcb\110\uffcb\140" +
    "\uffcb\150\325\152\uffcb\214\uffcb\230\uffcb\231\uffcb\236\uffcb" +
    "\323\051\341\uffcb\345\uffcb\360\uffcb\376\uffcb\u0100\060\u0105" +
    "\065\u010d\uffcb\u0110\070\u0111\035\u0112\uffcb\u0116\uffcb\u0118\uffcb" +
    "\u0119\uffcb\u0120\uffcb\u0122\uffcb\u0123\uffcb\u0137\uffcb\u013b\063\u013c" +
    "\044\u0140\uffcb\u0158\u010c\u015c\123\001\002\000\050\007\uffed" +
    "\016\uffed\074\uffed\126\uffed\134\uffed\141\uffed\150\uffed\164" +
    "\uffed\u0141\uffbb\u0142\uffbb\u0143\uffbb\u0144\uffbb\u0146\uffed\u014a\uffed" +
    "\u014c\uffed\u014d\uffed\u014f\uffed\u0154\uffed\u0159\uffed\001\002\000" +
    "\010\007\uffd1\164\350\u0159\uffd1\001\002\000\004\u0158\u0102" +
    "\001\002\000\040\007\uffe9\016\uffe9\074\uffe9\126\uffe9\134" +
    "\uffe9\141\uffe9\150\uffe9\164\uffe9\u0146\uffe9\u014a\uffe9\u014c\uffe9" +
    "\u014d\uffe9\u014f\uffe9\u0154\uffe9\u0159\uffe9\001\002\000\004\u0158" +
    "\375\001\002\000\040\007\uffec\016\uffec\074\uffec\126\uffec" +
    "\134\uffec\141\uffec\150\uffec\164\uffec\u0146\uffec\u014a\uffec\u014c" +
    "\uffec\u014d\uffec\u014f\uffec\u0154\uffec\u0159\uffec\001\002\000\040" +
    "\007\uffea\016\uffea\074\uffea\126\uffea\134\uffea\141\uffea\150" +
    "\uffea\164\uffea\u0146\uffea\u014a\uffea\u014c\uffea\u014d\uffea\u014f\uffea" +
    "\u0154\uffea\u0159\uffea\001\002\000\034\150\032\323\051\u0100" +
    "\060\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u013e\042" +
    "\u0140\163\u0154\uff5a\u0158\043\u015c\123\001\002\000\004\u0154" +
    "\377\001\002\000\034\150\032\323\051\u0100\060\u0105\065" +
    "\u0110\070\u0111\035\u013b\063\u013c\044\u013e\042\u0140\163\u0158" +
    "\043\u0159\uff5a\u015c\123\001\002\000\004\u0159\u0101\001\002" +
    "\000\040\007\uff81\016\uff81\074\uff81\126\uff81\134\uff81\141" +
    "\uff81\150\uff81\164\uff81\u0146\uff81\u014a\uff81\u014c\uff81\u014d\uff81" +
    "\u014f\uff81\u0154\uff81\u0159\uff81\001\002\000\006\u0140\303\u0143" +
    "\u0105\001\002\000\004\u0154\u0106\001\002\000\004\u0154\uffd8" +
    "\001\002\000\004\u0154\uffd9\001\002\000\112\024\uffcb\037" +
    "\uffcb\042\uffcb\050\uffcb\110\uffcb\140\uffcb\150\325\152\uffcb" +
    "\214\uffcb\230\uffcb\231\uffcb\236\uffcb\323\uffcb\341\uffcb\345" +
    "\uffcb\360\uffcb\376\uffcb\u0100\uffcb\u0105\uffcb\u010d\uffcb\u010e\324" +
    "\u0110\uffcb\u0111\uffcb\u0112\uffcb\u0116\uffcb\u0118\uffcb\u0119\uffcb\u0120" +
    "\uffcb\u0122\uffcb\u0123\uffcb\u0137\uffcb\u013b\uffcb\u013c\uffcb\u0140\uffcb" +
    "\u0158\327\u015c\uffcb\001\002\000\004\u0159\u0109\001\002\000" +
    "\004\u0159\uffd7\001\002\000\010\007\ufff2\164\ufff2\u0159\ufff2" +
    "\001\002\000\006\007\uffce\u0159\uffce\001\002\000\004\u0159" +
    "\u0110\001\002\000\110\024\uffcb\037\uffcb\042\uffcb\050\uffcb" +
    "\110\uffcb\140\uffcb\150\325\152\uffcb\214\uffcb\230\uffcb\231" +
    "\uffcb\236\uffcb\323\051\341\uffcb\345\uffcb\360\uffcb\376\uffcb" +
    "\u0100\060\u0105\065\u010d\uffcb\u0110\070\u0111\035\u0112\uffcb\u0116" +
    "\uffcb\u0118\uffcb\u0119\uffcb\u0120\uffcb\u0122\uffcb\u0123\uffcb\u0137\uffcb" +
    "\u013b\063\u013c\044\u0140\uffcb\u0158\u010c\u015c\123\001\002\000" +
    "\004\u0159\u010e\001\002\000\010\007\uffd1\164\350\u0159\uffd1" +
    "\001\002\000\006\007\uffcd\u0159\uffcd\001\002\000\120\007" +
    "\uffbf\011\uffbf\012\uffbf\016\uffbf\032\uffbf\062\uffbf\071\uffbf" +
    "\072\uffbf\074\uffbf\112\uffbf\117\uffbf\120\uffbf\126\uffbf\133" +
    "\uffbf\134\uffbf\141\uffbf\150\uffbf\164\uffbf\165\uffbf\170\uffbf" +
    "\242\uffbf\266\uffbf\267\uffbf\327\uffbf\333\uffbf\u0140\uffbf\u0141" +
    "\uffbf\u0142\uffbf\u0143\uffbf\u0144\uffbf\u0145\uffbf\u0146\uffbf\u014a\uffbf" +
    "\u014c\uffbf\u014d\uffbf\u014f\uffbf\u0153\uffbf\u0154\uffbf\u0159\uffbf\001" +
    "\002\000\004\106\u0112\001\002\000\004\u0140\u0113\001\002" +
    "\000\006\167\u0116\u0155\u0118\001\002\000\040\007\uff7d\016" +
    "\uff7d\074\uff7d\126\uff7d\134\uff7d\141\uff7d\150\uff7d\164\uff7d" +
    "\u0146\uff7d\u014a\uff7d\u014c\uff7d\u014d\uff7d\u014f\uff7d\u0154\uff7d\u0159" +
    "\uff7d\001\002\000\040\007\uff7f\016\uff7f\074\uff7f\126\uff7f" +
    "\134\uff7f\141\uff7f\150\uff7f\164\uff7f\u0146\uff7f\u014a\uff7f\u014c" +
    "\uff7f\u014d\uff7f\u014f\uff7f\u0154\uff7f\u0159\uff7f\001\002\000\004" +
    "\165\u011f\001\002\000\040\007\uff84\016\uff84\074\uff84\126" +
    "\uff84\134\uff84\141\uff84\150\uff84\164\uff84\u0146\uff84\u014a\uff84" +
    "\u014c\uff84\u014d\uff84\u014f\uff84\u0154\uff84\u0159\uff84\001\002\000" +
    "\004\u0140\u0119\001\002\000\006\167\u0116\u0155\u011c\001\002" +
    "\000\040\007\uff7e\016\uff7e\074\uff7e\126\uff7e\134\uff7e\141" +
    "\uff7e\150\uff7e\164\uff7e\u0146\uff7e\u014a\uff7e\u014c\uff7e\u014d\uff7e" +
    "\u014f\uff7e\u0154\uff7e\u0159\uff7e\001\002\000\040\007\uff80\016" +
    "\uff80\074\uff80\126\uff80\134\uff80\141\uff80\150\uff80\164\uff80" +
    "\u0146\uff80\u014a\uff80\u014c\uff80\u014d\uff80\u014f\uff80\u0154\uff80\u0159" +
    "\uff80\001\002\000\004\u0140\u011d\001\002\000\004\167\u0116" +
    "\001\002\000\040\007\uff7e\016\uff7e\074\uff7e\126\uff7e\134" +
    "\uff7e\141\uff7e\150\uff7e\164\uff7e\u0146\uff7e\u014a\uff7e\u014c\uff7e" +
    "\u014d\uff7e\u014f\uff7e\u0154\uff7e\u0159\uff7e\001\002\000\004\022" +
    "\u0120\001\002\000\112\011\uff5a\012\uff5a\024\023\032\uff5a" +
    "\042\027\050\057\062\uff5a\140\040\150\032\214\066\231" +
    "\072\323\051\341\016\345\021\360\015\376\017\u0100\060" +
    "\u0105\065\u010d\024\u0110\070\u0111\035\u0112\034\u0116\071\u0118" +
    "\033\u0119\022\u0120\053\u0123\067\u0137\037\u013b\063\u013c\044" +
    "\u013e\042\u0140\056\u0143\064\u0154\uff5a\u0158\043\u015c\030\001" +
    "\002\000\040\007\uff7c\016\uff7c\074\uff7c\126\uff7c\134\uff7c" +
    "\141\uff7c\150\uff7c\164\uff7c\u0146\uff7c\u014a\uff7c\u014c\uff7c\u014d" +
    "\uff7c\u014f\uff7c\u0154\uff7c\u0159\uff7c\001\002\000\102\024\023" +
    "\042\027\050\057\140\040\152\372\214\066\230\363\231" +
    "\072\236\362\323\051\341\016\345\021\360\015\376\017" +
    "\u0100\060\u0105\065\u010d\024\u0110\070\u0111\035\u0112\034\u0116" +
    "\071\u0118\033\u0119\022\u0120\053\u0122\361\u0123\067\u0137\037" +
    "\u013b\063\u013c\044\u0140\303\u0158\043\u015c\123\001\002\000" +
    "\102\024\023\042\027\050\057\140\040\152\372\214\066" +
    "\230\363\231\072\236\362\323\051\341\016\345\021\360" +
    "\015\376\017\u0100\060\u0105\065\u010d\024\u0110\070\u0111\035" +
    "\u0112\034\u0116\071\u0118\033\u0119\022\u0120\053\u0122\361\u0123" +
    "\067\u0137\037\u013b\063\u013c\044\u0140\303\u0158\043\u015c\123" +
    "\001\002\000\010\007\ufff3\164\ufff3\u0159\ufff3\001\002\000" +
    "\102\024\023\042\027\050\057\140\040\152\372\214\066" +
    "\230\363\231\072\236\362\323\051\341\016\345\021\360" +
    "\015\376\017\u0100\060\u0105\065\u010d\024\u0110\070\u0111\035" +
    "\u0112\034\u0116\071\u0118\033\u0119\022\u0120\053\u0122\361\u0123" +
    "\067\u0137\037\u013b\063\u013c\044\u0140\303\u0158\043\u015c\123" +
    "\001\002\000\010\016\u0132\126\u0131\141\u0130\001\002\000" +
    "\102\024\023\042\027\050\057\140\040\152\372\214\066" +
    "\230\363\231\072\236\362\323\051\341\016\345\021\360" +
    "\015\376\017\u0100\060\u0105\065\u010d\024\u0110\070\u0111\035" +
    "\u0112\034\u0116\071\u0118\033\u0119\022\u0120\053\u0122\361\u0123" +
    "\067\u0137\037\u013b\063\u013c\044\u0140\303\u0158\043\u015c\123" +
    "\001\002\000\006\150\u0129\151\uffde\001\002\000\004\151" +
    "\uffdf\001\002\000\004\151\u012b\001\002\000\010\007\uffe4" +
    "\164\uffe4\u0159\uffe4\001\002\000\012\007\uffda\074\u012e\164" +
    "\uffda\u0159\uffda\001\002\000\010\007\uffe6\164\uffe6\u0159\uffe6" +
    "\001\002\000\004\u013e\u012f\001\002\000\010\007\uffdb\164" +
    "\uffdb\u0159\uffdb\001\002\000\102\024\023\042\027\050\057" +
    "\140\040\152\372\214\066\230\363\231\072\236\362\323" +
    "\051\341\016\345\021\360\015\376\017\u0100\060\u0105\065" +
    "\u010d\024\u0110\070\u0111\035\u0112\034\u0116\071\u0118\033\u0119" +
    "\022\u0120\053\u0122\361\u0123\067\u0137\037\u013b\063\u013c\044" +
    "\u0140\303\u0158\043\u015c\123\001\002\000\102\024\023\042" +
    "\027\050\057\140\040\152\372\214\066\230\363\231\072" +
    "\236\362\323\051\341\016\345\021\360\015\376\017\u0100" +
    "\060\u0105\065\u010d\024\u0110\070\u0111\035\u0112\034\u0116\071" +
    "\u0118\033\u0119\022\u0120\053\u0122\361\u0123\067\u0137\037\u013b" +
    "\063\u013c\044\u0140\303\u0158\043\u015c\123\001\002\000\102" +
    "\024\023\042\027\050\057\140\040\152\372\214\066\230" +
    "\363\231\072\236\362\323\051\341\016\345\021\360\015" +
    "\376\017\u0100\060\u0105\065\u010d\024\u0110\070\u0111\035\u0112" +
    "\034\u0116\071\u0118\033\u0119\022\u0120\053\u0122\361\u0123\067" +
    "\u0137\037\u013b\063\u013c\044\u0140\303\u0158\043\u015c\123\001" +
    "\002\000\010\007\uffe7\164\uffe7\u0159\uffe7\001\002\000\004" +
    "\007\u0135\001\002\000\102\024\023\042\027\050\057\140" +
    "\040\152\372\214\066\230\363\231\072\236\362\323\051" +
    "\341\016\345\021\360\015\376\017\u0100\060\u0105\065\u010d" +
    "\024\u0110\070\u0111\035\u0112\034\u0116\071\u0118\033\u0119\022" +
    "\u0120\053\u0122\361\u0123\067\u0137\037\u013b\063\u013c\044\u0140" +
    "\303\u0158\043\u015c\123\001\002\000\010\007\uffe1\164\uffe1" +
    "\u0159\uffe1\001\002\000\012\007\uffdc\164\uffdc\u0154\u0138\u0159" +
    "\uffdc\001\002\000\102\024\023\042\027\050\057\140\040" +
    "\152\372\214\066\230\363\231\072\236\362\323\051\341" +
    "\016\345\021\360\015\376\017\u0100\060\u0105\065\u010d\024" +
    "\u0110\070\u0111\035\u0112\034\u0116\071\u0118\033\u0119\022\u0120" +
    "\053\u0122\361\u0123\067\u0137\037\u013b\063\u013c\044\u0140\303" +
    "\u0158\043\u015c\123\001\002\000\010\007\uffe0\164\uffe0\u0159" +
    "\uffe0\001\002\000\012\007\uffdc\164\uffdc\u0154\u0138\u0159\uffdc" +
    "\001\002\000\010\007\uffdd\164\uffdd\u0159\uffdd\001\002\000" +
    "\012\007\uffda\074\u012e\164\uffda\u0159\uffda\001\002\000\010" +
    "\007\uffe2\164\uffe2\u0159\uffe2\001\002\000\004\007\u013f\001" +
    "\002\000\102\024\023\042\027\050\057\140\040\152\372" +
    "\214\066\230\363\231\072\236\362\323\051\341\016\345" +
    "\021\360\015\376\017\u0100\060\u0105\065\u010d\024\u0110\070" +
    "\u0111\035\u0112\034\u0116\071\u0118\033\u0119\022\u0120\053\u0122" +
    "\361\u0123\067\u0137\037\u013b\063\u013c\044\u0140\303\u0158\043" +
    "\u015c\123\001\002\000\010\007\uffe5\164\uffe5\u0159\uffe5\001" +
    "\002\000\012\007\uffdc\164\uffdc\u0154\u0138\u0159\uffdc\001\002" +
    "\000\010\007\uffe3\164\uffe3\u0159\uffe3\001\002\000\010\007" +
    "\uffe8\164\uffe8\u0159\uffe8\001\002\000\006\007\uffd0\u0159\uffd0" +
    "\001\002\000\006\u0140\303\u0143\u0105\001\002\000\004\u0154" +
    "\u0147\001\002\000\006\u013e\u0149\u015c\u0148\001\002\000\004" +
    "\u0140\u014c\001\002\000\004\u0159\uffd6\001\002\000\004\u0159" +
    "\u014b\001\002\000\010\007\ufff1\164\ufff1\u0159\ufff1\001\002" +
    "\000\004\u0159\uffd5\001\002\000\004\u0140\u014e\001\002\000" +
    "\006\u0142\u0151\u014d\u0152\001\002\000\004\u0159\u0150\001\002" +
    "\000\004\007\ufff6\001\002\000\004\u0158\u015a\001\002\000" +
    "\004\u0142\u0155\001\002\000\004\u0140\u0154\001\002\000\004" +
    "\u0159\uffca\001\002\000\004\u0158\u0156\001\002\000\004\u0140" +
    "\u0157\001\002\000\004\u0159\u0158\001\002\000\004\u0142\u0159" +
    "\001\002\000\004\u0140\uffc9\001\002\000\004\u0140\u015b\001" +
    "\002\000\004\u0159\u015c\001\002\000\004\u0142\u015d\001\002" +
    "\000\004\u014c\u015e\001\002\000\004\u0140\uffc8\001\002\000" +
    "\010\007\uffd1\164\350\u0159\uffd1\001\002\000\006\007\uffd4" +
    "\u0159\uffd4\001\002\000\012\160\uff2b\161\uff2b\u0140\uff2b\u015c" +
    "\uff2b\001\002\000\004\135\uff23\001\002\000\004\135\uff26" +
    "\001\002\000\004\135\uff25\001\002\000\004\135\u0166\001" +
    "\002\000\034\044\335\113\311\117\uff18\120\uff18\130\315" +
    "\135\uff28\140\307\165\uff18\214\312\267\uff18\327\uff18\u0153" +
    "\uff18\u0154\uff18\001\002\000\020\117\uff1e\120\uff1e\165\uff1e" +
    "\267\uff1e\327\uff1e\u0153\uff1e\u0154\uff1e\001\002\000\004\135" +
    "\uff27\001\002\000\042\011\u016a\044\uff12\113\uff12\117\uff12" +
    "\120\uff12\130\uff12\135\uff12\140\uff12\156\uff12\165\uff12\214" +
    "\uff12\267\uff12\327\uff12\u0140\u016b\u0153\uff12\u0154\uff12\001\002" +
    "\000\004\u0140\u016d\001\002\000\040\044\uff13\113\uff13\117" +
    "\uff13\120\uff13\130\uff13\135\uff13\140\uff13\156\uff13\165\uff13" +
    "\214\uff13\240\uff13\267\uff13\327\uff13\u0153\uff13\u0154\uff13\001" +
    "\002\000\036\044\uff15\113\uff15\117\uff15\120\uff15\130\uff15" +
    "\135\uff15\140\uff15\156\uff15\165\uff15\214\uff15\267\uff15\327" +
    "\uff15\u0153\uff15\u0154\uff15\001\002\000\040\044\uff14\113\uff14" +
    "\117\uff14\120\uff14\130\uff14\135\uff14\140\uff14\156\uff14\165" +
    "\uff14\214\uff14\240\uff14\267\uff14\327\uff14\u0153\uff14\u0154\uff14" +
    "\001\002\000\006\327\ufee3\u0153\ufee3\001\002\000\006\327" +
    "\ufed8\u0153\ufed8\001\002\000\014\160\277\161\301\u0140\303" +
    "\u0158\302\u015c\305\001\002\000\020\117\254\120\251\165" +
    "\256\267\242\327\ufeda\u0153\ufeda\u0154\u0170\001\002\000\006" +
    "\327\ufed9\u0153\ufed9\001\002\000\102\007\ufffe\011\ufffe\016" +
    "\ufffe\044\ufffe\074\ufffe\112\ufffe\113\ufffe\117\ufffe\120\ufffe" +
    "\126\ufffe\130\ufffe\134\ufffe\135\ufffe\140\ufffe\141\ufffe\150" +
    "\ufffe\156\ufffe\164\ufffe\165\ufffe\214\ufffe\240\ufffe\267\ufffe" +
    "\327\ufffe\u0140\ufffe\u0146\ufffe\u014a\ufffe\u014c\ufffe\u014d\ufffe\u014f" +
    "\ufffe\u0153\ufffe\u0154\ufffe\u0159\ufffe\001\002\000\004\u0140\u0175" +
    "\001\002\000\104\007\ufffa\011\ufffa\016\ufffa\044\ufffa\074" +
    "\ufffa\112\ufffa\113\ufffa\117\ufffa\120\ufffa\126\ufffa\130\ufffa" +
    "\134\ufffa\135\ufffa\140\ufffa\141\ufffa\150\ufffa\156\ufffa\164" +
    "\ufffa\165\ufffa\214\ufffa\240\ufffa\267\ufffa\327\ufffa\u0140\ufffa" +
    "\u0146\ufffa\u014a\ufffa\u014c\ufffa\u014d\ufffa\u014f\ufffa\u0153\ufffa\u0154" +
    "\ufffa\u0155\u0177\u0159\ufffa\001\002\000\102\007\ufffd\011\ufffd" +
    "\016\ufffd\044\ufffd\074\ufffd\112\ufffd\113\ufffd\117\ufffd\120" +
    "\ufffd\126\ufffd\130\ufffd\134\ufffd\135\ufffd\140\ufffd\141\ufffd" +
    "\150\ufffd\156\ufffd\164\ufffd\165\ufffd\214\ufffd\240\ufffd\267" +
    "\ufffd\327\ufffd\u0140\ufffd\u0146\ufffd\u014a\ufffd\u014c\ufffd\u014d\ufffd" +
    "\u014f\ufffd\u0153\ufffd\u0154\ufffd\u0159\ufffd\001\002\000\004\u0140" +
    "\u0178\001\002\000\104\007\ufff8\011\ufff8\016\ufff8\044\ufff8" +
    "\074\ufff8\112\ufff8\113\ufff8\117\ufff8\120\ufff8\126\ufff8\130" +
    "\ufff8\134\ufff8\135\ufff8\140\ufff8\141\ufff8\150\ufff8\156\ufff8" +
    "\164\ufff8\165\ufff8\214\ufff8\240\ufff8\267\ufff8\327\ufff8\u0140" +
    "\ufff8\u0146\ufff8\u014a\ufff8\u014c\ufff8\u014d\ufff8\u014f\ufff8\u0153\ufff8" +
    "\u0154\ufff8\u0155\u017a\u0159\ufff8\001\002\000\102\007\ufffb\011" +
    "\ufffb\016\ufffb\044\ufffb\074\ufffb\112\ufffb\113\ufffb\117\ufffb" +
    "\120\ufffb\126\ufffb\130\ufffb\134\ufffb\135\ufffb\140\ufffb\141" +
    "\ufffb\150\ufffb\156\ufffb\164\ufffb\165\ufffb\214\ufffb\240\ufffb" +
    "\267\ufffb\327\ufffb\u0140\ufffb\u0146\ufffb\u014a\ufffb\u014c\ufffb\u014d" +
    "\ufffb\u014f\ufffb\u0153\ufffb\u0154\ufffb\u0159\ufffb\001\002\000\004" +
    "\u0140\u017b\001\002\000\102\007\ufff9\011\ufff9\016\ufff9\044" +
    "\ufff9\074\ufff9\112\ufff9\113\ufff9\117\ufff9\120\ufff9\126\ufff9" +
    "\130\ufff9\134\ufff9\135\ufff9\140\ufff9\141\ufff9\150\ufff9\156" +
    "\ufff9\164\ufff9\165\ufff9\214\ufff9\240\ufff9\267\ufff9\327\ufff9" +
    "\u0140\ufff9\u0146\ufff9\u014a\ufff9\u014c\ufff9\u014d\ufff9\u014f\ufff9\u0153" +
    "\ufff9\u0154\ufff9\u0159\ufff9\001\002\000\004\u0159\u017d\001\002" +
    "\000\020\117\uff20\120\uff20\165\uff20\267\uff20\327\uff20\u0153" +
    "\uff20\u0154\uff20\001\002\000\004\u0140\u017f\001\002\000\004" +
    "\u0154\u0180\001\002\000\004\u013e\u0181\001\002\000\004\u0159" +
    "\u0182\001\002\000\042\011\uff31\044\uff31\113\uff31\117\uff31" +
    "\120\uff31\130\uff31\135\uff31\140\uff31\156\uff31\165\uff31\214" +
    "\uff31\267\uff31\327\uff31\u0140\uff31\u0153\uff31\u0154\uff31\001\002" +
    "\000\040\044\uff10\113\uff10\117\uff10\120\uff10\130\uff10\135" +
    "\uff10\140\uff10\156\uff10\165\uff10\214\uff10\240\u0184\267\uff10" +
    "\327\uff10\u0153\uff10\u0154\uff10\001\002\000\004\u0158\u0187\001" +
    "\002\000\036\044\uff17\113\uff17\117\uff17\120\uff17\130\uff17" +
    "\135\uff17\140\uff17\156\uff17\165\uff17\214\uff17\267\uff17\327" +
    "\uff17\u0153\uff17\u0154\uff17\001\002\000\036\044\uff11\113\uff11" +
    "\117\uff11\120\uff11\130\uff11\135\uff11\140\uff11\156\uff11\165" +
    "\uff11\214\uff11\267\uff11\327\uff11\u0153\uff11\u0154\uff11\001\002" +
    "\000\024\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b" +
    "\063\u013c\044\u0158\043\u015c\123\001\002\000\010\170\u018c" +
    "\333\u018b\u0159\uff2c\001\002\000\004\u0159\u018a\001\002\000" +
    "\036\044\uff30\113\uff30\117\uff30\120\uff30\130\uff30\135\uff30" +
    "\140\uff30\156\uff30\165\uff30\214\uff30\267\uff30\327\uff30\u0153" +
    "\uff30\u0154\uff30\001\002\000\004\u0159\uff2d\001\002\000\004" +
    "\u0159\uff2e\001\002\000\004\u0159\uff2f\001\002\000\004\u013e" +
    "\u018f\001\002\000\004\u0154\u0190\001\002\000\004\u013e\u0191" +
    "\001\002\000\004\u0159\u0192\001\002\000\042\011\uff32\044" +
    "\uff32\113\uff32\117\uff32\120\uff32\130\uff32\135\uff32\140\uff32" +
    "\156\uff32\165\uff32\214\uff32\267\uff32\327\uff32\u0140\uff32\u0153" +
    "\uff32\u0154\uff32\001\002\000\036\044\uff16\113\uff16\117\uff16" +
    "\120\uff16\130\uff16\135\uff16\140\uff16\156\uff16\165\uff16\214" +
    "\uff16\267\uff16\327\uff16\u0153\uff16\u0154\uff16\001\002\000\044" +
    "\120\uff5a\150\032\165\uff5a\323\051\327\uff5a\u0100\060\u0105" +
    "\065\u0110\070\u0111\035\u013b\063\u013c\044\u013e\042\u0140\163" +
    "\u0153\uff5a\u0154\uff5a\u0158\043\u015c\123\001\002\000\014\120" +
    "\ufed6\165\ufed6\327\ufed6\u0153\ufed6\u0154\u0196\001\002\000\044" +
    "\120\uff5a\150\032\165\uff5a\323\051\327\uff5a\u0100\060\u0105" +
    "\065\u0110\070\u0111\035\u013b\063\u013c\044\u013e\042\u0140\163" +
    "\u0153\uff5a\u0154\uff5a\u0158\043\u015c\123\001\002\000\012\120" +
    "\251\165\256\327\ufeda\u0153\ufeda\001\002\000\006\327\ufedf" +
    "\u0153\ufedf\001\002\000\014\120\ufed6\165\ufed6\327\ufed6\u0153" +
    "\ufed6\u0154\u0196\001\002\000\012\120\ufed7\165\ufed7\327\ufed7" +
    "\u0153\ufed7\001\002\000\006\327\ufee8\u0153\ufee8\001\002\000" +
    "\010\165\256\327\ufeda\u0153\ufeda\001\002\000\006\327\ufedd" +
    "\u0153\ufedd\001\002\000\020\112\255\117\254\120\251\165" +
    "\256\267\242\327\ufeda\u0153\ufeda\001\002\000\006\327\ufee6" +
    "\u0153\ufee6\001\002\000\006\327\ufee4\u0153\ufee4\001\002\000" +
    "\014\117\254\120\251\165\256\327\ufeda\u0153\ufeda\001\002" +
    "\000\006\327\ufee1\u0153\ufee1\001\002\000\032\005\u01a7\064" +
    "\u01a4\323\uff73\u0100\uff73\u0105\uff73\u0110\uff73\u0111\uff73\u013b\uff73" +
    "\u013c\uff73\u0140\uff73\u0158\uff73\u015c\uff73\001\002\000\026\323" +
    "\uff74\u0100\uff74\u0105\uff74\u0110\uff74\u0111\uff74\u013b\uff74\u013c\uff74" +
    "\u0140\uff74\u0158\uff74\u015c\uff74\001\002\000\026\323\051\u0100" +
    "\060\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u0140\u01ab" +
    "\u0158\043\u015c\123\001\002\000\004\u0159\u01a8\001\002\000" +
    "\026\323\uff75\u0100\uff75\u0105\uff75\u0110\uff75\u0111\uff75\u013b\uff75" +
    "\u013c\uff75\u0140\uff75\u0158\uff75\u015c\uff75\001\002\000\120\007" +
    "\uff7b\011\uff7b\012\uff7b\016\uff7b\032\uff7b\062\uff7b\071\uff7b" +
    "\072\uff7b\074\uff7b\112\uff7b\117\uff7b\120\uff7b\126\uff7b\133" +
    "\uff7b\134\uff7b\141\uff7b\150\uff7b\164\uff7b\165\uff7b\170\uff7b" +
    "\242\uff7b\266\uff7b\267\uff7b\327\uff7b\333\uff7b\u0140\uff7b\u0141" +
    "\uff7b\u0142\uff7b\u0143\uff7b\u0144\uff7b\u0145\uff7b\u0146\uff7b\u014a\uff7b" +
    "\u014c\uff7b\u014d\uff7b\u014f\uff7b\u0153\uff7b\u0154\uff7b\u0159\uff7b\001" +
    "\002\000\004\u0159\uff72\001\002\000\004\u0159\uff76\001\002" +
    "\000\006\u0155\u01ad\u0159\uff6f\001\002\000\004\u0159\uff71\001" +
    "\002\000\004\u0140\u01ae\001\002\000\004\u0159\uff70\001\002" +
    "\000\024\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b" +
    "\063\u013c\044\u0158\043\u015c\123\001\002\000\006\327\ufeee" +
    "\u0153\ufeee\001\002\000\004\u0159\u01b2\001\002\000\126\011" +
    "\uff5a\024\023\042\027\050\057\112\uff5a\117\uff5a\120\uff5a" +
    "\133\uff5a\140\040\150\032\165\uff5a\170\u01b3\214\066\231" +
    "\072\267\uff5a\323\051\327\uff5a\341\016\345\021\360\015" +
    "\376\017\u0100\060\u0105\065\u010d\024\u0110\070\u0111\035\u0112" +
    "\034\u0116\071\u0118\033\u0119\022\u0120\053\u0123\067\u0137\037" +
    "\u013b\063\u013c\044\u013e\042\u0140\056\u0143\064\u0153\uff5a\u0154" +
    "\uff5a\u0158\043\u015c\030\001\002\000\124\011\uff5a\024\023" +
    "\042\027\050\057\112\uff5a\117\uff5a\120\uff5a\133\uff5a\140" +
    "\040\150\032\165\uff5a\214\066\231\072\267\uff5a\323\051" +
    "\327\uff5a\341\016\345\021\360\015\376\017\u0100\060\u0105" +
    "\065\u010d\024\u0110\070\u0111\035\u0112\034\u0116\071\u0118\033" +
    "\u0119\022\u0120\053\u0123\067\u0137\037\u013b\063\u013c\044\u013e" +
    "\042\u0140\056\u0143\064\u0153\uff5a\u0154\uff5a\u0158\043\u015c\030" +
    "\001\002\000\006\327\ufeea\u0153\ufeea\001\002\000\006\327" +
    "\ufeec\u0153\ufeec\001\002\000\006\327\ufeeb\u0153\ufeeb\001\002" +
    "\000\036\011\uffb5\012\uffb5\032\uffb5\062\uffb5\112\uffb5\117" +
    "\uffb5\120\uffb5\133\uffb5\165\uffb5\267\uffb5\327\uffb5\u0140\uffb5" +
    "\u0153\uffb5\u0154\uffb5\001\002\000\030\323\uff49\u0100\uff49\u0105" +
    "\uff49\u0110\uff49\u0111\uff49\u013b\uff49\u013c\uff49\u013e\uff49\u0140\uff49" +
    "\u0158\uff49\u015c\uff49\001\002\000\030\323\uff58\u0100\uff58\u0105" +
    "\uff58\u0110\uff58\u0111\uff58\u013b\uff58\u013c\uff58\u013e\uff58\u0140\uff58" +
    "\u0158\uff58\u015c\uff58\001\002\000\030\323\uff4a\u0100\uff4a\u0105" +
    "\uff4a\u0110\uff4a\u0111\uff4a\u013b\uff4a\u013c\uff4a\u013e\uff4a\u0140\uff4a" +
    "\u0158\uff4a\u015c\uff4a\001\002\000\030\323\uff48\u0100\uff48\u0105" +
    "\uff48\u0110\uff48\u0111\uff48\u013b\uff48\u013c\uff48\u013e\uff48\u0140\uff48" +
    "\u0158\uff48\u015c\uff48\001\002\000\030\323\uff57\u0100\uff57\u0105" +
    "\uff57\u0110\uff57\u0111\uff57\u013b\uff57\u013c\uff57\u013e\uff57\u0140\uff57" +
    "\u0158\uff57\u015c\uff57\001\002\000\030\323\051\u0100\060\u0105" +
    "\065\u0110\070\u0111\035\u013b\063\u013c\044\u013e\u01c1\u0140\u01c4" +
    "\u0158\043\u015c\123\001\002\000\030\323\uff59\u0100\uff59\u0105" +
    "\uff59\u0110\uff59\u0111\uff59\u013b\uff59\u013c\uff59\u013e\uff59\u0140\uff59" +
    "\u0158\uff59\u015c\uff59\001\002\000\030\323\uff46\u0100\uff46\u0105" +
    "\uff46\u0110\uff46\u0111\uff46\u013b\uff46\u013c\uff46\u013e\uff46\u0140\uff46" +
    "\u0158\uff46\u015c\uff46\001\002\000\030\323\uff47\u0100\uff47\u0105" +
    "\uff47\u0110\uff47\u0111\uff47\u013b\uff47\u013c\uff47\u013e\uff47\u0140\uff47" +
    "\u0158\uff47\u015c\uff47\001\002\000\070\011\uff52\012\uff52\016" +
    "\uff52\032\uff52\062\uff52\071\uff52\072\uff52\112\uff52\117\uff52" +
    "\120\uff52\126\uff52\133\uff52\141\uff52\165\uff52\242\uff52\266" +
    "\uff52\267\uff52\327\uff52\u0140\uff52\u0146\uff52\u014a\uff52\u014c\uff52" +
    "\u014d\uff52\u014f\uff52\u0153\uff52\u0154\uff52\u0159\uff52\001\002\000" +
    "\070\011\uff54\012\uff54\016\uff54\032\uff54\062\uff54\071\uff54" +
    "\072\uff54\112\uff54\117\uff54\120\uff54\126\uff54\133\uff54\141" +
    "\uff54\165\uff54\242\uff54\266\uff54\267\uff54\327\uff54\u0140\uff54" +
    "\u0146\uff54\u014a\uff54\u014c\uff54\u014d\uff54\u014f\uff54\u0153\uff54\u0154" +
    "\uff54\u0159\uff54\001\002\000\070\011\uff5d\012\uff5d\016\uff5d" +
    "\032\uff5d\062\uff5d\071\uff5d\072\uff5d\112\uff5d\117\uff5d\120" +
    "\uff5d\126\uff5d\133\uff5d\141\uff5d\165\uff5d\242\uff5d\266\uff5d" +
    "\267\uff5d\327\uff5d\u0140\uff5d\u0146\uff5d\u014a\uff5d\u014c\uff5d\u014d" +
    "\uff5d\u014f\uff5d\u0153\uff5d\u0154\uff5d\u0159\uff5d\001\002\000\070" +
    "\011\uff53\012\uff53\016\uff53\032\uff53\062\uff53\071\uff53\072" +
    "\uff53\112\uff53\117\uff53\120\uff53\126\uff53\133\uff53\141\uff53" +
    "\165\uff53\242\uff53\266\uff53\267\uff53\327\uff53\u0140\uff53\u0146" +
    "\uff53\u014a\uff53\u014c\uff53\u014d\uff53\u014f\uff53\u0153\uff53\u0154\uff53" +
    "\u0159\uff53\001\002\000\010\u013e\133\u0140\134\u015c\135\001" +
    "\002\000\004\u0154\u01c7\001\002\000\024\323\051\u0100\060" +
    "\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u0158\043\u015c" +
    "\123\001\002\000\004\u0159\u01c9\001\002\000\072\007\uff8f" +
    "\011\uff8f\012\uff8f\016\uff8f\032\uff8f\062\uff8f\074\uff8f\112" +
    "\uff8f\117\uff8f\120\uff8f\126\uff8f\133\uff8f\134\uff8f\141\uff8f" +
    "\150\uff8f\164\uff8f\165\uff8f\267\uff8f\327\uff8f\u0140\uff8f\u0146" +
    "\uff8f\u014a\uff8f\u014c\uff8f\u014d\uff8f\u014f\uff8f\u0153\uff8f\u0154\uff8f" +
    "\u0159\uff8f\001\002\000\006\u013e\106\u015c\107\001\002\000" +
    "\004\u0159\u01cc\001\002\000\072\007\uff99\011\uff99\012\uff99" +
    "\016\uff99\032\uff99\062\uff99\074\uff99\112\uff99\117\uff99\120" +
    "\uff99\126\uff99\133\uff99\134\uff99\141\uff99\150\uff99\164\uff99" +
    "\165\uff99\267\uff99\327\uff99\u0140\uff99\u0146\uff99\u014a\uff99\u014c" +
    "\uff99\u014d\uff99\u014f\uff99\u0153\uff99\u0154\uff99\u0159\uff99\001\002" +
    "\000\032\012\uffba\032\uffba\062\uffba\112\uffba\117\uffba\120" +
    "\uffba\133\uffba\165\uffba\267\uffba\327\uffba\u0153\uffba\u0154\uffba" +
    "\001\002\000\032\005\115\064\114\323\uff62\u0100\uff62\u0105" +
    "\uff62\u0110\uff62\u0111\uff62\u013b\uff62\u013c\uff62\u0140\uff62\u0158\uff62" +
    "\u015c\uff62\001\002\000\004\u0159\u01d0\001\002\000\120\007" +
    "\uff78\011\uff78\012\uff78\016\uff78\032\uff78\062\uff78\071\uff78" +
    "\072\uff78\074\uff78\112\uff78\117\uff78\120\uff78\126\uff78\133" +
    "\uff78\134\uff78\141\uff78\150\uff78\164\uff78\165\uff78\170\uff78" +
    "\242\uff78\266\uff78\267\uff78\327\uff78\333\uff78\u0140\uff78\u0141" +
    "\uff78\u0142\uff78\u0143\uff78\u0144\uff78\u0145\uff78\u0146\uff78\u014a\uff78" +
    "\u014c\uff78\u014d\uff78\u014f\uff78\u0153\uff78\u0154\uff78\u0159\uff78\001" +
    "\002\000\010\u013e\133\u0140\134\u015c\135\001\002\000\004" +
    "\u0154\u01d3\001\002\000\010\u013e\133\u0140\134\u015c\135\001" +
    "\002\000\004\u0154\u01d5\001\002\000\010\u013e\133\u0140\134" +
    "\u015c\135\001\002\000\004\u0159\u01d7\001\002\000\072\007" +
    "\uff92\011\uff92\012\uff92\016\uff92\032\uff92\062\uff92\074\uff92" +
    "\112\uff92\117\uff92\120\uff92\126\uff92\133\uff92\134\uff92\141" +
    "\uff92\150\uff92\164\uff92\165\uff92\267\uff92\327\uff92\u0140\uff92" +
    "\u0146\uff92\u014a\uff92\u014c\uff92\u014d\uff92\u014f\uff92\u0153\uff92\u0154" +
    "\uff92\u0159\uff92\001\002\000\010\u013e\133\u0140\134\u015c\135" +
    "\001\002\000\006\112\u01da\u0159\uff85\001\002\000\010\u013e" +
    "\133\u0140\134\u015c\135\001\002\000\004\u0159\u01dc\001\002" +
    "\000\072\007\uff8e\011\uff8e\012\uff8e\016\uff8e\032\uff8e\062" +
    "\uff8e\074\uff8e\112\uff8e\117\uff8e\120\uff8e\126\uff8e\133\uff8e" +
    "\134\uff8e\141\uff8e\150\uff8e\164\uff8e\165\uff8e\267\uff8e\327" +
    "\uff8e\u0140\uff8e\u0146\uff8e\u014a\uff8e\u014c\uff8e\u014d\uff8e\u014f\uff8e" +
    "\u0153\uff8e\u0154\uff8e\u0159\uff8e\001\002\000\004\u0159\uff86\001" +
    "\002\000\036\011\uffb1\012\uffb1\032\uffb1\062\uffb1\112\uffb1" +
    "\117\uffb1\120\uffb1\133\uffb1\165\uffb1\267\uffb1\327\uffb1\u0140" +
    "\uffb1\u0153\uffb1\u0154\uffb1\001\002\000\030\u0141\uffbc\u0142\uffbc" +
    "\u0143\uffbc\u0144\uffbc\u0145\uffbc\u0146\uffbc\u014a\uffbc\u014b\u01e0\u014c" +
    "\uffbc\u014d\uffbc\u014f\uffbc\001\002\000\130\011\uff5a\012\uff5a" +
    "\024\023\032\uff5a\042\027\050\057\062\uff5a\112\uff5a\117" +
    "\uff5a\120\uff5a\133\uff5a\140\040\150\032\165\uff5a\214\066" +
    "\231\072\267\uff5a\323\051\327\uff5a\341\016\345\021\360" +
    "\015\376\017\u0100\060\u0105\065\u010d\024\u0110\070\u0111\035" +
    "\u0112\034\u0116\071\u0118\033\u0119\022\u0120\053\u0123\067\u0137" +
    "\037\u013b\063\u013c\044\u013e\042\u0140\056\u0153\uff5a\u0154\uff5a" +
    "\u0158\043\u015c\123\001\002\000\032\012\uffb8\032\uffb8\062" +
    "\uffb8\112\uffb8\117\uffb8\120\uffb8\133\uffb8\165\uffb8\267\uffb8" +
    "\327\uffb8\u0153\uffb8\u0154\uffb8\001\002\000\036\312\u01f2\322" +
    "\u01ee\330\u01ea\345\u01f3\356\u01ed\361\u01e3\364\u01e5\u0107\u01e7" +
    "\u0113\u01e6\u011d\u01e4\u0120\u01e8\u012d\u01e9\u012e\u01eb\u0140\u01ef\001" +
    "\002\000\036\150\ufef6\323\ufef6\u0100\ufef6\u0105\ufef6\u0110\ufef6" +
    "\u0111\ufef6\u013b\ufef6\u013c\ufef6\u013e\ufef6\u0140\ufef6\u0154\ufef6\u0158" +
    "\u01f5\u0159\ufef6\u015c\ufef6\001\002\000\036\150\ufef6\323\ufef6" +
    "\u0100\ufef6\u0105\ufef6\u0110\ufef6\u0111\ufef6\u013b\ufef6\u013c\ufef6\u013e" +
    "\ufef6\u0140\ufef6\u0154\ufef6\u0158\u01f5\u0159\ufef6\u015c\ufef6\001\002" +
    "\000\036\150\ufef6\323\ufef6\u0100\ufef6\u0105\ufef6\u0110\ufef6\u0111" +
    "\ufef6\u013b\ufef6\u013c\ufef6\u013e\ufef6\u0140\ufef6\u0154\ufef6\u0158\u01f5" +
    "\u0159\ufef6\u015c\ufef6\001\002\000\036\150\ufef6\323\ufef6\u0100" +
    "\ufef6\u0105\ufef6\u0110\ufef6\u0111\ufef6\u013b\ufef6\u013c\ufef6\u013e\ufef6" +
    "\u0140\ufef6\u0154\ufef6\u0158\u01f5\u0159\ufef6\u015c\ufef6\001\002\000" +
    "\036\150\ufef6\323\ufef6\u0100\ufef6\u0105\ufef6\u0110\ufef6\u0111\ufef6" +
    "\u013b\ufef6\u013c\ufef6\u013e\ufef6\u0140\ufef6\u0154\ufef6\u0158\u01f5\u0159" +
    "\ufef6\u015c\ufef6\001\002\000\036\150\ufef6\323\ufef6\u0100\ufef6" +
    "\u0105\ufef6\u0110\ufef6\u0111\ufef6\u013b\ufef6\u013c\ufef6\u013e\ufef6\u0140" +
    "\ufef6\u0154\ufef6\u0158\u01f5\u0159\ufef6\u015c\ufef6\001\002\000\036" +
    "\150\ufef6\323\ufef6\u0100\ufef6\u0105\ufef6\u0110\ufef6\u0111\ufef6\u013b" +
    "\ufef6\u013c\ufef6\u013e\ufef6\u0140\ufef6\u0154\ufef6\u0158\u01f5\u0159\ufef6" +
    "\u015c\ufef6\001\002\000\036\150\ufef6\323\ufef6\u0100\ufef6\u0105" +
    "\ufef6\u0110\ufef6\u0111\ufef6\u013b\ufef6\u013c\ufef6\u013e\ufef6\u0140\ufef6" +
    "\u0154\ufef6\u0158\u01f5\u0159\ufef6\u015c\ufef6\001\002\000\036\150" +
    "\ufef6\323\ufef6\u0100\ufef6\u0105\ufef6\u0110\ufef6\u0111\ufef6\u013b\ufef6" +
    "\u013c\ufef6\u013e\ufef6\u0140\ufef6\u0154\ufef6\u0158\u01f5\u0159\ufef6\u015c" +
    "\ufef6\001\002\000\072\007\uffa4\011\uffa4\012\uffa4\016\uffa4" +
    "\032\uffa4\062\uffa4\074\uffa4\112\uffa4\117\uffa4\120\uffa4\126" +
    "\uffa4\133\uffa4\134\uffa4\141\uffa4\150\uffa4\164\uffa4\165\uffa4" +
    "\267\uffa4\327\uffa4\u0140\uffa4\u0146\uffa4\u014a\uffa4\u014c\uffa4\u014d" +
    "\uffa4\u014f\uffa4\u0153\uffa4\u0154\uffa4\u0159\uffa4\001\002\000\036" +
    "\150\ufef6\323\ufef6\u0100\ufef6\u0105\ufef6\u0110\ufef6\u0111\ufef6\u013b" +
    "\ufef6\u013c\ufef6\u013e\ufef6\u0140\ufef6\u0154\ufef6\u0158\u01f5\u0159\ufef6" +
    "\u015c\ufef6\001\002\000\036\150\ufef6\323\ufef6\u0100\ufef6\u0105" +
    "\ufef6\u0110\ufef6\u0111\ufef6\u013b\ufef6\u013c\ufef6\u013e\ufef6\u0140\ufef6" +
    "\u0154\ufef6\u0158\u01f5\u0159\ufef6\u015c\ufef6\001\002\000\004\u0155" +
    "\u0207\001\002\000\036\150\uffa0\323\uffa0\u0100\uffa0\u0105\uffa0" +
    "\u0110\uffa0\u0111\uffa0\u013b\uffa0\u013c\uffa0\u013e\uffa0\u0140\uffa0\u0154" +
    "\uffa0\u0158\u01fe\u0159\uffa0\u015c\uffa0\001\002\000\036\150\uff06" +
    "\323\uff06\u0100\uff06\u0105\uff06\u0110\uff06\u0111\uff06\u013b\uff06\u013c" +
    "\uff06\u013e\uff06\u0140\uff06\u0154\uff06\u0158\uff06\u0159\uff06\u015c\uff06" +
    "\001\002\000\036\150\ufef6\323\ufef6\u0100\ufef6\u0105\ufef6\u0110" +
    "\ufef6\u0111\ufef6\u013b\ufef6\u013c\ufef6\u013e\ufef6\u0140\ufef6\u0154\ufef6" +
    "\u0158\u01f5\u0159\ufef6\u015c\ufef6\001\002\000\036\150\ufef6\323" +
    "\ufef6\u0100\ufef6\u0105\ufef6\u0110\ufef6\u0111\ufef6\u013b\ufef6\u013c\ufef6" +
    "\u013e\ufef6\u0140\ufef6\u0154\ufef6\u0158\u01f5\u0159\ufef6\u015c\ufef6\001" +
    "\002\000\036\150\ufef9\323\ufef9\u0100\ufef9\u0105\ufef9\u0110\ufef9" +
    "\u0111\ufef9\u013b\ufef9\u013c\ufef9\u013e\ufef9\u0140\ufef9\u0154\ufef9\u0158" +
    "\ufef9\u0159\ufef9\u015c\ufef9\001\002\000\004\u013b\u01f6\001\002" +
    "\000\006\u0154\u01f7\u0159\u01f9\001\002\000\004\u013b\u01fa\001" +
    "\002\000\036\150\ufef7\323\ufef7\u0100\ufef7\u0105\ufef7\u0110\ufef7" +
    "\u0111\ufef7\u013b\ufef7\u013c\ufef7\u013e\ufef7\u0140\ufef7\u0154\ufef7\u0158" +
    "\ufef7\u0159\ufef7\u015c\ufef7\001\002\000\036\150\ufef4\323\ufef4" +
    "\u0100\ufef4\u0105\ufef4\u0110\ufef4\u0111\ufef4\u013b\ufef4\u013c\ufef4\u013e" +
    "\ufef4\u0140\ufef4\u0154\ufef4\u0158\ufef4\u0159\ufef4\u015c\ufef4\001\002" +
    "\000\004\u0159\u01fb\001\002\000\036\150\ufef5\323\ufef5\u0100" +
    "\ufef5\u0105\ufef5\u0110\ufef5\u0111\ufef5\u013b\ufef5\u013c\ufef5\u013e\ufef5" +
    "\u0140\ufef5\u0154\ufef5\u0158\ufef5\u0159\ufef5\u015c\ufef5\001\002\000" +
    "\036\150\uff01\323\uff01\u0100\uff01\u0105\uff01\u0110\uff01\u0111\uff01" +
    "\u013b\uff01\u013c\uff01\u013e\uff01\u0140\uff01\u0154\uff01\u0158\uff01\u0159" +
    "\uff01\u015c\uff01\001\002\000\036\150\032\323\051\u0100\060" +
    "\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u013e\042\u0140" +
    "\163\u0154\uff5a\u0158\043\u0159\uff5a\u015c\123\001\002\000\004" +
    "\u013b\u01ff\001\002\000\004\u0159\u0200\001\002\000\036\150" +
    "\uffa1\323\uffa1\u0100\uffa1\u0105\uffa1\u0110\uffa1\u0111\uffa1\u013b\uffa1" +
    "\u013c\uffa1\u013e\uffa1\u0140\uffa1\u0154\uffa1\u0158\uffa1\u0159\uffa1\u015c" +
    "\uffa1\001\002\000\072\007\uffa2\011\uffa2\012\uffa2\016\uffa2" +
    "\032\uffa2\062\uffa2\074\uffa2\112\uffa2\117\uffa2\120\uffa2\126" +
    "\uffa2\133\uffa2\134\uffa2\141\uffa2\150\uffa2\164\uffa2\165\uffa2" +
    "\267\uffa2\327\uffa2\u0140\uffa2\u0146\uffa2\u014a\uffa2\u014c\uffa2\u014d" +
    "\uffa2\u014f\uffa2\u0153\uffa2\u0154\uffa2\u0159\uffa2\001\002\000\006" +
    "\u0154\u0203\u0159\u0205\001\002\000\024\323\051\u0100\060\u0105" +
    "\065\u0110\070\u0111\035\u013b\063\u013c\044\u0158\043\u015c\123" +
    "\001\002\000\072\007\uff9f\011\uff9f\012\uff9f\016\uff9f\032" +
    "\uff9f\062\uff9f\074\uff9f\112\uff9f\117\uff9f\120\uff9f\126\uff9f" +
    "\133\uff9f\134\uff9f\141\uff9f\150\uff9f\164\uff9f\165\uff9f\267" +
    "\uff9f\327\uff9f\u0140\uff9f\u0146\uff9f\u014a\uff9f\u014c\uff9f\u014d\uff9f" +
    "\u014f\uff9f\u0153\uff9f\u0154\uff9f\u0159\uff9f\001\002\000\072\007" +
    "\uff9d\011\uff9d\012\uff9d\016\uff9d\032\uff9d\062\uff9d\074\uff9d" +
    "\112\uff9d\117\uff9d\120\uff9d\126\uff9d\133\uff9d\134\uff9d\141" +
    "\uff9d\150\uff9d\164\uff9d\165\uff9d\267\uff9d\327\uff9d\u0140\uff9d" +
    "\u0146\uff9d\u014a\uff9d\u014c\uff9d\u014d\uff9d\u014f\uff9d\u0153\uff9d\u0154" +
    "\uff9d\u0159\uff9d\001\002\000\072\007\uff9e\011\uff9e\012\uff9e" +
    "\016\uff9e\032\uff9e\062\uff9e\074\uff9e\112\uff9e\117\uff9e\120" +
    "\uff9e\126\uff9e\133\uff9e\134\uff9e\141\uff9e\150\uff9e\164\uff9e" +
    "\165\uff9e\267\uff9e\327\uff9e\u0140\uff9e\u0146\uff9e\u014a\uff9e\u014c" +
    "\uff9e\u014d\uff9e\u014f\uff9e\u0153\uff9e\u0154\uff9e\u0159\uff9e\001\002" +
    "\000\004\u0140\u0209\001\002\000\036\150\uff07\323\uff07\u0100" +
    "\uff07\u0105\uff07\u0110\uff07\u0111\uff07\u013b\uff07\u013c\uff07\u013e\uff07" +
    "\u0140\uff07\u0154\uff07\u0158\uff07\u0159\uff07\u015c\uff07\001\002\000" +
    "\036\150\uff05\323\uff05\u0100\uff05\u0105\uff05\u0110\uff05\u0111\uff05" +
    "\u013b\uff05\u013c\uff05\u013e\uff05\u0140\uff05\u0154\uff05\u0158\uff05\u0159" +
    "\uff05\u015c\uff05\001\002\000\036\150\ufefe\323\ufefe\u0100\ufefe" +
    "\u0105\ufefe\u0110\ufefe\u0111\ufefe\u013b\ufefe\u013c\ufefe\u013e\ufefe\u0140" +
    "\ufefe\u0154\ufefe\u0158\ufefe\u0159\ufefe\u015c\ufefe\001\002\000\036" +
    "\150\ufefb\323\ufefb\u0100\ufefb\u0105\ufefb\u0110\ufefb\u0111\ufefb\u013b" +
    "\ufefb\u013c\ufefb\u013e\ufefb\u0140\ufefb\u0154\ufefb\u0158\ufefb\u0159\ufefb" +
    "\u015c\ufefb\001\002\000\036\150\uff00\323\uff00\u0100\uff00\u0105" +
    "\uff00\u0110\uff00\u0111\uff00\u013b\uff00\u013c\uff00\u013e\uff00\u0140\uff00" +
    "\u0154\uff00\u0158\uff00\u0159\uff00\u015c\uff00\001\002\000\036\150" +
    "\uff04\323\uff04\u0100\uff04\u0105\uff04\u0110\uff04\u0111\uff04\u013b\uff04" +
    "\u013c\uff04\u013e\uff04\u0140\uff04\u0154\uff04\u0158\uff04\u0159\uff04\u015c" +
    "\uff04\001\002\000\036\150\ufefc\323\ufefc\u0100\ufefc\u0105\ufefc" +
    "\u0110\ufefc\u0111\ufefc\u013b\ufefc\u013c\ufefc\u013e\ufefc\u0140\ufefc\u0154" +
    "\ufefc\u0158\ufefc\u0159\ufefc\u015c\ufefc\001\002\000\036\150\ufef8" +
    "\323\ufef8\u0100\ufef8\u0105\ufef8\u0110\ufef8\u0111\ufef8\u013b\ufef8\u013c" +
    "\ufef8\u013e\ufef8\u0140\ufef8\u0154\ufef8\u0158\ufef8\u0159\ufef8\u015c\ufef8" +
    "\001\002\000\036\150\ufefa\323\ufefa\u0100\ufefa\u0105\ufefa\u0110" +
    "\ufefa\u0111\ufefa\u013b\ufefa\u013c\ufefa\u013e\ufefa\u0140\ufefa\u0154\ufefa" +
    "\u0158\ufefa\u0159\ufefa\u015c\ufefa\001\002\000\036\150\ufeff\323" +
    "\ufeff\u0100\ufeff\u0105\ufeff\u0110\ufeff\u0111\ufeff\u013b\ufeff\u013c\ufeff" +
    "\u013e\ufeff\u0140\ufeff\u0154\ufeff\u0158\ufeff\u0159\ufeff\u015c\ufeff\001" +
    "\002\000\036\150\uff02\323\uff02\u0100\uff02\u0105\uff02\u0110\uff02" +
    "\u0111\uff02\u013b\uff02\u013c\uff02\u013e\uff02\u0140\uff02\u0154\uff02\u0158" +
    "\uff02\u0159\uff02\u015c\uff02\001\002\000\036\150\ufefd\323\ufefd" +
    "\u0100\ufefd\u0105\ufefd\u0110\ufefd\u0111\ufefd\u013b\ufefd\u013c\ufefd\u013e" +
    "\ufefd\u0140\ufefd\u0154\ufefd\u0158\ufefd\u0159\ufefd\u015c\ufefd\001\002" +
    "\000\036\150\uff03\323\uff03\u0100\uff03\u0105\uff03\u0110\uff03\u0111" +
    "\uff03\u013b\uff03\u013c\uff03\u013e\uff03\u0140\uff03\u0154\uff03\u0158\uff03" +
    "\u0159\uff03\u015c\uff03\001\002\000\036\011\uffb3\012\uffb3\032" +
    "\uffb3\062\uffb3\112\uffb3\117\uffb3\120\uffb3\133\uffb3\165\uffb3" +
    "\267\uffb3\327\uffb3\u0140\uffb3\u0153\uffb3\u0154\uffb3\001\002\000" +
    "\036\011\uffb6\012\uffb6\032\uffb6\062\uffb6\112\uffb6\117\uffb6" +
    "\120\uffb6\133\uffb6\165\uffb6\267\uffb6\327\uffb6\u0140\uffb6\u0153" +
    "\uffb6\u0154\uffb6\001\002\000\010\u013e\133\u0140\134\u015c\135" +
    "\001\002\000\004\u0159\u0219\001\002\000\072\007\uff93\011" +
    "\uff93\012\uff93\016\uff93\032\uff93\062\uff93\074\uff93\112\uff93" +
    "\117\uff93\120\uff93\126\uff93\133\uff93\134\uff93\141\uff93\150" +
    "\uff93\164\uff93\165\uff93\267\uff93\327\uff93\u0140\uff93\u0146\uff93" +
    "\u014a\uff93\u014c\uff93\u014d\uff93\u014f\uff93\u0153\uff93\u0154\uff93\u0159" +
    "\uff93\001\002\000\034\150\032\242\uff5a\323\051\u0100\060" +
    "\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u013e\042\u0140" +
    "\163\u0158\043\u015c\123\001\002\000\004\266\u021a\001\002" +
    "\000\072\007\uff37\011\uff37\012\uff37\016\uff37\032\uff37\062" +
    "\uff37\074\uff37\112\uff37\117\uff37\120\uff37\126\uff37\133\uff37" +
    "\134\uff37\141\uff37\150\uff37\164\uff37\165\uff37\267\uff37\327" +
    "\uff37\u0140\uff37\u0146\uff37\u014a\uff37\u014c\uff37\u014d\uff37\u014f\uff37" +
    "\u0153\uff37\u0154\uff37\u0159\uff37\001\002\000\072\007\uff39\011" +
    "\uff39\012\uff39\016\uff39\032\uff39\062\uff39\074\uff39\112\uff39" +
    "\117\uff39\120\uff39\126\uff39\133\uff39\134\uff39\141\uff39\150" +
    "\uff39\164\uff39\165\uff39\267\uff39\327\uff39\u0140\uff39\u0146\uff39" +
    "\u014a\uff39\u014c\uff39\u014d\uff39\u014f\uff39\u0153\uff39\u0154\uff39\u0159" +
    "\uff39\001\002\000\072\007\uff38\011\uff38\012\uff38\016\uff38" +
    "\032\uff38\062\uff38\074\uff38\112\uff38\117\uff38\120\uff38\126" +
    "\uff38\133\uff38\134\uff38\141\uff38\150\uff38\164\uff38\165\uff38" +
    "\267\uff38\327\uff38\u0140\uff38\u0146\uff38\u014a\uff38\u014c\uff38\u014d" +
    "\uff38\u014f\uff38\u0153\uff38\u0154\uff38\u0159\uff38\001\002\000\004" +
    "\242\u0220\001\002\000\040\071\uff5a\072\uff5a\150\032\266" +
    "\uff5a\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063" +
    "\u013c\044\u013e\042\u0140\163\u0158\043\u015c\123\001\002\000" +
    "\010\071\u0222\072\u0225\266\u021a\001\002\000\034\072\uff5a" +
    "\150\032\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b" +
    "\063\u013c\044\u013e\042\u0140\163\u0158\043\u015c\123\001\002" +
    "\000\072\007\uff36\011\uff36\012\uff36\016\uff36\032\uff36\062" +
    "\uff36\074\uff36\112\uff36\117\uff36\120\uff36\126\uff36\133\uff36" +
    "\134\uff36\141\uff36\150\uff36\164\uff36\165\uff36\267\uff36\327" +
    "\uff36\u0140\uff36\u0146\uff36\u014a\uff36\u014c\uff36\u014d\uff36\u014f\uff36" +
    "\u0153\uff36\u0154\uff36\u0159\uff36\001\002\000\072\007\uff34\011" +
    "\uff34\012\uff34\016\uff34\032\uff34\062\uff34\074\uff34\112\uff34" +
    "\117\uff34\120\uff34\126\uff34\133\uff34\134\uff34\141\uff34\150" +
    "\uff34\164\uff34\165\uff34\267\uff34\327\uff34\u0140\uff34\u0146\uff34" +
    "\u014a\uff34\u014c\uff34\u014d\uff34\u014f\uff34\u0153\uff34\u0154\uff34\u0159" +
    "\uff34\001\002\000\072\007\uff33\011\uff33\012\uff33\016\uff33" +
    "\032\uff33\062\uff33\074\uff33\112\uff33\117\uff33\120\uff33\126" +
    "\uff33\133\uff33\134\uff33\141\uff33\150\uff33\164\uff33\165\uff33" +
    "\267\uff33\327\uff33\u0140\uff33\u0146\uff33\u014a\uff33\u014c\uff33\u014d" +
    "\uff33\u014f\uff33\u0153\uff33\u0154\uff33\u0159\uff33\001\002\000\004" +
    "\072\u0227\001\002\000\072\007\uff35\011\uff35\012\uff35\016" +
    "\uff35\032\uff35\062\uff35\074\uff35\112\uff35\117\uff35\120\uff35" +
    "\126\uff35\133\uff35\134\uff35\141\uff35\150\uff35\164\uff35\165" +
    "\uff35\267\uff35\327\uff35\u0140\uff35\u0146\uff35\u014a\uff35\u014c\uff35" +
    "\u014d\uff35\u014f\uff35\u0153\uff35\u0154\uff35\u0159\uff35\001\002\000" +
    "\006\u013e\106\u015c\107\001\002\000\004\u0159\u022a\001\002" +
    "\000\072\007\uff9a\011\uff9a\012\uff9a\016\uff9a\032\uff9a\062" +
    "\uff9a\074\uff9a\112\uff9a\117\uff9a\120\uff9a\126\uff9a\133\uff9a" +
    "\134\uff9a\141\uff9a\150\uff9a\164\uff9a\165\uff9a\267\uff9a\327" +
    "\uff9a\u0140\uff9a\u0146\uff9a\u014a\uff9a\u014c\uff9a\u014d\uff9a\u014f\uff9a" +
    "\u0153\uff9a\u0154\uff9a\u0159\uff9a\001\002\000\024\323\051\u0100" +
    "\060\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u0158\043" +
    "\u015c\123\001\002\000\004\u0159\u022d\001\002\000\072\007" +
    "\uff90\011\uff90\012\uff90\016\uff90\032\uff90\062\uff90\074\uff90" +
    "\112\uff90\117\uff90\120\uff90\126\uff90\133\uff90\134\uff90\141" +
    "\uff90\150\uff90\164\uff90\165\uff90\267\uff90\327\uff90\u0140\uff90" +
    "\u0146\uff90\u014a\uff90\u014c\uff90\u014d\uff90\u014f\uff90\u0153\uff90\u0154" +
    "\uff90\u0159\uff90\001\002\000\006\u013e\042\u0140\163\001\002" +
    "\000\070\011\uff5c\012\uff5c\016\uff5c\032\uff5c\062\uff5c\071" +
    "\uff5c\072\uff5c\112\uff5c\117\uff5c\120\uff5c\126\uff5c\133\uff5c" +
    "\141\uff5c\165\uff5c\242\uff5c\266\uff5c\267\uff5c\327\uff5c\u0140" +
    "\uff5c\u0146\uff5c\u014a\uff5c\u014c\uff5c\u014d\uff5c\u014f\uff5c\u0153\uff5c" +
    "\u0154\uff5c\u0159\uff5c\001\002\000\010\u013e\133\u0140\134\u015c" +
    "\135\001\002\000\004\u0154\u0232\001\002\000\024\323\051" +
    "\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063\u013c\044\u0158" +
    "\043\u015c\123\001\002\000\004\u0154\u0234\001\002\000\024" +
    "\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063\u013c" +
    "\044\u0158\043\u015c\123\001\002\000\004\u0159\u0236\001\002" +
    "\000\072\007\uff8a\011\uff8a\012\uff8a\016\uff8a\032\uff8a\062" +
    "\uff8a\074\uff8a\112\uff8a\117\uff8a\120\uff8a\126\uff8a\133\uff8a" +
    "\134\uff8a\141\uff8a\150\uff8a\164\uff8a\165\uff8a\267\uff8a\327" +
    "\uff8a\u0140\uff8a\u0146\uff8a\u014a\uff8a\u014c\uff8a\u014d\uff8a\u014f\uff8a" +
    "\u0153\uff8a\u0154\uff8a\u0159\uff8a\001\002\000\034\011\uff5a\150" +
    "\032\323\051\u0100\060\u0105\065\u0110\070\u0111\035\u013b\063" +
    "\u013c\044\u013e\042\u0140\163\u0158\043\u015c\123\001\002\000" +
    "\072\007\uffa5\011\uffa5\012\uffa5\016\uffa5\032\uffa5\062\uffa5" +
    "\074\uffa5\112\uffa5\117\uffa5\120\uffa5\126\uffa5\133\uffa5\134" +
    "\uffa5\141\uffa5\150\uffa5\164\uffa5\165\uffa5\267\uffa5\327\uffa5" +
    "\u0140\uffa5\u0146\uffa5\u014a\uffa5\u014c\uffa5\u014d\uffa5\u014f\uffa5\u0153" +
    "\uffa5\u0154\uffa5\u0159\uffa5\001\002\000\004\011\u023a\001\002" +
    "\000\036\312\u01f2\322\u01ee\330\u01ea\345\u01f3\356\u01ed\361" +
    "\u01e3\364\u01e5\u0107\u01e7\u0113\u01e6\u011d\u01e4\u0120\u01e8\u012d\u01e9" +
    "\u012e\u01eb\u0140\u01ef\001\002\000\006\u0158\u01fe\u0159\uffa0\001" +
    "\002\000\004\u0159\u023d\001\002\000\072\007\uffa3\011\uffa3" +
    "\012\uffa3\016\uffa3\032\uffa3\062\uffa3\074\uffa3\112\uffa3\117" +
    "\uffa3\120\uffa3\126\uffa3\133\uffa3\134\uffa3\141\uffa3\150\uffa3" +
    "\164\uffa3\165\uffa3\267\uffa3\327\uffa3\u0140\uffa3\u0146\uffa3\u014a" +
    "\uffa3\u014c\uffa3\u014d\uffa3\u014f\uffa3\u0153\uffa3\u0154\uffa3\u0159\uffa3" +
    "\001\002\000\024\323\051\u0100\060\u0105\065\u0110\070\u0111" +
    "\035\u013b\063\u013c\044\u0158\043\u015c\123\001\002\000\004" +
    "\u0159\u0240\001\002\000\072\007\uff8b\011\uff8b\012\uff8b\016" +
    "\uff8b\032\uff8b\062\uff8b\074\uff8b\112\uff8b\117\uff8b\120\uff8b" +
    "\126\uff8b\133\uff8b\134\uff8b\141\uff8b\150\uff8b\164\uff8b\165" +
    "\uff8b\267\uff8b\327\uff8b\u0140\uff8b\u0146\uff8b\u014a\uff8b\u014c\uff8b" +
    "\u014d\uff8b\u014f\uff8b\u0153\uff8b\u0154\uff8b\u0159\uff8b\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u023f\000\004\121\003\001\001\000\002\001\001\000" +
    "\006\122\007\123\006\001\001\000\002\001\001\000\040" +
    "\002\051\003\035\011\072\017\025\022\060\031\044\046" +
    "\024\050\017\062\061\063\030\124\046\127\045\143\040" +
    "\145\054\147\053\001\001\000\004\200\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u022d\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\031\123\046\u021a\050\017\062\061\064" +
    "\u021c\065\u021b\143\040\145\054\147\053\001\001\000\002" +
    "\001\001\000\004\006\u0215\001\001\000\004\006\u0214\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u01dd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u01cc\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\047\u01bc\054\u01bd\057" +
    "\u01b8\061\u01bb\001\001\000\002\001\001\000\012\031\123" +
    "\143\u010a\145\054\147\053\001\001\000\002\001\001\000" +
    "\004\006\u01b6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\u01af\001\001\000\002\001\001\000\020\130" +
    "\251\132\247\133\246\134\244\135\243\136\242\142\256" +
    "\001\001\000\002\001\001\000\004\146\230\001\001\000" +
    "\004\144\222\001\001\000\004\004\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\177\001\001\000" +
    "\020\031\123\046\163\050\017\062\061\143\040\145\054" +
    "\147\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\115\043\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\123" +
    "\044\117\143\120\145\054\147\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\141\001\001\000\002\001" +
    "\001\000\012\031\123\143\143\145\054\147\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\147\037" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\031\123\040\155\143\153\145\054\147\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\167\057\164\060\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\201\043" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\210\001\001\000\022\007\206\031" +
    "\123\046\207\050\017\062\061\143\040\145\054\147\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\215\010\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\217\001\001\000\002\001\001\000\010\031\123" +
    "\145\225\147\053\001\001\000\010\031\123\145\223\147" +
    "\053\001\001\000\002\001\001\000\004\144\224\001\001" +
    "\000\002\001\001\000\004\144\226\001\001\000\002\001" +
    "\001\000\006\031\123\147\234\001\001\000\002\001\001" +
    "\000\006\031\123\147\232\001\001\000\004\146\233\001" +
    "\001\000\002\001\001\000\004\146\235\001\001\000\002" +
    "\001\001\000\012\031\123\143\237\145\054\147\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\150\u01a0" +
    "\151\330\165\325\171\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\131\u019e\174\u019d" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\150" +
    "\u019b\151\330\165\325\171\322\001\001\000\002\001\001" +
    "\000\036\002\051\003\035\011\072\017\025\022\060\031" +
    "\044\046\024\050\017\062\061\063\030\127\u019a\143\040" +
    "\145\054\147\053\001\001\000\002\001\001\000\012\067" +
    "\275\077\303\104\305\174\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\260\003\035\011\072\017" +
    "\025\022\060\031\044\046\024\050\017\062\061\063\030" +
    "\107\261\143\040\145\054\147\053\001\001\000\010\110" +
    "\270\111\267\113\263\001\001\000\002\001\001\000\004" +
    "\112\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\274\001\001\000\002\001\001\000\004\105\u0192\001\001" +
    "\000\002\001\001\000\004\105\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\175\u0172\001\001\000\014" +
    "\133\u016e\134\244\135\243\136\242\137\u016d\001\001\000" +
    "\002\001\001\000\012\073\316\074\313\075\312\100\315" +
    "\001\001\000\004\076\u0167\001\001\000\002\001\001\000" +
    "\004\076\u0163\001\001\000\004\076\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\067\275\102\317\104\320\174\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\150\327\151" +
    "\330\165\325\171\322\001\001\000\032\011\373\017\352" +
    "\022\372\025\370\031\365\063\355\143\363\145\054\147" +
    "\053\153\u015e\154\357\174\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\165\344\171" +
    "\322\001\001\000\014\073\337\074\313\075\312\101\336" +
    "\103\335\001\001\000\004\152\332\001\001\000\012\150" +
    "\333\151\330\165\325\171\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\067\275\102\340\104\320\174\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\073" +
    "\337\074\313\075\312\101\336\103\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\166\346\001\001\000" +
    "\002\001\001\000\036\011\373\017\352\022\372\025\370" +
    "\031\365\063\355\143\363\145\054\147\053\153\366\154" +
    "\357\167\351\170\350\174\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\011\373\017\352\022\372\025\370\031\365\063\355" +
    "\143\363\145\054\147\053\153\366\154\357\170\u0143\174" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\057\u0121\155\u0123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\031\123" +
    "\143\u010a\145\054\147\053\165\u010c\171\322\001\001\000" +
    "\002\001\001\000\004\166\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\123\046\375\050\017\062\061" +
    "\143\040\145\054\147\053\001\001\000\002\001\001\000" +
    "\020\031\123\046\377\050\017\062\061\143\040\145\054" +
    "\147\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\162\u0102\174\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\150\u0107\151\330\163" +
    "\u0106\165\325\171\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\031\123\143\u010a\145\054\147\053\165\344" +
    "\171\322\001\001\000\002\001\001\000\004\166\u010e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\u0116\027\u0114\030\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\u011a\030" +
    "\u0119\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\260\003\035\011\072\017\025" +
    "\022\060\031\044\046\024\050\017\062\061\063\030\107" +
    "\u0120\143\040\145\054\147\053\001\001\000\002\001\001" +
    "\000\030\011\373\017\352\022\372\025\370\031\365\063" +
    "\355\143\363\145\054\147\053\154\u0142\174\356\001\001" +
    "\000\030\011\373\017\352\022\372\025\370\031\365\063" +
    "\355\143\363\145\054\147\053\154\u0140\174\356\001\001" +
    "\000\002\001\001\000\030\011\373\017\352\022\372\025" +
    "\370\031\365\063\355\143\363\145\054\147\053\154\u013d" +
    "\174\356\001\001\000\004\156\u0132\001\001\000\030\011" +
    "\373\017\352\022\372\025\370\031\365\063\355\143\363" +
    "\145\054\147\053\154\u012b\174\356\001\001\000\004\157" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\161\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\373\017\352" +
    "\022\372\025\370\031\365\063\355\143\363\145\054\147" +
    "\053\154\u013b\174\356\001\001\000\030\011\373\017\352" +
    "\022\372\025\370\031\365\063\355\143\363\145\054\147" +
    "\053\154\u0136\174\356\001\001\000\030\011\373\017\352" +
    "\022\372\025\370\031\365\063\355\143\363\145\054\147" +
    "\053\154\u0133\174\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\373\017\352\022\372\025\370\031" +
    "\365\063\355\143\363\145\054\147\053\154\u0135\174\356" +
    "\001\001\000\002\001\001\000\004\160\u0138\001\001\000" +
    "\030\011\373\017\352\022\372\025\370\031\365\063\355" +
    "\143\363\145\054\147\053\154\u0139\174\356\001\001\000" +
    "\002\001\001\000\004\160\u013a\001\001\000\002\001\001" +
    "\000\004\161\u013c\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\373\017\352\022\372\025\370\031\365" +
    "\063\355\143\363\145\054\147\053\154\u013f\174\356\001" +
    "\001\000\002\001\001\000\004\160\u0141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\162" +
    "\u0145\174\u0103\001\001\000\002\001\001\000\004\164\u0149" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\172\u014e" +
    "\001\001\000\004\173\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\166\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\073\337\074\313\075\312\101\336\103\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\u016b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\067\275\077\u0170\104\305\174\277\001\001\000\014\133" +
    "\u016e\134\244\135\243\136\242\137\u0171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\176" +
    "\u0175\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\177\u0178\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\070\u0185\106\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\031\123\071\u0188\143\u0187\145\054\147\053\001\001" +
    "\000\004\072\u018c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\031\123\046\u0194\050\017\062\061\143\040\145\054\147" +
    "\053\001\001\000\004\140\u0196\001\001\000\020\031\123" +
    "\046\u0198\050\017\062\061\143\040\145\054\147\053\001" +
    "\001\000\006\135\u0197\136\242\001\001\000\002\001\001" +
    "\000\004\140\u0199\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\136\u019c\001\001\000\002\001\001\000\014" +
    "\132\u019f\133\246\134\244\135\243\136\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\134\u01a1\135\243" +
    "\136\242\001\001\000\002\001\001\000\006\032\u01a5\033" +
    "\u01a4\001\001\000\002\001\001\000\014\031\123\034\u01a9" +
    "\143\u01a8\145\054\147\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u01ab\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\123\143\u01b0" +
    "\145\054\147\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\051\003\035\011\072\017\025\022\060" +
    "\031\044\046\024\050\017\062\061\063\030\126\u01b4\127" +
    "\u01b3\143\040\145\054\147\053\001\001\000\036\002\051" +
    "\003\035\011\072\017\025\022\060\031\044\046\024\050" +
    "\017\062\061\063\030\127\u01b5\143\040\145\054\147\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\031\123\051\u01c2\143\u01c1\145\054\147\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01c5\001\001\000\002\001\001\000" +
    "\012\031\123\143\u01c7\145\054\147\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u01ca\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\u01ce\043\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u01d1\001\001\000\002\001\001\000\004" +
    "\023\u01d3\001\001\000\002\001\001\000\004\023\u01d5\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u01d8" +
    "\001\001\000\004\024\u01da\001\001\000\004\023\u01dc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\u01e0\011" +
    "\072\017\025\022\060\031\044\046\024\050\017\062\061" +
    "\063\030\143\040\145\054\147\053\001\001\000\002\001" +
    "\001\000\010\013\u01eb\114\u01ef\116\u01f0\001\001\000\004" +
    "\117\u0213\001\001\000\004\117\u0212\001\001\000\004\117" +
    "\u0211\001\001\000\004\117\u0210\001\001\000\004\117\u020f" +
    "\001\001\000\004\117\u020e\001\001\000\004\117\u020d\001" +
    "\001\000\004\117\u020c\001\001\000\004\117\u020b\001\001" +
    "\000\002\001\001\000\004\117\u020a\001\001\000\004\117" +
    "\u0209\001\001\000\004\115\u0207\001\001\000\004\014\u01fc" +
    "\001\001\000\002\001\001\000\004\117\u01fb\001\001\000" +
    "\004\117\u01f3\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\120\u01f7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0200\031\123\046\u0201\050" +
    "\017\062\061\143\040\145\054\147\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u0203\001\001\000\012\031\123\143\u0205" +
    "\145\054\147\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u0217\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\031\123\046\u021e\050\017" +
    "\062\061\143\040\145\054\147\053\001\001\000\004\065" +
    "\u021d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\123\046\u0220\050" +
    "\017\062\061\143\040\145\054\147\053\001\001\000\006" +
    "\065\u0223\066\u0222\001\001\000\020\031\123\046\u0225\050" +
    "\017\062\061\143\040\145\054\147\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0228\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\031\123\143\u022b\145" +
    "\054\147\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u022e\001\001\000\002\001\001\000\004\023" +
    "\u0230\001\001\000\002\001\001\000\012\031\123\143\u0232" +
    "\145\054\147\053\001\001\000\002\001\001\000\012\031" +
    "\123\143\u0234\145\054\147\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\u0237\031\123\046\u0238\050" +
    "\017\062\061\143\040\145\054\147\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\114\u023a\116\u01f0\001" +
    "\001\000\004\014\u023b\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\123\143\u023e\145\054\147\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    try {
        BufferedReader buffered = new BufferedReader(new FileReader(MiniSql.ubicacionArchivo));
        analizadorFlex = new Lexemas(buffered);
    } catch (IOException ex) {
        ex.printStackTrace();
    }

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return analizadorFlex.next_token(); 

    }


Lexemas analizadorFlex = null;

public void syntax_error(Symbol cur_token){
    Errores.SyntaxErrorCup((MyToken) cur_token.value);
}

public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        m.append(" " + s.value.toString());
        if (s.left >= 0) {                
            m.append(" in line "+(s.left));
            if (s.right >= 0)
                m.append(", column "+(s.right));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SELECT1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FIN_AN ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN_AN",126, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FIN_AN ::= GO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN_AN",126, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OBJECT ::= Identificador OBJECT1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OBJECT1 ::= Punto Identificador OBJECT2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT1",123, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OBJECT1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT1",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OBJECT2 ::= Punto Identificador OBJECT3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT2",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OBJECT2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT2",124, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OBJECT3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT3",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OBJECT3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT3",125, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SH_COND ::= SH_COND1 SH_COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SH_COND1 ::= MATCH ParentesisAbrir GSP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND1",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SH_COND1 ::= SH_CONDWM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND1",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SH_COND2 ::= AND SH_COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PREDICATE ::= PREDICATE1 PREDICATE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PREDICATE ::= CONTAINS ParentesisAbrir PREDICATE7 Coma PREDICATE8 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PREDICATE ::= FREETEXT ParentesisAbrir PREDICATE7 Coma PREDICATE9 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PREDICATE1 ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PREDICATE1 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PREDICATE1 ::= CASEW 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PREDICATE1 ::= AGG_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PREDICATE1 ::= STR_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PREDICATE1 ::= DT_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PREDICATE1 ::= CONV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PREDICATE1 ::= OTH_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PREDICATE2 ::= COMPARE_OPR PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PREDICATE2 ::= NOT PREDICATE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PREDICATE2 ::= LIKE PREDICATE1 PREDICATE6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PREDICATE2 ::= BETWEEN PREDICATE1 AND PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PREDICATE2 ::= IS PREDICATE4 NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PREDICATE2 ::= IN PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PREDICATE3 ::= LIKE PREDICATE1 PREDICATE6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PREDICATE3 ::= BETWEEN PREDICATE1 AND PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PREDICATE3 ::= IN PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PREDICATE4 ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE4",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PREDICATE4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE4",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PREDICATE5 ::= Coma PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE5",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PREDICATE5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE5",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PREDICATE6 ::= ESCAPE DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE6",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PREDICATE6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE6",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PREDICATE7 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE7",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PREDICATE7 ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE7",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PREDICATE8 ::= SH_COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE8",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PREDICATE9 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE9",114, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PREDICATE9 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE9",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SH_CONDWM ::= SH_CONDWM4 PREDICATE SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SH_CONDWM ::= ParentesisAbrir SH_CONDWM ParentesisCerrar SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SH_CONDWM1 ::= OR SH_CONDWM2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM1",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SH_CONDWM1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM1",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SH_CONDWM2 ::= NOT SH_CONDWM3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM2",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SH_CONDWM2 ::= SH_CONDWM3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM2",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SH_CONDWM3 ::= PREDICATE SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM3",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SH_CONDWM3 ::= ParentesisAbrir SH_CONDWM ParentesisCerrar SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM3",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SH_CONDWM4 ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM4",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SH_CONDWM4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM4",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // GSP ::= Identificador GSP1 Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP",120, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // GSP1 ::= Menor Menos ParentesisAbrir Identificador ParentesisCerrar Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP1",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // GSP1 ::= Menos ParentesisAbrir Identificador ParentesisCerrar Menos Mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP1",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SEXP ::= SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SEXP2 ::= Mas SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SEXP2 ::= Menos SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SEXP2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SEXP3 ::= SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP3",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SEXP4 ::= Multiplicacion SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SEXP4 ::= Division SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SEXP4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SEXP5 ::= ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SEXP5 ::= DatoEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SEXP5 ::= DatoFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SEXP5 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SEXP5 ::= AGG_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SELIST ::= SELIST1 SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SELIST ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SELIST ::= Arroba Identificador Igual SELIST1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SELIST1 ::= Identificador SELIST2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SELIST1 ::= EXPRESSION SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SELIST1 ::= AGG_FN SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SELIST1 ::= STR_FN SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SELIST1 ::= DT_FN SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SELIST1 ::= CONV SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SELIST1 ::= CASEW SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SELIST2 ::= Punto SELIST3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SELIST2 ::= Igual SELIST6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SELIST2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SELIST3 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SELIST3 ::= Identificador SELIST7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SELIST5 ::= AS Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST5",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SELIST5 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST5",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SELIST5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST5",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SELIST6 ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST6",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SELIST7 ::= Punto Identificador SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST7",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SELIST7 ::= SELIST5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIST7",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONV ::= CAST ParentesisAbrir CONV1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONV ::= CONVERT ParentesisAbrir CONV2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONV1 ::= EXPRESSION AS DATATYPE CONV3 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONV2 ::= DATATYPE CONV3 CONV4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONV3 ::= ParentesisAbrir DatoEntero ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONV3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONV4 ::= EXPRESSION CONV5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV4",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONV5 ::= Coma SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV5",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONV5 ::= ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV5",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DT_FN ::= CURRENT_TIMESTAMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DT_FN ::= DAY ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DT_FN ::= MONTH ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DT_FN ::= YEAR ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DT_FN ::= SET LANGUAGE DT_FN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DT_FN1 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DT_FN1 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DT_FN2 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DT_FN2 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // STR_FN ::= LOWER ParentesisAbrir STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STR_FN ::= TRANSLATE ParentesisAbrir STR_FN1 Coma STR_FN1 Coma STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // STR_FN ::= UPPER ParentesisAbrir STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // STR_FN ::= CHAR ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // STR_FN ::= LEFT ParentesisAbrir STR_FN1 Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // STR_FN ::= TRIM ParentesisAbrir STR_FN1 STR_FN2 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // STR_FN ::= NCHAR ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // STR_FN ::= RIGHT ParentesisAbrir STR_FN1 Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // STR_FN ::= SPACE ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // STR_FN ::= SUBSTRING ParentesisAbrir STR_FN1 Coma SEXP Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // STR_FN1 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // STR_FN1 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STR_FN1 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // STR_FN2 ::= FROM STR_FN1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // STR_FN2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OTH_FN ::= NEXT VALUE FOR Identificador OTH_FN1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OTH_FN ::= SYSTEM_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OTH_FN ::= SESSION_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OTH_FN ::= NULLIF ParentesisAbrir EXPRESSION Coma EXPRESSION ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OTH_FN1 ::= Punto Identificador OTH_FN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OTH_FN1 ::= OTH_FN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OTH_FN2 ::= Punto Identificador OTH_FN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OTH_FN2 ::= OTH_FN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OTH_FN3 ::= OVER ORDER BY ORDERB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // AGG_FN ::= AVG ParentesisAbrir SEL_AVG ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AGG_FN ::= COUNT ParentesisAbrir SEL_COUNT ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AGG_FN ::= MAX ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // AGG_FN ::= MIN ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AGG_FN ::= SUM ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SEL_AVG ::= SEL_AVG1 SEL_AVG2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SEL_AVG1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SEL_AVG1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SEL_AVG1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SEL_AVG2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SEL_AVG2 ::= Identificador SEL_AVG3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SEL_AVG3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SEL_AVG3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SEL_COUNT ::= SEL_COUNT1 SEL_COUNT2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SEL_COUNT1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SEL_COUNT1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SEL_COUNT1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SEL_COUNT2 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SEL_COUNT2 ::= Identificador SEL_COUNT3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SEL_COUNT2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SEL_COUNT3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SEL_COUNT3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SEL_AGR ::= SEL_AGR1 SEL_AGR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SEL_AGR1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SEL_AGR1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SEL_AGR1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SEL_AGR2 ::= Identificador SEL_AGR3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SEL_AGR2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SEL_AGR3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SEL_AGR3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESSION ::= SEXP EXPRESSION1 EXPRESSION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESSION ::= EXPRESSION2 SUM_OPR EXPRESSION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESSION ::= NOT_OPR EXPRESSION EXPRESSION4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESSION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESSION1 ::= AR_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESSION1 ::= COMPARE_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESSION1 ::= SUM_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESSION2 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESSION2 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESSION3 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESSION3 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESSION3 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESSION4 ::= COMPARE_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPRESSION4 ::= LOGIC_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // BIN_OPR ::= AR_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // BIN_OPR ::= ASIG_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // BIN_OPR ::= BIT_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // BIN_OPR ::= COMPARE_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // BIN_OPR ::= LOGIC_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // AR_OPR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // AR_OPR ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // AR_OPR ::= Division 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // AR_OPR ::= Modulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SUM_OPR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUM_OPR",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ASIG_OPR ::= Igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_OPR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // BIT_OPR ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIT_OPR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // BIT_OPR ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIT_OPR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NOT_OPR ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOT_OPR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // COMPARE_OPR ::= Mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // COMPARE_OPR ::= Menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // COMPARE_OPR ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // COMPARE_OPR ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // COMPARE_OPR ::= Diferente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // LOGIC_OPR ::= BETWEEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // LOGIC_OPR ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // LOGIC_OPR ::= LIKE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // CASEW ::= CASE CASEW1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // CASEW1 ::= EXPRESSION CASEW2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // CASEW1 ::= CASEW2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // CASEW2 ::= WHEN EXPRESSION THEN EXPRESSION CASEW3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // CASEW3 ::= ELSE EXPRESSION END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // CASEW3 ::= CASEW2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // CASEW3 ::= END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ROWSET ::= OPENDATASOURCE ParentesisAbrir DatoString Coma DatoString ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROWSET",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ROWSET ::= OPENQUERY ParentesisAbrir Identificador Coma DatoString ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROWSET",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SAM_CL ::= TABLESAMPLE ParentesisAbrir SAM_CL1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SAM_CL1 ::= SEXP SAM_CL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL1",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SAM_CL2 ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SAM_CL2 ::= ROWS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SAM_CL2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAM_CL2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // JOIN_TYPE ::= JOIN_TYPE1 JOIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // JOIN_TYPE1 ::= INNER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // JOIN_TYPE1 ::= JOIN_TYPE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // JOIN_TYPE1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // JOIN_TYPE2 ::= LEFT JOIN_TYPE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // JOIN_TYPE2 ::= RIGHT JOIN_TYPE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // JOIN_TYPE2 ::= FULL JOIN_TYPE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // JOIN_TYPE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // JOIN_TYPE3 ::= OUTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // JOIN_TYPE3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // JOINTB ::= TB_SOURCE JOINTB1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // JOINTB ::= ParentesisAbrir JOIN ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // JOINTB1 ::= JOIN_TYPE JOINTB3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB1",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // JOINTB1 ::= CROSS Coma JOIN JOINTB4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB1",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // JOINTB1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB1",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // JOINTB2 ::= JOIN_TYPE JOINTB3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB2",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // JOINTB2 ::= CROSS Coma JOIN JOINTB4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB2",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // JOINTB3 ::= TB_SOURCE ON SH_COND JOINTB4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB3",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // JOINTB4 ::= JOINTB2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB4",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // JOINTB4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOINTB4",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TB_SOURCE ::= OBJECT TB_SOURCE1 TB_SOURCE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TB_SOURCE ::= ROWSET TB_SOURCE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TB_SOURCE ::= Arroba Identificador TB_SOURCE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TB_SOURCE1 ::= AS Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TB_SOURCE1 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TB_SOURCE1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TB_SOURCE2 ::= SAM_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TB_SOURCE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TB_SOURCE2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ORDERB ::= SELIST ORDER1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDERB",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ORDER1 ::= ORDER2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // ORDER1 ::= Coma ORDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ORDER2 ::= COLLATE ORDER3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ORDER2 ::= ORDER4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ORDER3 ::= Identificador ORDER4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ORDER4 ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ORDER4 ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDER4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // DATATYPE ::= Identificador DATATYPE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // DATATYPE ::= DATATYPE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // DATATYPE2 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE2",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // DATATYPE3 ::= BIT DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // DATATYPE3 ::= INT DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // DATATYPE3 ::= INTEGER DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // DATATYPE3 ::= FLOAT DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // DATATYPE3 ::= VARCHAR DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // DATATYPE3 ::= DATE DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // DATATYPE3 ::= REAL DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // DATATYPE3 ::= DECIMAL DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // DATATYPE3 ::= NUMERIC DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // DATATYPE3 ::= SMALLINT DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // DATATYPE3 ::= TIME DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // DATATYPE3 ::= CHAR DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // DATATYPE3 ::= NCHAR DATATYPE4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // DATATYPE4 ::= ParentesisAbrir DatoEntero DATATYPE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE4",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // DATATYPE4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE4",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // DATATYPE5 ::= Coma DatoEntero ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE5",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // DATATYPE5 ::= ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATATYPE5",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // SELECT1 ::= SELECT SELECT2 FIN_AN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT1",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // SELECT2 ::= SELECT3 SELECT4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT2",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // SELECT3 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT3",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // SELECT3 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT3",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // SELECT3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT3",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // SELECT4 ::= TOP SELECT5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT4",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // SELECT4 ::= SELECT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT4",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // SELECT5 ::= ParentesisAbrir SEXP ParentesisCerrar SELECT6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT5",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // SELECT6 ::= PERCENT SELECT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT6",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // SELECT6 ::= SELECT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT6",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // SELECT7 ::= SELIST SELECT20 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT7",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // SELECT20 ::= Coma SELECT7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT20",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // SELECT20 ::= SELECT8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT20",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // SELECT8 ::= INTO SELECT9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT8",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // SELECT8 ::= SELECT11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT8",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // SELECT9 ::= OBJECT SELECT11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT9",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // SELECT11 ::= FROM JOINTB SELECT17 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT11",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // SELECT11 ::= SELECT12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT11",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // SELECT12 ::= WHERE SH_COND SELECT13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT12",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // SELECT12 ::= SELECT13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT12",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // SELECT13 ::= GROUP BY EXPRESSION SELECT18 SELECT14 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT13",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // SELECT13 ::= SELECT14 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT13",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // SELECT14 ::= HAVING SH_COND SELECT15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT14",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // SELECT14 ::= SELECT15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT14",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // SELECT15 ::= ORDER BY ORDERB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT15",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // SELECT15 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT15",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // SELECT17 ::= Coma JOINTB SELECT17 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT17",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // SELECT17 ::= SELECT12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT17",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // SELECT18 ::= Coma EXPRESSION SELECT18 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT18",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // SELECT18 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT18",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
