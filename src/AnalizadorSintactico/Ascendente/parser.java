
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorSintactico.Ascendente;

import java_cup.runtime.*;
import AnalizadorSintactico.Ascendente.Lexemas;
import MiniSql.MiniSql;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import MiniSql.Errores;
import AnalizadorLexico.MyToken;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\002\003\000\002\151" +
    "\004\000\002\152\005\000\002\152\005\000\002\152\003" +
    "\000\002\153\004\000\002\154\005\000\002\154\005\000" +
    "\002\154\003\000\002\155\005\000\002\155\003\000\002" +
    "\155\003\000\002\155\004\000\002\155\003\000\002\155" +
    "\003\000\002\202\004\000\002\203\005\000\002\203\002" +
    "\000\002\204\005\000\002\204\002\000\002\205\004\000" +
    "\002\205\002\000\002\020\005\000\002\020\005\000\002" +
    "\021\007\000\002\022\004\000\002\023\006\000\002\023" +
    "\003\000\002\024\004\000\002\025\004\000\002\025\003" +
    "\000\002\031\006\000\002\031\012\000\002\031\006\000" +
    "\002\031\006\000\002\031\010\000\002\031\007\000\002" +
    "\031\006\000\002\031\010\000\002\031\006\000\002\031" +
    "\012\000\002\032\004\000\002\032\003\000\002\032\003" +
    "\000\002\033\004\000\002\033\002\000\002\026\003\000" +
    "\002\026\006\000\002\026\006\000\002\026\006\000\002" +
    "\026\005\000\002\027\003\000\002\027\004\000\002\030" +
    "\004\000\002\030\003\000\002\034\007\000\002\034\003" +
    "\000\002\034\003\000\002\034\010\000\002\037\006\000" +
    "\002\040\006\000\002\040\006\000\002\040\006\000\002" +
    "\040\006\000\002\040\006\000\002\041\004\000\002\042" +
    "\003\000\002\042\003\000\002\042\002\000\002\043\003" +
    "\000\002\045\004\000\002\046\003\000\002\046\003\000" +
    "\002\046\002\000\002\047\003\000\002\047\003\000\002" +
    "\051\004\000\002\052\003\000\002\052\003\000\002\052" +
    "\002\000\002\053\003\000\002\156\004\000\002\157\006" +
    "\000\002\157\003\000\002\160\004\000\002\160\002\000" +
    "\002\161\004\000\002\161\010\000\002\161\010\000\002" +
    "\162\003\000\002\162\003\000\002\162\003\000\002\162" +
    "\003\000\002\162\003\000\002\162\003\000\002\162\003" +
    "\000\002\163\004\000\002\163\004\000\002\163\005\000" +
    "\002\163\006\000\002\163\005\000\002\163\005\000\002" +
    "\164\005\000\002\164\006\000\002\164\005\000\002\165" +
    "\003\000\002\165\002\000\002\166\005\000\002\166\002" +
    "\000\002\167\004\000\002\167\002\000\002\170\003\000" +
    "\002\170\003\000\002\171\003\000\002\172\003\000\002" +
    "\172\004\000\002\173\005\000\002\173\004\000\002\173" +
    "\006\000\002\174\004\000\002\174\002\000\002\175\004" +
    "\000\002\175\003\000\002\176\004\000\002\176\006\000" +
    "\002\200\005\000\002\201\010\000\002\201\010\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\070\003\000" +
    "\002\064\003\000\002\065\003\000\002\065\003\000\002" +
    "\071\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\072\004\000\002\073\004\000\002\073\003\000\002" +
    "\074\007\000\002\075\005\000\002\075\003\000\002\075" +
    "\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\114\024\013\037\046\042\016\050\055\110" +
    "\021\140\033\150\022\152\056\214\063\230\035\231\067" +
    "\236\034\323\047\341\005\345\010\360\004\376\006\u0100" +
    "\057\u0105\062\u010d\014\u010e\017\u0110\065\u0111\031\u0112\030" +
    "\u0116\066\u0118\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137" +
    "\032\u013c\061\u013d\043\u013f\040\u0141\054\u0159\041\u015d\020" +
    "\001\002\000\004\u0159\u0145\001\002\000\004\u0159\u013e\001" +
    "\002\000\004\u0159\u0137\001\002\000\010\002\uffab\007\u0134" +
    "\u015a\uffab\001\002\000\004\u0159\u0131\001\002\000\010\002" +
    "\uffad\007\uffad\u015a\uffad\001\002\000\004\u0159\u012e\001\002" +
    "\000\030\266\u0120\323\047\u0100\057\u0105\062\u0110\065\u0111" +
    "\031\u013c\061\u013d\043\u0141\054\u0159\113\u015d\020\001\002" +
    "\000\004\u0159\u011d\001\002\000\044\002\uffa3\007\uffa3\016" +
    "\uffa3\074\uffa3\126\uffa3\134\uffa3\141\uffa3\150\uffa3\164\uffa3" +
    "\u0147\uffa3\u014b\uffa3\u014c\uffa3\u014d\uffa3\u014e\uffa3\u0150\uffa3\u0155" +
    "\uffa3\u015a\uffa3\001\002\000\004\u0159\u010f\001\002\000\004" +
    "\u0159\375\001\002\000\004\u0141\374\001\002\000\004\u0159" +
    "\364\001\002\000\110\024\013\037\046\042\016\050\055" +
    "\110\021\140\033\152\056\214\063\230\035\231\067\236" +
    "\034\323\047\341\005\345\010\360\004\376\006\u0100\057" +
    "\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030\u0116\066\u0118" +
    "\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137\032\u013c\061" +
    "\u013d\043\u013f\040\u0141\054\u0159\113\u015d\020\001\002\000" +
    "\044\002\uffa5\007\uffa5\016\uffa5\074\uffa5\126\uffa5\134\uffa5" +
    "\141\uffa5\150\uffa5\164\uffa5\u0147\uffa5\u014b\uffa5\u014c\uffa5\u014d" +
    "\uffa5\u014e\uffa5\u0150\uffa5\u0155\uffa5\u015a\uffa5\001\002\000\112" +
    "\002\ufff2\007\ufff2\011\ufff2\016\ufff2\071\ufff2\072\ufff2\074" +
    "\ufff2\126\ufff2\134\ufff2\141\ufff2\150\ufff2\164\ufff2\242\ufff2" +
    "\266\ufff2\323\ufff2\u0100\ufff2\u0105\ufff2\u0110\ufff2\u0111\ufff2\u013c" +
    "\ufff2\u013d\ufff2\u0141\ufff2\u0142\ufff2\u0143\ufff2\u0144\ufff2\u0145\ufff2" +
    "\u0147\ufff2\u014b\ufff2\u014c\ufff2\u014d\ufff2\u014e\ufff2\u0150\ufff2\u0155" +
    "\ufff2\u0159\ufff2\u015a\ufff2\u015d\ufff2\001\002\000\004\u0159\354" +
    "\001\002\000\030\016\311\126\305\134\320\141\317\150" +
    "\316\u0147\310\u014b\312\u014c\315\u014d\313\u014e\306\u0150\314" +
    "\001\002\000\004\u012a\274\001\002\000\004\u0159\265\001" +
    "\002\000\004\u0159\262\001\002\000\004\u0159\257\001\002" +
    "\000\004\u0159\252\001\002\000\044\002\uffc8\007\uffc8\016" +
    "\uffc8\074\uffc8\126\uffc8\134\uffc8\141\uffc8\150\uffc8\164\uffc8" +
    "\u0147\uffc8\u014b\uffc8\u014c\uffc8\u014d\uffc8\u014e\uffc8\u0150\uffc8\u0155" +
    "\uffc8\u015a\uffc8\001\002\000\044\002\uffc7\007\uffc7\016\uffc7" +
    "\074\uffc7\126\uffc7\134\uffc7\141\uffc7\150\uffc7\164\uffc7\u0147" +
    "\uffc7\u014b\uffc7\u014c\uffc7\u014d\uffc7\u014e\uffc7\u0150\uffc7\u0155\uffc7" +
    "\u015a\uffc7\001\002\000\004\002\251\001\002\000\044\002" +
    "\uffa6\007\uffa6\016\uffa6\074\uffa6\126\uffa6\134\uffa6\141\uffa6" +
    "\150\uffa6\164\uffa6\u0147\uffa6\u014b\uffa6\u014c\uffa6\u014d\uffa6\u014e" +
    "\uffa6\u0150\uffa6\u0155\uffa6\u015a\uffa6\001\002\000\044\002\uffa7" +
    "\007\uffa7\016\uffa7\074\uffa7\126\uffa7\134\uffa7\141\uffa7\150" +
    "\uffa7\164\uffa7\u0147\uffa7\u014b\uffa7\u014c\uffa7\u014d\uffa7\u014e\uffa7" +
    "\u0150\uffa7\u0155\uffa7\u015a\uffa7\001\002\000\112\024\013\037" +
    "\046\042\016\050\055\110\021\140\033\150\022\152\056" +
    "\214\063\230\035\231\067\236\034\323\047\341\005\345" +
    "\010\360\004\376\006\u0100\057\u0105\062\u010d\014\u0110\065" +
    "\u0111\031\u0112\030\u0116\066\u0118\025\u0119\012\u0120\051\u0122" +
    "\027\u0123\064\u0137\032\u013c\061\u013d\043\u013f\040\u0141\054" +
    "\u0159\041\u015d\020\001\002\000\004\002\000\001\002\000" +
    "\112\002\ufff5\007\ufff5\011\ufff5\016\ufff5\071\ufff5\072\ufff5" +
    "\074\ufff5\126\ufff5\134\ufff5\141\ufff5\150\ufff5\164\ufff5\242" +
    "\ufff5\266\ufff5\323\ufff5\u0100\ufff5\u0105\ufff5\u0110\ufff5\u0111\ufff5" +
    "\u013c\ufff5\u013d\ufff5\u0141\ufff5\u0142\ufff5\u0143\ufff5\u0144\ufff5\u0145" +
    "\ufff5\u0147\ufff5\u014b\ufff5\u014c\ufff5\u014d\ufff5\u014e\ufff5\u0150\ufff5" +
    "\u0155\ufff5\u0159\ufff5\u015a\ufff5\u015d\ufff5\001\002\000\112\002" +
    "\ufff3\007\ufff3\011\ufff3\016\ufff3\071\ufff3\072\ufff3\074\ufff3" +
    "\126\ufff3\134\ufff3\141\ufff3\150\ufff3\164\ufff3\242\ufff3\266" +
    "\ufff3\323\ufff3\u0100\ufff3\u0105\ufff3\u0110\ufff3\u0111\ufff3\u013c\ufff3" +
    "\u013d\ufff3\u0141\ufff3\u0142\ufff3\u0143\ufff3\u0144\ufff3\u0145\ufff3\u0147" +
    "\ufff3\u014b\ufff3\u014c\ufff3\u014d\ufff3\u014e\ufff3\u0150\ufff3\u0155\ufff3" +
    "\u0159\ufff3\u015a\ufff3\u015d\ufff3\001\002\000\012\002\uff88\007" +
    "\uff88\164\232\u015a\uff88\001\002\000\004\u0159\221\001\002" +
    "\000\004\u0159\211\001\002\000\044\002\uffa1\007\uffa1\016" +
    "\uffa1\074\uffa1\126\uffa1\134\uffa1\141\uffa1\150\uffa1\164\uffa1" +
    "\u0147\uffa1\u014b\uffa1\u014c\uffa1\u014d\uffa1\u014e\uffa1\u0150\uffa1\u0155" +
    "\uffa1\u015a\uffa1\001\002\000\004\u0159\206\001\002\000\032" +
    "\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d" +
    "\043\u0141\054\u0144\176\u0145\177\u0159\113\u015d\020\001\002" +
    "\000\032\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c" +
    "\061\u013d\043\u0141\054\u0142\171\u0143\166\u0159\113\u015d\020" +
    "\001\002\000\116\002\uffef\007\uffef\011\uffef\016\uffef\071" +
    "\uffef\072\uffef\074\uffef\126\uffef\134\uffef\141\uffef\150\uffef" +
    "\164\uffef\167\uffef\242\uffef\266\uffef\323\uffef\u0100\uffef\u0105" +
    "\uffef\u0110\uffef\u0111\uffef\u013c\uffef\u013d\uffef\u0141\uffef\u0142\uffef" +
    "\u0143\uffef\u0144\uffef\u0145\uffef\u0147\uffef\u014b\uffef\u014c\uffef\u014d" +
    "\uffef\u014e\uffef\u0150\uffef\u0155\uffef\u0156\156\u0159\uffef\u015a\uffef" +
    "\u015d\uffef\001\002\000\044\002\uffd2\007\uffd2\016\uffd2\074" +
    "\uffd2\126\uffd2\134\uffd2\141\uffd2\150\uffd2\164\uffd2\u0147\uffd2" +
    "\u014b\uffd2\u014c\uffd2\u014d\uffd2\u014e\uffd2\u0150\uffd2\u0155\uffd2\u015a" +
    "\uffd2\001\002\000\004\u0159\147\001\002\000\004\u0159\144" +
    "\001\002\000\044\002\uffa4\007\uffa4\016\uffa4\074\uffa4\126" +
    "\uffa4\134\uffa4\141\uffa4\150\uffa4\164\uffa4\u0147\uffa4\u014b\uffa4" +
    "\u014c\uffa4\u014d\uffa4\u014e\uffa4\u0150\uffa4\u0155\uffa4\u015a\uffa4\001" +
    "\002\000\112\002\ufff6\007\ufff6\011\ufff6\016\ufff6\071\ufff6" +
    "\072\ufff6\074\ufff6\126\ufff6\134\ufff6\141\ufff6\150\ufff6\164" +
    "\ufff6\242\ufff6\266\ufff6\323\ufff6\u0100\ufff6\u0105\ufff6\u0110\ufff6" +
    "\u0111\ufff6\u013c\ufff6\u013d\ufff6\u0141\ufff6\u0142\ufff6\u0143\ufff6\u0144" +
    "\ufff6\u0145\ufff6\u0147\ufff6\u014b\ufff6\u014c\ufff6\u014d\ufff6\u014e\ufff6" +
    "\u0150\ufff6\u0155\ufff6\u0159\ufff6\u015a\ufff6\u015d\ufff6\001\002\000" +
    "\004\u0159\133\001\002\000\004\u0159\126\001\002\000\004" +
    "\u0159\117\001\002\000\004\u0159\104\001\002\000\004\u0159" +
    "\076\001\002\000\004\u0101\071\001\002\000\044\002\uffa2" +
    "\007\uffa2\016\uffa2\074\uffa2\126\uffa2\134\uffa2\141\uffa2\150" +
    "\uffa2\164\uffa2\u0147\uffa2\u014b\uffa2\u014c\uffa2\u014d\uffa2\u014e\uffa2" +
    "\u0150\uffa2\u0155\uffa2\u015a\uffa2\001\002\000\006\u0141\072\u015d" +
    "\073\001\002\000\044\002\uffca\007\uffca\016\uffca\074\uffca" +
    "\126\uffca\134\uffca\141\uffca\150\uffca\164\uffca\u0147\uffca\u014b" +
    "\uffca\u014c\uffca\u014d\uffca\u014e\uffca\u0150\uffca\u0155\uffca\u015a\uffca" +
    "\001\002\000\004\u0141\075\001\002\000\044\002\uffce\007" +
    "\uffce\016\uffce\074\uffce\126\uffce\134\uffce\141\uffce\150\uffce" +
    "\164\uffce\u0147\uffce\u014b\uffce\u014c\uffce\u014d\uffce\u014e\uffce\u0150" +
    "\uffce\u0155\uffce\u015a\uffce\001\002\000\044\002\uffcb\007\uffcb" +
    "\016\uffcb\074\uffcb\126\uffcb\134\uffcb\141\uffcb\150\uffcb\164" +
    "\uffcb\u0147\uffcb\u014b\uffcb\u014c\uffcb\u014d\uffcb\u014e\uffcb\u0150\uffcb" +
    "\u0155\uffcb\u015a\uffcb\001\002\000\006\u013f\100\u015d\077\001" +
    "\002\000\004\u0141\103\001\002\000\004\u015a\uffcd\001\002" +
    "\000\004\u015a\102\001\002\000\044\002\uffd1\007\uffd1\016" +
    "\uffd1\074\uffd1\126\uffd1\134\uffd1\141\uffd1\150\uffd1\164\uffd1" +
    "\u0147\uffd1\u014b\uffd1\u014c\uffd1\u014d\uffd1\u014e\uffd1\u0150\uffd1\u0155" +
    "\uffd1\u015a\uffd1\001\002\000\004\u015a\uffcc\001\002\000\032" +
    "\005\106\064\105\323\uffb1\u0100\uffb1\u0105\uffb1\u0110\uffb1\u0111" +
    "\uffb1\u013c\uffb1\u013d\uffb1\u0141\uffb1\u0159\uffb1\u015d\uffb1\001\002" +
    "\000\026\323\uffb2\u0100\uffb2\u0105\uffb2\u0110\uffb2\u0111\uffb2\u013c" +
    "\uffb2\u013d\uffb2\u0141\uffb2\u0159\uffb2\u015d\uffb2\001\002\000\026" +
    "\323\uffb3\u0100\uffb3\u0105\uffb3\u0110\uffb3\u0111\uffb3\u013c\uffb3\u013d" +
    "\uffb3\u0141\uffb3\u0159\uffb3\u015d\uffb3\001\002\000\004\u015a\116" +
    "\001\002\000\026\323\047\u0100\057\u0105\062\u0110\065\u0111" +
    "\031\u013c\061\u013d\043\u0141\054\u0159\113\u015d\020\001\002" +
    "\000\004\u015a\uffb4\001\002\000\004\u015a\uffb0\001\002\000" +
    "\026\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061" +
    "\u013d\043\u0141\054\u0159\113\u015d\020\001\002\000\004\u015a" +
    "\115\001\002\000\112\002\ufff7\007\ufff7\011\ufff7\016\ufff7" +
    "\071\ufff7\072\ufff7\074\ufff7\126\ufff7\134\ufff7\141\ufff7\150" +
    "\ufff7\164\ufff7\242\ufff7\266\ufff7\323\ufff7\u0100\ufff7\u0105\ufff7" +
    "\u0110\ufff7\u0111\ufff7\u013c\ufff7\u013d\ufff7\u0141\ufff7\u0142\ufff7\u0143" +
    "\ufff7\u0144\ufff7\u0145\ufff7\u0147\ufff7\u014b\ufff7\u014c\ufff7\u014d\ufff7" +
    "\u014e\ufff7\u0150\ufff7\u0155\ufff7\u0159\ufff7\u015a\ufff7\u015d\ufff7\001" +
    "\002\000\112\002\uffc2\007\uffc2\011\uffc2\016\uffc2\071\uffc2" +
    "\072\uffc2\074\uffc2\126\uffc2\134\uffc2\141\uffc2\150\uffc2\164" +
    "\uffc2\242\uffc2\266\uffc2\323\uffc2\u0100\uffc2\u0105\uffc2\u0110\uffc2" +
    "\u0111\uffc2\u013c\uffc2\u013d\uffc2\u0141\uffc2\u0142\uffc2\u0143\uffc2\u0144" +
    "\uffc2\u0145\uffc2\u0147\uffc2\u014b\uffc2\u014c\uffc2\u014d\uffc2\u014e\uffc2" +
    "\u0150\uffc2\u0155\uffc2\u0159\uffc2\u015a\uffc2\u015d\uffc2\001\002\000" +
    "\010\u013f\122\u0141\120\u015d\121\001\002\000\010\112\uffd5" +
    "\u0155\uffd5\u015a\uffd5\001\002\000\004\u0141\125\001\002\000" +
    "\010\112\uffd6\u0155\uffd6\u015a\uffd6\001\002\000\004\u015a\124" +
    "\001\002\000\044\002\uffdf\007\uffdf\016\uffdf\074\uffdf\126" +
    "\uffdf\134\uffdf\141\uffdf\150\uffdf\164\uffdf\u0147\uffdf\u014b\uffdf" +
    "\u014c\uffdf\u014d\uffdf\u014e\uffdf\u0150\uffdf\u0155\uffdf\u015a\uffdf\001" +
    "\002\000\010\112\uffd7\u0155\uffd7\u015a\uffd7\001\002\000\010" +
    "\u013f\122\u0141\120\u015d\121\001\002\000\004\u0155\130\001" +
    "\002\000\026\323\047\u0100\057\u0105\062\u0110\065\u0111\031" +
    "\u013c\061\u013d\043\u0141\054\u0159\113\u015d\020\001\002\000" +
    "\004\u015a\132\001\002\000\044\002\uffda\007\uffda\016\uffda" +
    "\074\uffda\126\uffda\134\uffda\141\uffda\150\uffda\164\uffda\u0147" +
    "\uffda\u014b\uffda\u014c\uffda\u014d\uffda\u014e\uffda\u0150\uffda\u0155\uffda" +
    "\u015a\uffda\001\002\000\034\005\137\064\134\323\uffb7\u0100" +
    "\uffb7\u0105\uffb7\u0110\uffb7\u0111\uffb7\u013c\uffb7\u013d\uffb7\u0141\uffb7" +
    "\u0144\uffb7\u0159\uffb7\u015d\uffb7\001\002\000\030\323\uffb8\u0100" +
    "\uffb8\u0105\uffb8\u0110\uffb8\u0111\uffb8\u013c\uffb8\u013d\uffb8\u0141\uffb8" +
    "\u0144\uffb8\u0159\uffb8\u015d\uffb8\001\002\000\004\u015a\143\001" +
    "\002\000\030\323\047\u0100\057\u0105\062\u0110\065\u0111\031" +
    "\u013c\061\u013d\043\u0141\054\u0144\140\u0159\113\u015d\020\001" +
    "\002\000\030\323\uffb9\u0100\uffb9\u0105\uffb9\u0110\uffb9\u0111\uffb9" +
    "\u013c\uffb9\u013d\uffb9\u0141\uffb9\u0144\uffb9\u0159\uffb9\u015d\uffb9\001" +
    "\002\000\004\u015a\uffb6\001\002\000\004\u015a\uffb5\001\002" +
    "\000\004\u015a\uffba\001\002\000\112\002\uffc3\007\uffc3\011" +
    "\uffc3\016\uffc3\071\uffc3\072\uffc3\074\uffc3\126\uffc3\134\uffc3" +
    "\141\uffc3\150\uffc3\164\uffc3\242\uffc3\266\uffc3\323\uffc3\u0100" +
    "\uffc3\u0105\uffc3\u0110\uffc3\u0111\uffc3\u013c\uffc3\u013d\uffc3\u0141\uffc3" +
    "\u0142\uffc3\u0143\uffc3\u0144\uffc3\u0145\uffc3\u0147\uffc3\u014b\uffc3\u014c" +
    "\uffc3\u014d\uffc3\u014e\uffc3\u0150\uffc3\u0155\uffc3\u0159\uffc3\u015a\uffc3" +
    "\u015d\uffc3\001\002\000\032\005\106\064\105\323\uffb1\u0100" +
    "\uffb1\u0105\uffb1\u0110\uffb1\u0111\uffb1\u013c\uffb1\u013d\uffb1\u0141\uffb1" +
    "\u0159\uffb1\u015d\uffb1\001\002\000\004\u015a\146\001\002\000" +
    "\112\002\uffc0\007\uffc0\011\uffc0\016\uffc0\071\uffc0\072\uffc0" +
    "\074\uffc0\126\uffc0\134\uffc0\141\uffc0\150\uffc0\164\uffc0\242" +
    "\uffc0\266\uffc0\323\uffc0\u0100\uffc0\u0105\uffc0\u0110\uffc0\u0111\uffc0" +
    "\u013c\uffc0\u013d\uffc0\u0141\uffc0\u0142\uffc0\u0143\uffc0\u0144\uffc0\u0145" +
    "\uffc0\u0147\uffc0\u014b\uffc0\u014c\uffc0\u014d\uffc0\u014e\uffc0\u0150\uffc0" +
    "\u0155\uffc0\u0159\uffc0\u015a\uffc0\u015d\uffc0\001\002\000\026\323" +
    "\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043" +
    "\u0141\054\u0159\113\u015d\020\001\002\000\020\011\uff62\071" +
    "\uff62\072\uff62\242\uff62\266\uff62\u0155\uff62\u015a\uff62\001\002" +
    "\000\004\u0155\152\001\002\000\026\323\047\u0100\057\u0105" +
    "\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054\u0159\113" +
    "\u015d\020\001\002\000\004\u015a\154\001\002\000\044\002" +
    "\uffc6\007\uffc6\016\uffc6\074\uffc6\126\uffc6\134\uffc6\141\uffc6" +
    "\150\uffc6\164\uffc6\u0147\uffc6\u014b\uffc6\u014c\uffc6\u014d\uffc6\u014e" +
    "\uffc6\u0150\uffc6\u0155\uffc6\u015a\uffc6\001\002\000\114\002\ufff1" +
    "\007\ufff1\011\ufff1\016\ufff1\071\ufff1\072\ufff1\074\ufff1\126" +
    "\ufff1\134\ufff1\141\ufff1\150\ufff1\164\ufff1\167\ufff1\242\ufff1" +
    "\266\ufff1\323\ufff1\u0100\ufff1\u0105\ufff1\u0110\ufff1\u0111\ufff1\u013c" +
    "\ufff1\u013d\ufff1\u0141\ufff1\u0142\ufff1\u0143\ufff1\u0144\ufff1\u0145\ufff1" +
    "\u0147\ufff1\u014b\ufff1\u014c\ufff1\u014d\ufff1\u014e\ufff1\u0150\ufff1\u0155" +
    "\ufff1\u0159\ufff1\u015a\ufff1\u015d\ufff1\001\002\000\004\u0141\157" +
    "\001\002\000\116\002\uffed\007\uffed\011\uffed\016\uffed\071" +
    "\uffed\072\uffed\074\uffed\126\uffed\134\uffed\141\uffed\150\uffed" +
    "\164\uffed\167\uffed\242\uffed\266\uffed\323\uffed\u0100\uffed\u0105" +
    "\uffed\u0110\uffed\u0111\uffed\u013c\uffed\u013d\uffed\u0141\uffed\u0142\uffed" +
    "\u0143\uffed\u0144\uffed\u0145\uffed\u0147\uffed\u014b\uffed\u014c\uffed\u014d" +
    "\uffed\u014e\uffed\u0150\uffed\u0155\uffed\u0156\161\u0159\uffed\u015a\uffed" +
    "\u015d\uffed\001\002\000\114\002\ufff0\007\ufff0\011\ufff0\016" +
    "\ufff0\071\ufff0\072\ufff0\074\ufff0\126\ufff0\134\ufff0\141\ufff0" +
    "\150\ufff0\164\ufff0\167\ufff0\242\ufff0\266\ufff0\323\ufff0\u0100" +
    "\ufff0\u0105\ufff0\u0110\ufff0\u0111\ufff0\u013c\ufff0\u013d\ufff0\u0141\ufff0" +
    "\u0142\ufff0\u0143\ufff0\u0144\ufff0\u0145\ufff0\u0147\ufff0\u014b\ufff0\u014c" +
    "\ufff0\u014d\ufff0\u014e\ufff0\u0150\ufff0\u0155\ufff0\u0159\ufff0\u015a\ufff0" +
    "\u015d\ufff0\001\002\000\004\u0141\162\001\002\000\116\002" +
    "\uffeb\007\uffeb\011\uffeb\016\uffeb\071\uffeb\072\uffeb\074\uffeb" +
    "\126\uffeb\134\uffeb\141\uffeb\150\uffeb\164\uffeb\167\uffeb\242" +
    "\uffeb\266\uffeb\323\uffeb\u0100\uffeb\u0105\uffeb\u0110\uffeb\u0111\uffeb" +
    "\u013c\uffeb\u013d\uffeb\u0141\uffeb\u0142\uffeb\u0143\uffeb\u0144\uffeb\u0145" +
    "\uffeb\u0147\uffeb\u014b\uffeb\u014c\uffeb\u014d\uffeb\u014e\uffeb\u0150\uffeb" +
    "\u0155\uffeb\u0156\164\u0159\uffeb\u015a\uffeb\u015d\uffeb\001\002\000" +
    "\114\002\uffee\007\uffee\011\uffee\016\uffee\071\uffee\072\uffee" +
    "\074\uffee\126\uffee\134\uffee\141\uffee\150\uffee\164\uffee\167" +
    "\uffee\242\uffee\266\uffee\323\uffee\u0100\uffee\u0105\uffee\u0110\uffee" +
    "\u0111\uffee\u013c\uffee\u013d\uffee\u0141\uffee\u0142\uffee\u0143\uffee\u0144" +
    "\uffee\u0145\uffee\u0147\uffee\u014b\uffee\u014c\uffee\u014d\uffee\u014e\uffee" +
    "\u0150\uffee\u0155\uffee\u0159\uffee\u015a\uffee\u015d\uffee\001\002\000" +
    "\004\u0141\165\001\002\000\114\002\uffec\007\uffec\011\uffec" +
    "\016\uffec\071\uffec\072\uffec\074\uffec\126\uffec\134\uffec\141" +
    "\uffec\150\uffec\164\uffec\167\uffec\242\uffec\266\uffec\323\uffec" +
    "\u0100\uffec\u0105\uffec\u0110\uffec\u0111\uffec\u013c\uffec\u013d\uffec\u0141" +
    "\uffec\u0142\uffec\u0143\uffec\u0144\uffec\u0145\uffec\u0147\uffec\u014b\uffec" +
    "\u014c\uffec\u014d\uffec\u014e\uffec\u0150\uffec\u0155\uffec\u0159\uffec\u015a" +
    "\uffec\u015d\uffec\001\002\000\026\323\047\u0100\057\u0105\062" +
    "\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054\u0159\113\u015d" +
    "\020\001\002\000\056\002\ufffc\007\ufffc\011\ufffc\016\ufffc" +
    "\071\ufffc\072\ufffc\074\ufffc\126\ufffc\134\ufffc\141\ufffc\150" +
    "\ufffc\164\ufffc\242\ufffc\266\ufffc\u0147\ufffc\u014b\ufffc\u014c\ufffc" +
    "\u014d\ufffc\u014e\ufffc\u0150\ufffc\u0155\ufffc\u015a\ufffc\001\002\000" +
    "\056\002\uffff\007\uffff\011\uffff\016\uffff\071\uffff\072\uffff" +
    "\074\uffff\126\uffff\134\uffff\141\uffff\150\uffff\164\uffff\242" +
    "\uffff\266\uffff\u0147\uffff\u014b\uffff\u014c\uffff\u014d\uffff\u014e\uffff" +
    "\u0150\uffff\u0155\uffff\u015a\uffff\001\002\000\026\323\047\u0100" +
    "\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054" +
    "\u0159\113\u015d\020\001\002\000\032\323\047\u0100\057\u0105" +
    "\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054\u0142\171" +
    "\u0143\166\u0159\113\u015d\020\001\002\000\056\002\ufffe\007" +
    "\ufffe\011\ufffe\016\ufffe\071\ufffe\072\ufffe\074\ufffe\126\ufffe" +
    "\134\ufffe\141\ufffe\150\ufffe\164\ufffe\242\ufffe\266\ufffe\u0147" +
    "\ufffe\u014b\ufffe\u014c\ufffe\u014d\ufffe\u014e\ufffe\u0150\ufffe\u0155\ufffe" +
    "\u015a\ufffe\001\002\000\032\323\047\u0100\057\u0105\062\u0110" +
    "\065\u0111\031\u013c\061\u013d\043\u0141\054\u0142\171\u0143\166" +
    "\u0159\113\u015d\020\001\002\000\056\002\ufffd\007\ufffd\011" +
    "\ufffd\016\ufffd\071\ufffd\072\ufffd\074\ufffd\126\ufffd\134\ufffd" +
    "\141\ufffd\150\ufffd\164\ufffd\242\ufffd\266\ufffd\u0147\ufffd\u014b" +
    "\ufffd\u014c\ufffd\u014d\ufffd\u014e\ufffd\u0150\ufffd\u0155\ufffd\u015a\ufffd" +
    "\001\002\000\026\323\047\u0100\057\u0105\062\u0110\065\u0111" +
    "\031\u013c\061\u013d\043\u0141\054\u0159\113\u015d\020\001\002" +
    "\000\026\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c" +
    "\061\u013d\043\u0141\054\u0159\113\u015d\020\001\002\000\106" +
    "\002\ufff8\007\ufff8\011\ufff8\016\ufff8\071\ufff8\072\ufff8\074" +
    "\ufff8\126\ufff8\134\ufff8\141\ufff8\150\ufff8\164\ufff8\242\ufff8" +
    "\266\ufff8\323\ufff8\u0100\ufff8\u0105\ufff8\u0110\ufff8\u0111\ufff8\u013c" +
    "\ufff8\u013d\ufff8\u0141\ufff8\u0142\ufff8\u0143\ufff8\u0147\ufff8\u014b\ufff8" +
    "\u014c\ufff8\u014d\ufff8\u014e\ufff8\u0150\ufff8\u0155\ufff8\u0159\ufff8\u015a" +
    "\ufff8\u015d\ufff8\001\002\000\106\002\ufffb\007\ufffb\011\ufffb" +
    "\016\ufffb\071\ufffb\072\ufffb\074\ufffb\126\ufffb\134\ufffb\141" +
    "\ufffb\150\ufffb\164\ufffb\242\ufffb\266\ufffb\323\ufffb\u0100\ufffb" +
    "\u0105\ufffb\u0110\ufffb\u0111\ufffb\u013c\ufffb\u013d\ufffb\u0141\ufffb\u0142" +
    "\ufffb\u0143\ufffb\u0147\ufffb\u014b\ufffb\u014c\ufffb\u014d\ufffb\u014e\ufffb" +
    "\u0150\ufffb\u0155\ufffb\u0159\ufffb\u015a\ufffb\u015d\ufffb\001\002\000" +
    "\032\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061" +
    "\u013d\043\u0141\054\u0144\176\u0145\177\u0159\113\u015d\020\001" +
    "\002\000\106\002\ufff9\007\ufff9\011\ufff9\016\ufff9\071\ufff9" +
    "\072\ufff9\074\ufff9\126\ufff9\134\ufff9\141\ufff9\150\ufff9\164" +
    "\ufff9\242\ufff9\266\ufff9\323\ufff9\u0100\ufff9\u0105\ufff9\u0110\ufff9" +
    "\u0111\ufff9\u013c\ufff9\u013d\ufff9\u0141\ufff9\u0142\ufff9\u0143\ufff9\u0147" +
    "\ufff9\u014b\ufff9\u014c\ufff9\u014d\ufff9\u014e\ufff9\u0150\ufff9\u0155\ufff9" +
    "\u0159\ufff9\u015a\ufff9\u015d\ufff9\001\002\000\032\323\047\u0100" +
    "\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054" +
    "\u0144\176\u0145\177\u0159\113\u015d\020\001\002\000\106\002" +
    "\ufffa\007\ufffa\011\ufffa\016\ufffa\071\ufffa\072\ufffa\074\ufffa" +
    "\126\ufffa\134\ufffa\141\ufffa\150\ufffa\164\ufffa\242\ufffa\266" +
    "\ufffa\323\ufffa\u0100\ufffa\u0105\ufffa\u0110\ufffa\u0111\ufffa\u013c\ufffa" +
    "\u013d\ufffa\u0141\ufffa\u0142\ufffa\u0143\ufffa\u0147\ufffa\u014b\ufffa\u014c" +
    "\ufffa\u014d\ufffa\u014e\ufffa\u0150\ufffa\u0155\ufffa\u0159\ufffa\u015a\ufffa" +
    "\u015d\ufffa\001\002\000\026\323\047\u0100\057\u0105\062\u0110" +
    "\065\u0111\031\u013c\061\u013d\043\u0141\054\u0159\113\u015d\020" +
    "\001\002\000\004\u015a\210\001\002\000\044\002\uffdb\007" +
    "\uffdb\016\uffdb\074\uffdb\126\uffdb\134\uffdb\141\uffdb\150\uffdb" +
    "\164\uffdb\u0147\uffdb\u014b\uffdb\u014c\uffdb\u014d\uffdb\u014e\uffdb\u0150" +
    "\uffdb\u0155\uffdb\u015a\uffdb\001\002\000\032\005\215\064\212" +
    "\323\uffbc\u0100\uffbc\u0105\uffbc\u0110\uffbc\u0111\uffbc\u013c\uffbc\u013d" +
    "\uffbc\u0141\uffbc\u0159\uffbc\u015d\uffbc\001\002\000\026\323\uffbd" +
    "\u0100\uffbd\u0105\uffbd\u0110\uffbd\u0111\uffbd\u013c\uffbd\u013d\uffbd\u0141" +
    "\uffbd\u0159\uffbd\u015d\uffbd\001\002\000\026\323\047\u0100\057" +
    "\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054\u0159" +
    "\113\u015d\020\001\002\000\004\u015a\216\001\002\000\026" +
    "\323\uffbe\u0100\uffbe\u0105\uffbe\u0110\uffbe\u0111\uffbe\u013c\uffbe\u013d" +
    "\uffbe\u0141\uffbe\u0159\uffbe\u015d\uffbe\001\002\000\112\002\uffc4" +
    "\007\uffc4\011\uffc4\016\uffc4\071\uffc4\072\uffc4\074\uffc4\126" +
    "\uffc4\134\uffc4\141\uffc4\150\uffc4\164\uffc4\242\uffc4\266\uffc4" +
    "\323\uffc4\u0100\uffc4\u0105\uffc4\u0110\uffc4\u0111\uffc4\u013c\uffc4\u013d" +
    "\uffc4\u0141\uffc4\u0142\uffc4\u0143\uffc4\u0144\uffc4\u0145\uffc4\u0147\uffc4" +
    "\u014b\uffc4\u014c\uffc4\u014d\uffc4\u014e\uffc4\u0150\uffc4\u0155\uffc4\u0159" +
    "\uffc4\u015a\uffc4\u015d\uffc4\001\002\000\004\u015a\uffbb\001\002" +
    "\000\004\u015a\uffbf\001\002\000\006\u0141\054\u0144\224\001" +
    "\002\000\004\u0155\225\001\002\000\004\u0155\uff90\001\002" +
    "\000\004\u0155\uff91\001\002\000\114\024\013\037\046\042" +
    "\016\050\055\110\021\140\033\150\022\152\056\214\063" +
    "\230\035\231\067\236\034\323\047\341\005\345\010\360" +
    "\004\376\006\u0100\057\u0105\062\u010d\014\u010e\017\u0110\065" +
    "\u0111\031\u0112\030\u0116\066\u0118\025\u0119\012\u0120\051\u0122" +
    "\027\u0123\064\u0137\032\u013c\061\u013d\043\u013f\040\u0141\054" +
    "\u0159\041\u015d\020\001\002\000\004\u015a\230\001\002\000" +
    "\004\u015a\uff8f\001\002\000\012\002\uffa9\007\uffa9\164\uffa9" +
    "\u015a\uffa9\001\002\000\010\002\uff8b\007\uff8b\u015a\uff8b\001" +
    "\002\000\112\024\013\037\046\042\016\050\055\110\021" +
    "\140\033\150\235\152\056\214\063\230\035\231\067\236" +
    "\034\323\047\341\005\345\010\360\004\376\006\u0100\057" +
    "\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030\u0116\066\u0118" +
    "\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137\032\u013c\061" +
    "\u013d\043\u013f\040\u0141\054\u0159\236\u015d\020\001\002\000" +
    "\010\002\uff86\007\uff86\u015a\uff86\001\002\000\010\002\uff89" +
    "\007\uff89\u015a\uff89\001\002\000\110\024\013\037\046\042" +
    "\016\050\055\110\021\140\033\152\056\214\063\230\035" +
    "\231\067\236\034\323\047\341\005\345\010\360\004\376" +
    "\006\u0100\057\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030" +
    "\u0116\066\u0118\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137" +
    "\032\u013c\061\u013d\043\u013f\040\u0141\054\u0159\236\u015d\020" +
    "\001\002\000\112\024\013\037\046\042\016\050\055\110" +
    "\021\140\033\150\022\152\056\214\063\230\035\231\067" +
    "\236\034\323\047\341\005\345\010\360\004\376\006\u0100" +
    "\057\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030\u0116\066" +
    "\u0118\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137\032\u013c" +
    "\061\u013d\043\u013f\040\u0141\054\u0159\041\u015d\020\001\002" +
    "\000\012\002\uff88\007\uff88\164\232\u015a\uff88\001\002\000" +
    "\010\002\uff85\007\uff85\u015a\uff85\001\002\000\004\u015a\243" +
    "\001\002\000\032\016\uffa6\126\uffa6\134\uffa6\141\uffa6\150" +
    "\uffa6\u0147\uffa6\u014b\uffa6\u014c\uffa6\u014d\uffa6\u014e\uffa6\u0150\uffa6" +
    "\u015a\115\001\002\000\012\002\uff88\007\uff88\164\232\u015a" +
    "\uff88\001\002\000\010\002\uff84\007\uff84\u015a\uff84\001\002" +
    "\000\010\002\uff87\007\uff87\u015a\uff87\001\002\000\004\u015a" +
    "\247\001\002\000\012\002\uff88\007\uff88\164\232\u015a\uff88" +
    "\001\002\000\010\002\uff8a\007\uff8a\u015a\uff8a\001\002\000" +
    "\004\002\001\001\002\000\010\u013f\122\u0141\120\u015d\121" +
    "\001\002\000\004\u0155\254\001\002\000\026\323\047\u0100" +
    "\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054" +
    "\u0159\113\u015d\020\001\002\000\004\u015a\256\001\002\000" +
    "\044\002\uffdd\007\uffdd\016\uffdd\074\uffdd\126\uffdd\134\uffdd" +
    "\141\uffdd\150\uffdd\164\uffdd\u0147\uffdd\u014b\uffdd\u014c\uffdd\u014d" +
    "\uffdd\u014e\uffdd\u0150\uffdd\u0155\uffdd\u015a\uffdd\001\002\000\006" +
    "\u013f\100\u015d\077\001\002\000\004\u015a\261\001\002\000" +
    "\044\002\uffcf\007\uffcf\016\uffcf\074\uffcf\126\uffcf\134\uffcf" +
    "\141\uffcf\150\uffcf\164\uffcf\u0147\uffcf\u014b\uffcf\u014c\uffcf\u014d" +
    "\uffcf\u014e\uffcf\u0150\uffcf\u0155\uffcf\u015a\uffcf\001\002\000\032" +
    "\005\106\064\105\323\uffb1\u0100\uffb1\u0105\uffb1\u0110\uffb1\u0111" +
    "\uffb1\u013c\uffb1\u013d\uffb1\u0141\uffb1\u0159\uffb1\u015d\uffb1\001\002" +
    "\000\004\u015a\264\001\002\000\112\002\uffc1\007\uffc1\011" +
    "\uffc1\016\uffc1\071\uffc1\072\uffc1\074\uffc1\126\uffc1\134\uffc1" +
    "\141\uffc1\150\uffc1\164\uffc1\242\uffc1\266\uffc1\323\uffc1\u0100" +
    "\uffc1\u0105\uffc1\u0110\uffc1\u0111\uffc1\u013c\uffc1\u013d\uffc1\u0141\uffc1" +
    "\u0142\uffc1\u0143\uffc1\u0144\uffc1\u0145\uffc1\u0147\uffc1\u014b\uffc1\u014c" +
    "\uffc1\u014d\uffc1\u014e\uffc1\u0150\uffc1\u0155\uffc1\u0159\uffc1\u015a\uffc1" +
    "\u015d\uffc1\001\002\000\010\u013f\122\u0141\120\u015d\121\001" +
    "\002\000\004\u0155\267\001\002\000\010\u013f\122\u0141\120" +
    "\u015d\121\001\002\000\004\u0155\271\001\002\000\010\u013f" +
    "\122\u0141\120\u015d\121\001\002\000\004\u015a\273\001\002" +
    "\000\044\002\uffe0\007\uffe0\016\uffe0\074\uffe0\126\uffe0\134" +
    "\uffe0\141\uffe0\150\uffe0\164\uffe0\u0147\uffe0\u014b\uffe0\u014c\uffe0" +
    "\u014d\uffe0\u014e\uffe0\u0150\uffe0\u0155\uffe0\u015a\uffe0\001\002\000" +
    "\004\106\275\001\002\000\004\u0141\054\001\002\000\004" +
    "\167\300\001\002\000\044\002\uffc9\007\uffc9\016\uffc9\074" +
    "\uffc9\126\uffc9\134\uffc9\141\uffc9\150\uffc9\164\uffc9\u0147\uffc9" +
    "\u014b\uffc9\u014c\uffc9\u014d\uffc9\u014e\uffc9\u0150\uffc9\u0155\uffc9\u015a" +
    "\uffc9\001\002\000\004\165\301\001\002\000\004\022\302" +
    "\001\002\000\002\001\002\000\044\002\uffc5\007\uffc5\016" +
    "\uffc5\074\uffc5\126\uffc5\134\uffc5\141\uffc5\150\uffc5\164\uffc5" +
    "\u0147\uffc5\u014b\uffc5\u014c\uffc5\u014d\uffc5\u014e\uffc5\u0150\uffc5\u0155" +
    "\uffc5\u015a\uffc5\001\002\000\104\024\013\042\016\050\055" +
    "\140\033\152\056\214\063\230\035\231\067\236\034\323" +
    "\047\341\005\345\010\360\004\376\006\u0100\057\u0105\062" +
    "\u010d\014\u0110\065\u0111\031\u0112\030\u0116\066\u0118\025\u0119" +
    "\012\u0120\051\u0122\027\u0123\064\u0137\032\u013c\061\u013d\043" +
    "\u013f\040\u0141\054\u0159\113\u015d\020\001\002\000\104\024" +
    "\013\042\016\050\055\140\033\152\056\214\063\230\035" +
    "\231\067\236\034\323\047\341\005\345\010\360\004\376" +
    "\006\u0100\057\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030" +
    "\u0116\066\u0118\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137" +
    "\032\u013c\061\u013d\043\u013f\040\u0141\054\u0159\113\u015d\020" +
    "\001\002\000\104\024\uff71\042\uff71\050\uff71\140\uff71\152" +
    "\uff71\214\uff71\230\uff71\231\uff71\236\uff71\323\uff71\341\uff71" +
    "\345\uff71\360\uff71\376\uff71\u0100\uff71\u0105\uff71\u010d\uff71\u0110" +
    "\uff71\u0111\uff71\u0112\uff71\u0116\uff71\u0118\uff71\u0119\uff71\u0120\uff71" +
    "\u0122\uff71\u0123\uff71\u0137\uff71\u013c\uff71\u013d\uff71\u013f\uff71\u0141" +
    "\uff71\u0159\uff71\u015d\uff71\001\002\000\012\002\uffaa\007\uffaa" +
    "\164\uffaa\u015a\uffaa\001\002\000\104\024\uff6f\042\uff6f\050" +
    "\uff6f\140\uff6f\152\uff6f\214\uff6f\230\uff6f\231\uff6f\236\uff6f" +
    "\323\uff6f\341\uff6f\345\uff6f\360\uff6f\376\uff6f\u0100\uff6f\u0105" +
    "\uff6f\u010d\uff6f\u0110\uff6f\u0111\uff6f\u0112\uff6f\u0116\uff6f\u0118\uff6f" +
    "\u0119\uff6f\u0120\uff6f\u0122\uff6f\u0123\uff6f\u0137\uff6f\u013c\uff6f\u013d" +
    "\uff6f\u013f\uff6f\u0141\uff6f\u0159\uff6f\u015d\uff6f\001\002\000\104" +
    "\024\013\042\016\050\055\140\033\152\056\214\063\230" +
    "\035\231\067\236\034\323\047\341\005\345\010\360\004" +
    "\376\006\u0100\057\u0105\062\u010d\014\u0110\065\u0111\031\u0112" +
    "\030\u0116\066\u0118\025\u0119\012\u0120\051\u0122\027\u0123\064" +
    "\u0137\032\u013c\061\u013d\043\u013f\040\u0141\054\u0159\113\u015d" +
    "\020\001\002\000\104\024\uff70\042\uff70\050\uff70\140\uff70" +
    "\152\uff70\214\uff70\230\uff70\231\uff70\236\uff70\323\uff70\341" +
    "\uff70\345\uff70\360\uff70\376\uff70\u0100\uff70\u0105\uff70\u010d\uff70" +
    "\u0110\uff70\u0111\uff70\u0112\uff70\u0116\uff70\u0118\uff70\u0119\uff70\u0120" +
    "\uff70\u0122\uff70\u0123\uff70\u0137\uff70\u013c\uff70\u013d\uff70\u013f\uff70" +
    "\u0141\uff70\u0159\uff70\u015d\uff70\001\002\000\104\024\uff72\042" +
    "\uff72\050\uff72\140\uff72\152\uff72\214\uff72\230\uff72\231\uff72" +
    "\236\uff72\323\uff72\341\uff72\345\uff72\360\uff72\376\uff72\u0100" +
    "\uff72\u0105\uff72\u010d\uff72\u0110\uff72\u0111\uff72\u0112\uff72\u0116\uff72" +
    "\u0118\uff72\u0119\uff72\u0120\uff72\u0122\uff72\u0123\uff72\u0137\uff72\u013c" +
    "\uff72\u013d\uff72\u013f\uff72\u0141\uff72\u0159\uff72\u015d\uff72\001\002" +
    "\000\104\024\uff6e\042\uff6e\050\uff6e\140\uff6e\152\uff6e\214" +
    "\uff6e\230\uff6e\231\uff6e\236\uff6e\323\uff6e\341\uff6e\345\uff6e" +
    "\360\uff6e\376\uff6e\u0100\uff6e\u0105\uff6e\u010d\uff6e\u0110\uff6e\u0111" +
    "\uff6e\u0112\uff6e\u0116\uff6e\u0118\uff6e\u0119\uff6e\u0120\uff6e\u0122\uff6e" +
    "\u0123\uff6e\u0137\uff6e\u013c\uff6e\u013d\uff6e\u013f\uff6e\u0141\uff6e\u0159" +
    "\uff6e\u015d\uff6e\001\002\000\104\024\uff6d\042\uff6d\050\uff6d" +
    "\140\uff6d\152\uff6d\214\uff6d\230\uff6d\231\uff6d\236\uff6d\323" +
    "\uff6d\341\uff6d\345\uff6d\360\uff6d\376\uff6d\u0100\uff6d\u0105\uff6d" +
    "\u010d\uff6d\u0110\uff6d\u0111\uff6d\u0112\uff6d\u0116\uff6d\u0118\uff6d\u0119" +
    "\uff6d\u0120\uff6d\u0122\uff6d\u0123\uff6d\u0137\uff6d\u013c\uff6d\u013d\uff6d" +
    "\u013f\uff6d\u0141\uff6d\u0159\uff6d\u015d\uff6d\001\002\000\010\016" +
    "\332\126\331\141\330\001\002\000\104\024\013\042\016" +
    "\050\055\140\033\152\056\214\063\230\035\231\067\236" +
    "\034\323\047\341\005\345\010\360\004\376\006\u0100\057" +
    "\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030\u0116\066\u0118" +
    "\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137\032\u013c\061" +
    "\u013d\043\u013f\040\u0141\054\u0159\113\u015d\020\001\002\000" +
    "\006\150\321\151\uff96\001\002\000\004\151\uff97\001\002" +
    "\000\004\151\323\001\002\000\012\002\uff9c\007\uff9c\164" +
    "\uff9c\u015a\uff9c\001\002\000\014\002\uff92\007\uff92\074\326" +
    "\164\uff92\u015a\uff92\001\002\000\012\002\uff9e\007\uff9e\164" +
    "\uff9e\u015a\uff9e\001\002\000\004\u013f\327\001\002\000\012" +
    "\002\uff93\007\uff93\164\uff93\u015a\uff93\001\002\000\104\024" +
    "\013\042\016\050\055\140\033\152\056\214\063\230\035" +
    "\231\067\236\034\323\047\341\005\345\010\360\004\376" +
    "\006\u0100\057\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030" +
    "\u0116\066\u0118\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137" +
    "\032\u013c\061\u013d\043\u013f\040\u0141\054\u0159\113\u015d\020" +
    "\001\002\000\104\024\013\042\016\050\055\140\033\152" +
    "\056\214\063\230\035\231\067\236\034\323\047\341\005" +
    "\345\010\360\004\376\006\u0100\057\u0105\062\u010d\014\u0110" +
    "\065\u0111\031\u0112\030\u0116\066\u0118\025\u0119\012\u0120\051" +
    "\u0122\027\u0123\064\u0137\032\u013c\061\u013d\043\u013f\040\u0141" +
    "\054\u0159\113\u015d\020\001\002\000\104\024\013\042\016" +
    "\050\055\140\033\152\056\214\063\230\035\231\067\236" +
    "\034\323\047\341\005\345\010\360\004\376\006\u0100\057" +
    "\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030\u0116\066\u0118" +
    "\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137\032\u013c\061" +
    "\u013d\043\u013f\040\u0141\054\u0159\113\u015d\020\001\002\000" +
    "\012\002\uff9f\007\uff9f\164\uff9f\u015a\uff9f\001\002\000\004" +
    "\007\335\001\002\000\104\024\013\042\016\050\055\140" +
    "\033\152\056\214\063\230\035\231\067\236\034\323\047" +
    "\341\005\345\010\360\004\376\006\u0100\057\u0105\062\u010d" +
    "\014\u0110\065\u0111\031\u0112\030\u0116\066\u0118\025\u0119\012" +
    "\u0120\051\u0122\027\u0123\064\u0137\032\u013c\061\u013d\043\u013f" +
    "\040\u0141\054\u0159\113\u015d\020\001\002\000\012\002\uff99" +
    "\007\uff99\164\uff99\u015a\uff99\001\002\000\014\002\uff94\007" +
    "\uff94\164\uff94\u0155\340\u015a\uff94\001\002\000\104\024\013" +
    "\042\016\050\055\140\033\152\056\214\063\230\035\231" +
    "\067\236\034\323\047\341\005\345\010\360\004\376\006" +
    "\u0100\057\u0105\062\u010d\014\u0110\065\u0111\031\u0112\030\u0116" +
    "\066\u0118\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137\032" +
    "\u013c\061\u013d\043\u013f\040\u0141\054\u0159\113\u015d\020\001" +
    "\002\000\012\002\uff98\007\uff98\164\uff98\u015a\uff98\001\002" +
    "\000\014\002\uff94\007\uff94\164\uff94\u0155\340\u015a\uff94\001" +
    "\002\000\012\002\uff95\007\uff95\164\uff95\u015a\uff95\001\002" +
    "\000\014\002\uff92\007\uff92\074\326\164\uff92\u015a\uff92\001" +
    "\002\000\012\002\uff9a\007\uff9a\164\uff9a\u015a\uff9a\001\002" +
    "\000\004\007\347\001\002\000\104\024\013\042\016\050" +
    "\055\140\033\152\056\214\063\230\035\231\067\236\034" +
    "\323\047\341\005\345\010\360\004\376\006\u0100\057\u0105" +
    "\062\u010d\014\u0110\065\u0111\031\u0112\030\u0116\066\u0118\025" +
    "\u0119\012\u0120\051\u0122\027\u0123\064\u0137\032\u013c\061\u013d" +
    "\043\u013f\040\u0141\054\u0159\113\u015d\020\001\002\000\012" +
    "\002\uff9d\007\uff9d\164\uff9d\u015a\uff9d\001\002\000\014\002" +
    "\uff94\007\uff94\164\uff94\u0155\340\u015a\uff94\001\002\000\012" +
    "\002\uff9b\007\uff9b\164\uff9b\u015a\uff9b\001\002\000\012\002" +
    "\uffa0\007\uffa0\164\uffa0\u015a\uffa0\001\002\000\010\u013f\122" +
    "\u0141\120\u015d\121\001\002\000\006\112\356\u015a\uffd3\001" +
    "\002\000\010\u013f\122\u0141\120\u015d\121\001\002\000\004" +
    "\u015a\360\001\002\000\044\002\uffdc\007\uffdc\016\uffdc\074" +
    "\uffdc\126\uffdc\134\uffdc\141\uffdc\150\uffdc\164\uffdc\u0147\uffdc" +
    "\u014b\uffdc\u014c\uffdc\u014d\uffdc\u014e\uffdc\u0150\uffdc\u0155\uffdc\u015a" +
    "\uffdc\001\002\000\004\u015a\uffd4\001\002\000\012\002\uff88" +
    "\007\uff88\164\232\u015a\uff88\001\002\000\010\002\uff8c\007" +
    "\uff8c\u015a\uff8c\001\002\000\006\u0141\054\u0144\224\001\002" +
    "\000\004\u0155\366\001\002\000\006\u013f\370\u015d\367\001" +
    "\002\000\004\u0141\373\001\002\000\004\u015a\uff8e\001\002" +
    "\000\004\u015a\372\001\002\000\012\002\uffa8\007\uffa8\164" +
    "\uffa8\u015a\uffa8\001\002\000\004\u015a\uff8d\001\002\000\112" +
    "\002\ufff4\007\ufff4\011\ufff4\016\ufff4\071\ufff4\072\ufff4\074" +
    "\ufff4\126\ufff4\134\ufff4\141\ufff4\150\ufff4\164\ufff4\242\ufff4" +
    "\266\ufff4\323\ufff4\u0100\ufff4\u0105\ufff4\u0110\ufff4\u0111\ufff4\u013c" +
    "\ufff4\u013d\ufff4\u0141\ufff4\u0142\ufff4\u0143\ufff4\u0144\ufff4\u0145\ufff4" +
    "\u0147\ufff4\u014b\ufff4\u014c\ufff4\u014d\ufff4\u014e\ufff4\u0150\ufff4\u0155" +
    "\ufff4\u0159\ufff4\u015a\ufff4\u015d\ufff4\001\002\000\004\u0141\376" +
    "\001\002\000\006\u0143\u0101\u014e\u0102\001\002\000\004\u015a" +
    "\u0100\001\002\000\010\002\uffae\007\uffae\u015a\uffae\001\002" +
    "\000\004\u0159\u010a\001\002\000\004\u0143\u0105\001\002\000" +
    "\004\u0141\u0104\001\002\000\004\u015a\uff83\001\002\000\004" +
    "\u0159\u0106\001\002\000\004\u0141\u0107\001\002\000\004\u015a" +
    "\u0108\001\002\000\004\u0143\u0109\001\002\000\004\u0141\uff82" +
    "\001\002\000\004\u0141\u010b\001\002\000\004\u015a\u010c\001" +
    "\002\000\004\u0143\u010d\001\002\000\004\u014d\u010e\001\002" +
    "\000\004\u0141\uff81\001\002\000\002\001\002\000\026\323" +
    "\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043" +
    "\u0141\054\u0159\u0115\u015d\020\001\002\000\044\002\uffe9\007" +
    "\uffe9\016\uffe9\074\uffe9\126\uffe9\134\uffe9\141\uffe9\150\uffe9" +
    "\164\uffe9\u0147\uffe9\u014b\uffe9\u014c\uffe9\u014d\uffe9\u014e\uffe9\u0150" +
    "\uffe9\u0155\uffe9\u015a\uffe9\001\002\000\044\002\uffe5\007\uffe5" +
    "\016\uffe5\074\uffe5\126\uffe5\134\uffe5\141\uffe5\150\uffe5\164" +
    "\uffe5\u0147\uffe5\u014b\uffe5\u014c\uffe5\u014d\uffe5\u014e\uffe5\u0150\uffe5" +
    "\u0155\uffe5\u015a\uffe5\001\002\000\044\002\uffe7\007\uffe7\016" +
    "\uffe7\074\uffe7\126\uffe7\134\uffe7\141\uffe7\150\uffe7\164\uffe7" +
    "\u0147\uffe7\u014b\uffe7\u014c\uffe7\u014d\uffe7\u014e\uffe7\u0150\uffe7\u0155" +
    "\uffe7\u015a\uffe7\001\002\000\006\u0155\u0119\u015a\u011b\001\002" +
    "\000\026\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c" +
    "\u0116\u013d\043\u0141\054\u0159\113\u015d\020\001\002\000\034" +
    "\323\ufff6\u0100\ufff6\u0105\ufff6\u0110\ufff6\u0111\ufff6\u013c\ufff6\u013d" +
    "\ufff6\u0141\ufff6\u0144\ufff6\u0145\ufff6\u0159\ufff6\u015a\u0117\u015d\ufff6" +
    "\001\002\000\026\323\047\u0100\057\u0105\062\u0110\065\u0111" +
    "\031\u013c\061\u013d\043\u0141\054\u0159\113\u015d\020\001\002" +
    "\000\044\002\uffe6\007\uffe6\016\uffe6\074\uffe6\126\uffe6\134" +
    "\uffe6\141\uffe6\150\uffe6\164\uffe6\u0147\uffe6\u014b\uffe6\u014c\uffe6" +
    "\u014d\uffe6\u014e\uffe6\u0150\uffe6\u0155\uffe6\u015a\uffe6\001\002\000" +
    "\026\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061" +
    "\u013d\043\u0141\054\u0159\113\u015d\020\001\002\000\044\002" +
    "\uffe4\007\uffe4\016\uffe4\074\uffe4\126\uffe4\134\uffe4\141\uffe4" +
    "\150\uffe4\164\uffe4\u0147\uffe4\u014b\uffe4\u014c\uffe4\u014d\uffe4\u014e" +
    "\uffe4\u0150\uffe4\u0155\uffe4\u015a\uffe4\001\002\000\044\002\uffe2" +
    "\007\uffe2\016\uffe2\074\uffe2\126\uffe2\134\uffe2\141\uffe2\150" +
    "\uffe2\164\uffe2\u0147\uffe2\u014b\uffe2\u014c\uffe2\u014d\uffe2\u014e\uffe2" +
    "\u0150\uffe2\u0155\uffe2\u015a\uffe2\001\002\000\044\002\uffe3\007" +
    "\uffe3\016\uffe3\074\uffe3\126\uffe3\134\uffe3\141\uffe3\150\uffe3" +
    "\164\uffe3\u0147\uffe3\u014b\uffe3\u014c\uffe3\u014d\uffe3\u014e\uffe3\u0150" +
    "\uffe3\u0155\uffe3\u015a\uffe3\001\002\000\010\u013f\122\u0141\120" +
    "\u015d\121\001\002\000\004\u015a\u011f\001\002\000\044\002" +
    "\uffe1\007\uffe1\016\uffe1\074\uffe1\126\uffe1\134\uffe1\141\uffe1" +
    "\150\uffe1\164\uffe1\u0147\uffe1\u014b\uffe1\u014c\uffe1\u014d\uffe1\u014e" +
    "\uffe1\u0150\uffe1\u0155\uffe1\u015a\uffe1\001\002\000\026\323\047" +
    "\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141" +
    "\054\u0159\113\u015d\020\001\002\000\004\266\u0120\001\002" +
    "\000\044\002\uff67\007\uff67\016\uff67\074\uff67\126\uff67\134" +
    "\uff67\141\uff67\150\uff67\164\uff67\u0147\uff67\u014b\uff67\u014c\uff67" +
    "\u014d\uff67\u014e\uff67\u0150\uff67\u0155\uff67\u015a\uff67\001\002\000" +
    "\044\002\uff69\007\uff69\016\uff69\074\uff69\126\uff69\134\uff69" +
    "\141\uff69\150\uff69\164\uff69\u0147\uff69\u014b\uff69\u014c\uff69\u014d" +
    "\uff69\u014e\uff69\u0150\uff69\u0155\uff69\u015a\uff69\001\002\000\044" +
    "\002\uff68\007\uff68\016\uff68\074\uff68\126\uff68\134\uff68\141" +
    "\uff68\150\uff68\164\uff68\u0147\uff68\u014b\uff68\u014c\uff68\u014d\uff68" +
    "\u014e\uff68\u0150\uff68\u0155\uff68\u015a\uff68\001\002\000\004\242" +
    "\u0126\001\002\000\026\323\047\u0100\057\u0105\062\u0110\065" +
    "\u0111\031\u013c\061\u013d\043\u0141\054\u0159\113\u015d\020\001" +
    "\002\000\010\071\u0128\072\u012b\266\u0120\001\002\000\026" +
    "\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d" +
    "\043\u0141\054\u0159\113\u015d\020\001\002\000\044\002\uff66" +
    "\007\uff66\016\uff66\074\uff66\126\uff66\134\uff66\141\uff66\150" +
    "\uff66\164\uff66\u0147\uff66\u014b\uff66\u014c\uff66\u014d\uff66\u014e\uff66" +
    "\u0150\uff66\u0155\uff66\u015a\uff66\001\002\000\044\002\uff64\007" +
    "\uff64\016\uff64\074\uff64\126\uff64\134\uff64\141\uff64\150\uff64" +
    "\164\uff64\u0147\uff64\u014b\uff64\u014c\uff64\u014d\uff64\u014e\uff64\u0150" +
    "\uff64\u0155\uff64\u015a\uff64\001\002\000\044\002\uff63\007\uff63" +
    "\016\uff63\074\uff63\126\uff63\134\uff63\141\uff63\150\uff63\164" +
    "\uff63\u0147\uff63\u014b\uff63\u014c\uff63\u014d\uff63\u014e\uff63\u0150\uff63" +
    "\u0155\uff63\u015a\uff63\001\002\000\004\072\u012d\001\002\000" +
    "\044\002\uff65\007\uff65\016\uff65\074\uff65\126\uff65\134\uff65" +
    "\141\uff65\150\uff65\164\uff65\u0147\uff65\u014b\uff65\u014c\uff65\u014d" +
    "\uff65\u014e\uff65\u0150\uff65\u0155\uff65\u015a\uff65\001\002\000\006" +
    "\u013f\100\u015d\077\001\002\000\004\u015a\u0130\001\002\000" +
    "\044\002\uffd0\007\uffd0\016\uffd0\074\uffd0\126\uffd0\134\uffd0" +
    "\141\uffd0\150\uffd0\164\uffd0\u0147\uffd0\u014b\uffd0\u014c\uffd0\u014d" +
    "\uffd0\u014e\uffd0\u0150\uffd0\u0155\uffd0\u015a\uffd0\001\002\000\026" +
    "\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d" +
    "\043\u0141\054\u0159\113\u015d\020\001\002\000\004\u015a\u0133" +
    "\001\002\000\044\002\uffde\007\uffde\016\uffde\074\uffde\126" +
    "\uffde\134\uffde\141\uffde\150\uffde\164\uffde\u0147\uffde\u014b\uffde" +
    "\u014c\uffde\u014d\uffde\u014e\uffde\u0150\uffde\u0155\uffde\u015a\uffde\001" +
    "\002\000\114\024\013\037\046\042\016\050\055\110\021" +
    "\140\033\150\022\152\056\214\063\230\035\231\067\236" +
    "\034\323\047\341\005\345\010\360\004\376\006\u0100\057" +
    "\u0105\062\u010d\014\u010e\017\u0110\065\u0111\031\u0112\030\u0116" +
    "\066\u0118\025\u0119\012\u0120\051\u0122\027\u0123\064\u0137\032" +
    "\u013c\061\u013d\043\u013f\040\u0141\054\u0159\041\u015d\020\001" +
    "\002\000\006\002\uffaf\u015a\uffaf\001\002\000\006\002\uffac" +
    "\u015a\uffac\001\002\000\010\u013f\122\u0141\120\u015d\121\001" +
    "\002\000\004\u0155\u0139\001\002\000\026\323\047\u0100\057" +
    "\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054\u0159" +
    "\113\u015d\020\001\002\000\004\u0155\u013b\001\002\000\026" +
    "\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d" +
    "\043\u0141\054\u0159\113\u015d\020\001\002\000\004\u015a\u013d" +
    "\001\002\000\044\002\uffd8\007\uffd8\016\uffd8\074\uffd8\126" +
    "\uffd8\134\uffd8\141\uffd8\150\uffd8\164\uffd8\u0147\uffd8\u014b\uffd8" +
    "\u014c\uffd8\u014d\uffd8\u014e\uffd8\u0150\uffd8\u0155\uffd8\u015a\uffd8\001" +
    "\002\000\026\323\047\u0100\057\u0105\062\u0110\065\u0111\031" +
    "\u013c\061\u013d\043\u0141\054\u0159\113\u015d\020\001\002\000" +
    "\044\002\uffea\007\uffea\016\uffea\074\uffea\126\uffea\134\uffea" +
    "\141\uffea\150\uffea\164\uffea\u0147\uffea\u014b\uffea\u014c\uffea\u014d" +
    "\uffea\u014e\uffea\u0150\uffea\u0155\uffea\u015a\uffea\001\002\000\004" +
    "\011\u0141\001\002\000\002\001\002\000\026\323\047\u0100" +
    "\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d\043\u0141\054" +
    "\u0159\u0115\u015d\020\001\002\000\004\u015a\u0144\001\002\000" +
    "\044\002\uffe8\007\uffe8\016\uffe8\074\uffe8\126\uffe8\134\uffe8" +
    "\141\uffe8\150\uffe8\164\uffe8\u0147\uffe8\u014b\uffe8\u014c\uffe8\u014d" +
    "\uffe8\u014e\uffe8\u0150\uffe8\u0155\uffe8\u015a\uffe8\001\002\000\026" +
    "\323\047\u0100\057\u0105\062\u0110\065\u0111\031\u013c\061\u013d" +
    "\043\u0141\054\u0159\113\u015d\020\001\002\000\004\u015a\u0147" +
    "\001\002\000\044\002\uffd9\007\uffd9\016\uffd9\074\uffd9\126" +
    "\uffd9\134\uffd9\141\uffd9\150\uffd9\164\uffd9\u0147\uffd9\u014b\uffd9" +
    "\u014c\uffd9\u014d\uffd9\u014e\uffd9\u0150\uffd9\u0155\uffd9\u015a\uffd9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\042\002\035\020\067\026\014\031\057\034" +
    "\047\040\043\072\022\151\036\153\052\155\051\156\041" +
    "\157\006\161\044\162\025\173\010\202\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\160\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\040\043\055\u0120\073\u0122\074\u0121" +
    "\151\147\153\052\155\051\202\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\020\067\026" +
    "\014\031\057\034\047\040\043\072\022\151\036\153\052" +
    "\155\051\161\361\162\025\202\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\303" +
    "\163\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\020\067\026\014\031\057" +
    "\034\047\040\043\072\022\151\241\153\052\155\051\161" +
    "\044\162\025\173\245\202\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\174\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\040\043\154\200\155\177\202" +
    "\023\001\001\000\014\040\043\152\167\153\166\155\051" +
    "\202\023\001\001\000\004\203\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\106\052\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\040\043" +
    "\053\110\151\111\153\052\155\051\202\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\040\043\151\113" +
    "\153\052\155\051\202\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\126\001\001\000\002\001\001\000\014\040\043\151" +
    "\130\153\052\155\051\202\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\134\046\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\040\043\047\141" +
    "\151\140\153\052\155\051\202\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\144\052\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\040\043\055\150" +
    "\151\147\153\052\155\051\202\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\040\043\055\152\151\147" +
    "\153\052\155\051\202\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\204\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\205\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\040\043\153\173\155\051\202" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\043\153\171\155\051\202\023\001\001\000\014\040" +
    "\043\152\172\153\166\155\051\202\023\001\001\000\002" +
    "\001\001\000\014\040\043\152\174\153\166\155\051\202" +
    "\023\001\001\000\002\001\001\000\010\040\043\155\203" +
    "\202\023\001\001\000\010\040\043\155\201\202\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\040\043" +
    "\154\202\155\177\202\023\001\001\000\002\001\001\000" +
    "\012\040\043\154\204\155\177\202\023\001\001\000\002" +
    "\001\001\000\014\040\043\151\206\153\052\155\051\202" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\213\042\212\001\001\000\002\001\001\000\016\040" +
    "\043\043\217\151\216\153\052\155\051\202\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\170\221\202\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\020\067\026\014\031\057\034\047\040\043" +
    "\072\022\151\036\153\052\155\051\156\226\157\006\161" +
    "\044\162\025\171\225\173\010\202\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\020\067\026\014\031\057\034\047\040\043" +
    "\072\022\151\036\153\052\155\051\161\236\162\025\175" +
    "\233\176\232\202\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\020\067\026\014\031\057\034\047\040" +
    "\043\072\022\151\036\153\052\155\051\161\236\162\025" +
    "\176\244\202\023\001\001\000\034\020\067\026\014\031" +
    "\057\034\047\040\043\072\022\151\241\153\052\155\051" +
    "\161\044\162\025\173\240\202\023\001\001\000\004\174" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\174\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\174\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\252\001" +
    "\001\000\002\001\001\000\014\040\043\151\254\153\052" +
    "\155\051\202\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\262\052\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\265\001\001\000\002" +
    "\001\001\000\004\032\267\001\001\000\002\001\001\000" +
    "\004\032\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\202\275\001\001\000\004\037" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\116\302\001\001\000\002\001\001\000" +
    "\030\020\067\026\014\031\057\034\047\040\043\072\022" +
    "\151\036\153\052\155\051\162\352\202\023\001\001\000" +
    "\030\020\067\026\014\031\057\034\047\040\043\072\022" +
    "\151\036\153\052\155\051\162\350\202\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\020\067\026\014\031\057\034\047\040\043\072\022\151" +
    "\036\153\052\155\051\162\345\202\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\164\332\001\001\000\030\020\067\026\014" +
    "\031\057\034\047\040\043\072\022\151\036\153\052\155" +
    "\051\162\323\202\023\001\001\000\004\165\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\167\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\020\067\026\014\031\057\034" +
    "\047\040\043\072\022\151\036\153\052\155\051\162\343" +
    "\202\023\001\001\000\030\020\067\026\014\031\057\034" +
    "\047\040\043\072\022\151\036\153\052\155\051\162\336" +
    "\202\023\001\001\000\030\020\067\026\014\031\057\034" +
    "\047\040\043\072\022\151\036\153\052\155\051\162\333" +
    "\202\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\020\067\026\014\031\057\034\047\040\043\072\022" +
    "\151\036\153\052\155\051\162\335\202\023\001\001\000" +
    "\002\001\001\000\004\166\340\001\001\000\030\020\067" +
    "\026\014\031\057\034\047\040\043\072\022\151\036\153" +
    "\052\155\051\162\341\202\023\001\001\000\002\001\001" +
    "\000\004\166\342\001\001\000\002\001\001\000\004\167" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\020\067\026\014\031\057\034\047\040\043\072\022\151" +
    "\036\153\052\155\051\162\347\202\023\001\001\000\002" +
    "\001\001\000\004\166\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\354\001\001\000\004\033\356" +
    "\001\001\000\004\032\360\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\174\362\001\001" +
    "\000\002\001\001\000\006\170\364\202\222\001\001\000" +
    "\002\001\001\000\004\172\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\200\376\001\001" +
    "\000\004\201\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\u0110\123\u010f\001\001" +
    "\000\022\023\u0112\024\u0111\040\043\055\u0113\151\147\153" +
    "\052\155\051\202\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0119\001\001\000" +
    "\014\040\043\151\113\153\052\155\051\202\023\001\001" +
    "\000\002\001\001\000\020\024\u0117\040\043\055\u0113\151" +
    "\147\153\052\155\051\202\023\001\001\000\002\001\001" +
    "\000\014\040\043\151\u011b\153\052\155\051\202\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u011d\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\040\043\055\u0124\151\147\153\052\155\051" +
    "\202\023\001\001\000\004\074\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\040\043\055\u0126\151\147\153\052\155\051\202" +
    "\023\001\001\000\006\074\u0129\075\u0128\001\001\000\016" +
    "\040\043\055\u012b\151\147\153\052\155\051\202\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\040\043" +
    "\151\u0131\153\052\155\051\202\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\020\067\026\014\031\057" +
    "\034\047\040\043\072\022\151\036\153\052\155\051\156" +
    "\u0135\157\006\161\044\162\025\173\010\202\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0137\001" +
    "\001\000\002\001\001\000\014\040\043\151\u0139\153\052" +
    "\155\051\202\023\001\001\000\002\001\001\000\014\040" +
    "\043\151\u013b\153\052\155\051\202\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\u013e\040\043\055" +
    "\u013f\151\147\153\052\155\051\202\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\u0141\001\001\000" +
    "\022\023\u0142\024\u0111\040\043\055\u0113\151\147\153\052" +
    "\155\051\202\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\040\043\151\u0145\153\052\155\051\202\023" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    try {
        BufferedReader buffered = new BufferedReader(new FileReader(MiniSql.ubicacionArchivo));
        analizadorFlex = new Lexemas(buffered);
    } catch (IOException ex) {
        ex.printStackTrace();
    }

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return analizadorFlex.next_token(); 

    }


Lexemas analizadorFlex = null;

public void syntax_error(Symbol cur_token){
    Errores.SyntaxErrorCup((MyToken) cur_token.value);
}

public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        m.append(" " + s.value.toString());
        if (s.left >= 0) {                
            m.append(" in line "+(s.left));
            if (s.right >= 0)
                m.append(", column "+(s.right));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TEST EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TEST ::= SH_COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEST",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SEXP ::= SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SEXP2 ::= Mas SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SEXP2 ::= Menos SEXP3 SEXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SEXP2 ::= SEXP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SEXP3 ::= SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP3",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SEXP4 ::= Multiplicacion SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SEXP4 ::= Division SEXP5 SEXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SEXP4 ::= SEXP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP4",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SEXP5 ::= ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SEXP5 ::= DatoEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SEXP5 ::= DatoFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SEXP5 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SEXP5 ::= AGG_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SEXP5 ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEXP5",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OBJECT ::= Identificador OBJECT1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",128, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OBJECT1 ::= Punto Identificador OBJECT2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT1",129, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OBJECT1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT1",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OBJECT2 ::= Punto Identificador OBJECT3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT2",130, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OBJECT2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT2",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OBJECT3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT3",131, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OBJECT3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT3",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONV ::= CAST ParentesisAbrir CONV1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONV ::= CONVERT ParentesisAbrir CONV2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONV1 ::= EXPRESSION AS DATATYPE CONV3 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONV2 ::= DATATYPE CONV3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONV3 ::= ParentesisAbrir DatoEntero ParentesisCerrar CONV4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONV3 ::= CONV4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONV4 ::= EXPRESSION CONV5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV4",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONV5 ::= Coma SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV5",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONV5 ::= ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONV5",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STR_FN ::= LOWER ParentesisAbrir STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STR_FN ::= TRANSLATE ParentesisAbrir STR_FN1 Coma STR_FN1 Coma STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STR_FN ::= UPPER ParentesisAbrir STR_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STR_FN ::= CHAR ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STR_FN ::= LEFT ParentesisAbrir STR_FN1 Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STR_FN ::= TRIM ParentesisAbrir STR_FN1 STR_FN2 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STR_FN ::= NCHAR ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STR_FN ::= RIGHT ParentesisAbrir STR_FN1 Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STR_FN ::= SPACE ParentesisAbrir SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STR_FN ::= SUBSTRING ParentesisAbrir STR_FN1 Coma SEXP Coma SEXP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STR_FN1 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STR_FN1 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STR_FN1 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STR_FN2 ::= FROM STR_FN1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STR_FN2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_FN2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DT_FN ::= CURRENT_TIMESTAMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DT_FN ::= DAY ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DT_FN ::= MONTH ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DT_FN ::= YEAR ParentesisAbrir DT_FN1 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DT_FN ::= SET LANGUAGE DT_FN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DT_FN1 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DT_FN1 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DT_FN2 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DT_FN2 ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT_FN2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OTH_FN ::= NEXT VALUE FOR OBJECT OTH_FN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OTH_FN ::= SYSTEM_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OTH_FN ::= SESSION_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OTH_FN ::= NULLIF ParentesisAbrir EXPRESSION Coma EXPRESSION ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OTH_FN3 ::= OVER ORDER BY ORDERB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTH_FN3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AGG_FN ::= AVG ParentesisAbrir SEL_AVG ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AGG_FN ::= COUNT ParentesisAbrir SEL_COUNT ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AGG_FN ::= MAX ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AGG_FN ::= MIN ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AGG_FN ::= SUM ParentesisAbrir SEL_AGR ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGG_FN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SEL_AVG ::= SEL_AVG1 SEL_AVG2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SEL_AVG1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SEL_AVG1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SEL_AVG1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SEL_AVG2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AVG2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SEL_COUNT ::= SEL_COUNT1 SEL_COUNT2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SEL_COUNT1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SEL_COUNT1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SEL_COUNT1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SEL_COUNT2 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SEL_COUNT2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_COUNT2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SEL_AGR ::= SEL_AGR1 SEL_AGR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SEL_AGR1 ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SEL_AGR1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SEL_AGR1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SEL_AGR2 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEL_AGR2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SH_COND ::= SH_COND1 SH_COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SH_COND1 ::= MATCH ParentesisAbrir GSP ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND1",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SH_COND1 ::= SH_CONDWM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND1",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SH_COND2 ::= AND SH_COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SH_COND2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_COND2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PREDICATE ::= PREDICATE1 PREDICATE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PREDICATE ::= CONTAINS ParentesisAbrir PREDICATE7 Coma PREDICATE8 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PREDICATE ::= FREETEXT ParentesisAbrir PREDICATE7 Coma PREDICATE9 ParentesisCerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PREDICATE1 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PREDICATE1 ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PREDICATE1 ::= CASEW 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PREDICATE1 ::= STR_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PREDICATE1 ::= DT_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PREDICATE1 ::= CONV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PREDICATE1 ::= OTH_FN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE1",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PREDICATE2 ::= COMPARE_OPR PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PREDICATE2 ::= NOT PREDICATE3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PREDICATE2 ::= LIKE PREDICATE1 PREDICATE6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PREDICATE2 ::= BETWEEN PREDICATE1 AND PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PREDICATE2 ::= IS PREDICATE4 NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PREDICATE2 ::= IN PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE2",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PREDICATE3 ::= LIKE PREDICATE1 PREDICATE6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PREDICATE3 ::= BETWEEN PREDICATE1 AND PREDICATE1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PREDICATE3 ::= IN PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE3",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PREDICATE4 ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE4",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PREDICATE4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE4",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PREDICATE5 ::= Coma PREDICATE1 PREDICATE5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE5",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PREDICATE5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE5",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PREDICATE6 ::= ESCAPE DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE6",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PREDICATE6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE6",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PREDICATE7 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE7",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PREDICATE7 ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE7",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PREDICATE8 ::= SH_COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE8",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PREDICATE9 ::= DatoString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE9",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PREDICATE9 ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREDICATE9",120, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SH_CONDWM ::= NOT PREDICATE SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SH_CONDWM ::= PREDICATE SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SH_CONDWM ::= ParentesisAbrir SH_CONDWM ParentesisCerrar SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SH_CONDWM1 ::= OR SH_CONDWM2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM1",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SH_CONDWM1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM1",122, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SH_CONDWM2 ::= NOT SH_CONDWM3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM2",123, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SH_CONDWM2 ::= SH_CONDWM3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM2",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SH_CONDWM3 ::= PREDICATE SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM3",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SH_CONDWM3 ::= ParentesisAbrir SH_CONDWM ParentesisCerrar SH_CONDWM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SH_CONDWM3",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // GSP ::= Identificador GSP1 Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // GSP1 ::= Menor Menos ParentesisAbrir Identificador ParentesisCerrar Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // GSP1 ::= Menos ParentesisAbrir Identificador ParentesisCerrar Menos Mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GSP1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BIN_OPR ::= AR_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // BIN_OPR ::= ASIG_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // BIN_OPR ::= BIT_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // BIN_OPR ::= COMPARE_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // BIN_OPR ::= LOGIC_OPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIN_OPR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // AR_OPR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AR_OPR ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AR_OPR ::= Division 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // AR_OPR ::= Modulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR_OPR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SUM_OPR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUM_OPR",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ASIG_OPR ::= Igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_OPR",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BIT_OPR ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIT_OPR",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // BIT_OPR ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIT_OPR",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NOT_OPR ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOT_OPR",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // COMPARE_OPR ::= Mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // COMPARE_OPR ::= Menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // COMPARE_OPR ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // COMPARE_OPR ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // COMPARE_OPR ::= Diferente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // COMPARE_OPR ::= Igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE_OPR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LOGIC_OPR ::= BETWEEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LOGIC_OPR ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LOGIC_OPR ::= LIKE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OPR",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CASEW ::= CASE CASEW1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CASEW1 ::= EXPRESSION CASEW2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CASEW1 ::= CASEW2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASEW2 ::= WHEN EXPRESSION THEN EXPRESSION CASEW3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW2",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASEW3 ::= ELSE EXPRESSION END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASEW3 ::= CASEW2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CASEW3 ::= END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASEW3",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESSION ::= SEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
