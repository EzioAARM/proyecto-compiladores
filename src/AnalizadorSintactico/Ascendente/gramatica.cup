package AnalizadorSintactico.Ascendente;

import java_cup.runtime.*;
import AnalizadorSintactico.Ascendente.Lexemas;
import MiniSql.MiniSql;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import MiniSql.Errores;
import AnalizadorLexico.MyToken;

parser code {:
Lexemas analizadorFlex = null;

public void syntax_error(Symbol cur_token){
    Errores.SyntaxErrorCup((MyToken) cur_token.value);
}

public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        m.append(" " + s.value.toString());
        if (s.left >= 0) {                
            m.append(" in line "+(s.left));
            if (s.right >= 0)
                m.append(", column "+(s.right));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}
:}

/* define how to connect to the scanner! */
init with {: 
    try {
        BufferedReader buffered = new BufferedReader(new FileReader(MiniSql.ubicacionArchivo));
        analizadorFlex = new Lexemas(buffered);
    } catch (IOException ex) {
        ex.printStackTrace();
    }
:};
scan with {: 
    return analizadorFlex.next_token(); 
:};

/* Terminals (tokens returned by the scanner). */
terminal token            ADD,ALL,ALTER,AND,ANY,AS,ASC,AUTHORIZATION,BACKUP,BEGIN,BETWEEN,BREAK,BROWSE,BULK,BY,CASCADE,CASE,CHECK,CHECKPOINT,CLOSE,CLUSTERED,COALESCE,COLLATE,COLUMN,COMMIT,COMPUTE,CONSTRAINT,CONTAINS,CONTAINSTABLE,CONTINUE,CONVERT,CREATE,CROSS,CURRENT,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATABASE,DBCC,DEALLOCATE,DECLARE,DEFAULT,DELETE,DENY,DESC,DISK,DISTINCT,DISTRIBUTED,DOUBLE,DROP,DUMP,ELSE,END,ERRLVL,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILE,FILLFACTOR,FOR,FOREIGN,FREETEXT,FREETEXTTABLE,FROM,FULL,FUNCTION,GOTO,GRANT,GROUP,HAVING,HOLDLOCK,IDENTITY,IDENTITY_INSERT,IDENTITYCOL,IF,IN,INDEX,INNER,INSERT,INTERSECT,INTO,IS,JOIN,KEY,KILL,LEFT,LIKE,LINENO,LOAD,MERGE,NATIONAL,NOCHECK,NOCLUSTERED,NOT,NULL,NULLIF,OF,OFF,OFFSETS,ON,OPEN,OPENDATASOURCE,OPENQUERY,OPENXML,OPTION,OR,ORDER,OUTER,OVER,PERCENT,PIVOT,PLAN,PRECISION,PRIMARY,PRINT,PROC,PROCEDURE,PUBLIC,RAISERROR,READ,READTEXT,RECONFIGURE,REFERENCES,REPLICATION,RESTORE,RESTRICT,RETURN,REVERT,REVOKE,RIGHT,ROLLBACK,ROWCOUNT,ROWGUIDCOL,RULE,SAVE,SCHEMA,SECURITYAUDIT,SELECT,SEMANTICKEYPHRASETABLE,SEMANTICSIMILARITYDETAILSTABLE,SEMANTICSIMILARITYTABLE,SESSION_USER,SET,SETUSER,SHUTDOWN,SOME,STATISTICS,SYSTEM_USER,TABLE,TABLESAMPLE,TEXTSIZE,THEN,TO,TOP,TRAN,TRANSACTION,TRIGGER,TRUNCATE,TRY_CONVERT,TSEQUAL,UNION,UNIQUE,UNPIVOT,UPDATE,UPDATETEXT,USE,USER,VALUES,VARYING,VIEW,WAITFOR,WHEN,WHERE,WHILE,WITH,WITHIN,WRITETEXT,ABSOLUTE,OVERLAPS,ACTION,PAD,ADA,PARTIAL,PASCAL,EXTRACT,POSITION,ALLOCATE,FALSO,PREPARE,FIRST,PRESERVE,FLOAT,ARE,PRIOR,PRIVILEGES,FORTRAN,ASSERTION,FOUND,AT,REAL,AVG,GET,GLOBAL,RELATIVE,GO,BIT,BIT_LENGTH,BOTH,ROWS,HOUR,CASCADED,SCROLL,IMMEDIATE,SECOND,CAST,SECTION,CATALOG,INCLUDE,CHAR,SESSION,CHAR_LENGTH,INDICATOR,CHARACTER,INITIALLY,CHARACTER_LENGTH,SIZE,INPUT,SMALLINT,INSENSITIVE,SPACE,INT,SQL,COLLATION,INTEGER,SQLCA,SQLCODE,INTERVAL,SQLERROR,CONNECT,SQLSTATE,CONNECTION,SQLWARNING,ISOLATION,SUBSTRING,CONSTRAINTS,SUM,LANGUAGE,CORRESPONDING,LAST,TEMPORARY,COUNT,LEADING,TIME,LEVEL,TIMESTAMP,TIMEZONE_HOUR,LOCAL,TIMEZONE_MINUTE,LOWER,MATCH,TRAILING,MAX,MIN,TRANSLATE,DATE,MINUTE,TRANSLATION,DAY,MODULE,TRIM,MONTH,VERDADERO,DEC,NAMES,DECIMAL,NATURAL,UNKNOWN,NCHAR,DEFERRABLE,NEXT,UPPER,DEFERRED,NO,USAGE,NONE,USING,DESCRIBE,VALUE,DESCRIPTOR,DIAGNOSTICS,NUMERIC,VARCHAR,DISCONNECT,OCTET_LENGTH,DOMAIN,ONLY,WHENEVER,WORK,ENDEXEC,WRITE,YEAR,OUTPUT,ZONE,EXCEPTION,RETURNS,DatoEntero,DatoFloat,DatoBit,DatoString,StringNoCerrado,Identificador,Mas,Menos,Multiplicacion,Division,Modulo,MenorIgual,Corchetes,Llaves,Parentesis,MayorIgual,Igual,Mayor,Menor,IgualIgual,Diferente,And,Or,Not,PuntoComa,Coma,Punto,CorcheteAbrir,CorcheteCerrar,ParentesisAbrir,ParentesisCerrar,LlaveAbrir,LlaveCerrar,Arroba,DobleNumeral,Numeral;

/* Non terminals */
non terminal SEXP,SEXP2,SEXP3,SEXP4,SEXP5,OBJECT,OBJECT1,OBJECT2,OBJECT3,EXPRESSION,EXPRESSION1,EXPRESSION2,EXPRESSION3,EXPRESSION4,DATATYPE,DATATYPE2,DATATYPE3,DATATYPE4,DATATYPE5,COLNAME,COLNAME1,BIN_OPR,AR_OPR,ASIG_OPR,BIT_OPR,COMPARE_OPR,LOGIC_OPR,SUM_OPR,NOT_OPR,DATABASE1,DATABASE2,DATABASE3,DEFV,PROCEDURE1,PROCEDURE2,PROCEDURE3,PROCEDURE4,PROCEDURE5,PROCEDURE6,PROCEDURE7,PROCEDURE8,PROCEDURE9,PROCEDURE10,PROCEDURE11,PROCEDURE12,PROCEDURE13,PROCEDURE14,PROCEDURE15,PROCEDURE16,PROCEDURE17,VIEW1,VIEW2,VIEW3,VIEW4,VIEW5,VIEW6,COL_CST,COL_CST1,COL_CST2,COL_CST3,COL_CST4,COL_CST5,COL_CST6,COL_CST7,COL_CST8,COL_CST9,COL_CST10,COL_CST11,COL_CST12,COL_CST13,COL_CST14,COL_CST15,COL_CST16,COL_CST17,CONST_EXP,TB_CST,TB_CST1,TB_CST2,TB_CST3,TB_CST4,TB_CST5,TB_CST6,TB_CST7,TB_CST8,TB_CST9,TB_CST10,TB_CST11,TB_CST12,TB_CST13,TB_CST14,TB_CST15,TB_CST16,TB_CST17,TB_CST18,TB_CST19,TB_CST20,TB_CST21,TB_CST22,TB_CST23,COL_DEF,COL_DEF1,COL_DEF2,COL_DEF3,COL_DEF4,COL_DEF5,COL_DEF6,COL_DEF7,COL_DEF8,COL_DEF10,TB_IX,TB_IX1,TB_IX2,TB_IX3,TB_IX4,TABLE1,TABLE2,TABLE3,TABLE4,TABLE5,FUNCTION1,FUNCTION2,FUNCTION3,FUNCTION4,FUNCTION5,FUNCTION6,FUNCTION7,FUNCTION8,FUNCTION9,FUNCTION10,FUNCTION11,FUNCTION12,TRUNCATE1,TRUNCATE2,ALTER0,ALTER1,ALTER2,ALTER3,ALTER4,ALTER5,ALTER6,ALTER7,ALTER8,ALTER9,ALTER10,ALTER11,ALTER12,ALTER13,ALTER14,ALTER15,ALTER16,ALTER17,ALTER18,ALTER19,ALTER20,ALTER21,ALTER22,INICIALB,INICIAL,GOOP,FIN_AN,FLSPC,FLSPC1,DATABASE4,CRT2;


start with INICIALB;

    INICIALB ::= BEGIN INICIAL END FIN_AN INICIALB
            | INICIAL
            | error INICIALB
            | error
            | /* VACIO */ ;

    INICIAL ::= TRUNCATE1 GOOP INICIAL
            | ALTER0 GOOP INICIAL
            | /* VACIO */ ;
    GOOP ::= GO
            | /* VACIO */ ;

/*
non terminal SEXP,SEXP2,SEXP3,SEXP4,SEXP5
*/

/* <scalar_expression> */
    SEXP ::= SEXP3 SEXP2 ;
    SEXP2 ::= Mas SEXP3 SEXP2
                | Menos SEXP3 SEXP2
                | /* VACIO */ ;
    SEXP3 ::= SEXP5 SEXP4 ;
    SEXP4 ::= Multiplicacion SEXP5 SEXP4
                | Division SEXP5 SEXP4
                | /* VACIO */ ;
    SEXP5 ::= ParentesisAbrir SEXP ParentesisCerrar
                | DatoEntero
                | DatoFloat
                | Arroba Identificador
                | OBJECT;

/*
non terminal FIN_AN
*/

/* <fin_instruccion> */
    FIN_AN ::= PuntoComa
            | GO;

/*
non terminal OBJECT,OBJECT1,OBJECT2,OBJECT3
*/

/* <object> */
    OBJECT ::= Identificador OBJECT1;

    OBJECT1 ::= Punto Identificador OBJECT2
            | /* VACIO */ ; 

    OBJECT2 ::= Punto Identificador OBJECT3
            | /* VACIO */ ; 

    OBJECT3 ::= Punto Identificador
            | /* VACIO */ ; 


/*
non terminal COLNAME,COLNAME1
*/

/* <column_name> */
    COLNAME ::= Identificador Punto COLNAME1 ;
    COLNAME1 ::= Multiplicacion
                    | Identificador ;

  

/*
non terminal EXPRESSION,EXPRESSION1,EXPRESSION2,EXPRESSION3,EXPRESSION4
*/

/* <expression> */
    EXPRESSION ::= SEXP EXPRESSION1 EXPRESSION3 
            | EXPRESSION2 SUM_OPR EXPRESSION2 
            | NOT_OPR EXPRESSION EXPRESSION4 
            | EXPRESSION3
            | ParentesisAbrir EXPRESSION ParentesisCerrar;
    EXPRESSION1 ::= AR_OPR 
            | COMPARE_OPR 
            | SUM_OPR ;
    EXPRESSION2 ::= DatoString 
            | Identificador ;
    EXPRESSION3 ::= SEXP 
            | Identificador 
            | DatoString ;
    EXPRESSION4 ::= COMPARE_OPR 
            | LOGIC_OPR ;



/*
non terminal BIN_OPR,AR_OPR,ASIG_OPR,BIT_OPR,COMPARE_OPR,LOGIC_OPR,SUM_OPR,NOT_OPR
*/

/* <binary_operators> */
    BIN_OPR ::= AR_OPR
                | ASIG_OPR
                | BIT_OPR
                | COMPARE_OPR
                | LOGIC_OPR ;
    AR_OPR ::= Menos
                | Multiplicacion
                | Division
                | Modulo ;
    SUM_OPR ::= Mas ;
    ASIG_OPR ::= Igual ;
    BIT_OPR ::= AND
                | OR ;
    NOT_OPR ::= NOT;
    COMPARE_OPR ::= Mayor
                | Menor
                | MayorIgual
                | MenorIgual
                | Diferente 
                | Igual;
    LOGIC_OPR ::= BETWEEN
                | IN
                | LIKE ;

/*
non terminal DATATYPE,DATATYPE2,DATATYPE3,DATATYPE4,DATATYPE5
*/

/* <datatype> */
    DATATYPE ::= Identificador DATATYPE2 
                |DATATYPE3 ;
    DATATYPE2 ::= Punto Identificador ;
    DATATYPE3 ::= BIT DATATYPE4 
                |INT DATATYPE4 
                |INTEGER DATATYPE4 
                |FLOAT DATATYPE4 
                |VARCHAR DATATYPE4 
                |DATE DATATYPE4 
                |REAL DATATYPE4 
                |DECIMAL DATATYPE4 
                |NUMERIC DATATYPE4 
                |SMALLINT DATATYPE4 
                |TIME DATATYPE4 
                |CHAR DATATYPE4 
                |NCHAR DATATYPE4 ;
    DATATYPE4 ::= ParentesisAbrir DatoEntero DATATYPE5 
                |  ;
    DATATYPE5 ::= Coma DatoEntero ParentesisCerrar 
                | ParentesisCerrar ;



/*
    non terminals DEFV
*/
/* <default_values> */
    DEFV ::= DatoString 
            | DatoFloat
            | DatoEntero
            | DatoBit
            | NULL ;


/*
    non terminals DATABASE1,DATABASE2,DATABASE3
*/
/* <create_database> */
    DATABASE1 ::= ON DATABASE2 DATABASE3
            | /* VACIO */ ;
    DATABASE2 ::= PRIMARY FLSPC DATABASE4;
    DATABASE3 ::= COLLATE Identificador 
            | /* VACIO */ ;
    DATABASE4 ::= Coma FLSPC DATABASE4
            | /* VACIO */ ;

/*
    non terminals FLSPC
*/
/* <filespec> */
    FLSPC ::= ParentesisAbrir NAMES Igual DatoString Coma FILE Igual DatoString FLSPC1 ParentesisCerrar ;
    FLSPC1 ::= Coma SIZE Igual DatoEntero 
            | /* VACIO */ ;


/*
    non terminals PROCEDURE1,PROCEDURE2,PROCEDURE3,PROCEDURE4,PROCEDURE5,PROCEDURE6,PROCEDURE7,PROCEDURE8,PROCEDURE9,PROCEDURE10,PROCEDURE11,PROCEDURE12,PROCEDURE13,PROCEDURE14,PROCEDURE15,PROCEDURE16,PROCEDURE17
*/
/* <create_procedure> */
    PROCEDURE1 ::= Identificador PROCEDURE2 ;
    PROCEDURE2 ::= Punto Identificador PROCEDURE3
            | PROCEDURE3;
    PROCEDURE3 ::= PuntoComa DatoEntero PROCEDURE4
            | PROCEDURE4 ;
    PROCEDURE4 ::= Arroba Identificador PROCEDURE5 DATATYPE PROCEDURE6 ;
    PROCEDURE5 ::= AS
            | /* VACIO */ ;
    PROCEDURE6 ::= VARYING PROCEDURE7
            | PROCEDURE7 ;
    PROCEDURE7 ::= Igual DEFV PROCEDURE8
            | PROCEDURE8 ;
    PROCEDURE8 ::= OUTPUT PROCEDURE9
            | PROCEDURE9;
    PROCEDURE9 ::= Coma PROCEDURE4
            | PROCEDURE10;
    PROCEDURE10 ::= WITH PROCEDURE11 AS PROCEDURE12 PROCEDURE13
            | PROCEDURE13;
    PROCEDURE11 ::= EXECUTE
            | EXEC ;
    PROCEDURE12 ::= DatoString ;
    PROCEDURE13 ::= FOR REPLICATION PROCEDURE14
            | PROCEDURE14 ;
    PROCEDURE14 ::= AS PROCEDURE15 /*PROCEDURE16*/ PROCEDURE17 FIN_AN ;
    PROCEDURE15 ::= BEGIN
            | /* VACIO */ ;
    /*PROCEDURE16 ::= SELECT1 FIN_AN
            | INSERT0
            | DELETE1
            | UPDATE0;*/
    PROCEDURE17 ::= END;


/*
    non terminals VIEW1,VIEW2,VIEW3,VIEW4,VIEW5,VIEW6
*/
/* <create_view> */
    VIEW1 ::= Identificador VIEW2 VIEW3 ;
    VIEW2 ::= Punto Identificador
            | /* VACIO */ ;
    VIEW3 ::= ParentesisAbrir VIEW4 ParentesisCerrar AS /*SELECT1*/ VIEW6 
            | AS /*SELECT1*/ VIEW6;
    VIEW4 ::= Identificador VIEW5
            | /* VACIO */ ; 
    VIEW5 ::= Coma Identificador VIEW5
            | /* VACIO */ ;
    VIEW6 ::= WITH CHECK OPTION FIN_AN
            | FIN_AN ;


/*
    non terminal COL_CST,COL_CST1,COL_CST2,COL_CST3,COL_CST4,COL_CST5,COL_CST6,COL_CST7,COL_CST8,COL_CST9,COL_CST10,COL_CST11,COL_CST12,COL_CST13,COL_CST14,COL_CST15,COL_CST16
*/
/* <column_constraint> */
    COL_CST ::= COL_CST1 COL_CST2 COL_CST3; 
    COL_CST1 ::= CONSTRAINT Identificador
                | /* VACIO */ ;
    COL_CST2 ::= NULL
                | NOT NULL 
                | /* VACIO */;
    COL_CST3 ::= PRIMARY KEY COL_CST4
                | UNIQUE COL_CST4 
                | COL_CST8
                | DEFAULT COL_CST17                         {: System.out.println("termino DEFAULT"); :}
                | CHECK COL_CST16 ParentesisAbrir EXPRESSION ParentesisCerrar ;
    COL_CST4 ::= CLUSTERED COL_CST5
                | COL_CST5 ;
    COL_CST5 ::= WITH COL_CST6 COL_CST7
                | COL_CST7 ;
    COL_CST6 ::= FILLFACTOR Igual DatoEntero
                | ParentesisAbrir FILLFACTOR Igual DatoEntero ParentesisCerrar ;
    COL_CST7 ::= ON Identificador ParentesisAbrir Identificador ParentesisCerrar
                | /* VACIO */ ;
    COL_CST8 ::= COL_CST9 REFERENCES Identificador COL_CST10 COL_CST11 ;
    COL_CST9 ::= FOREIGN KEY
                | /* VACIO */ ; 
    COL_CST10 ::= Punto Identificador
                | /* VACIO */ ;
    COL_CST11 ::= ParentesisAbrir Identificador ParentesisCerrar COL_CST12
                | COL_CST12;
    COL_CST12 ::= ON COL_CST13 COL_CST14
                | /* VACIO */;
    COL_CST13 ::= DELETE
                | UPDATE ;
    COL_CST14 ::= NO ACTION
                | CASCADE
                | SET COL_CST15 ;
    COL_CST15 ::= NULL
                | DEFAULT ;
    COL_CST16 ::= NOT FOR REPLICATION
                | /* VACIO */ ;
    COL_CST17 ::= CONST_EXP 
                | /* VACIO */                               {: System.out.println("DEFAULT VACIO"); :};



/*
    non terminal CONST_EXP
*/
/* <constant_expression> */
    CONST_EXP ::= Arroba Identificador
                | Identificador
                | DatoString
                | DatoEntero
                | DatoFloat ;



/*
    non terminal TB_CST,TB_CST1,TB_CST2,TB_CST3,TB_CST4,TB_CST5,TB_CST6,TB_CST7,TB_CST8,TB_CST9,TB_CST10,TB_CST11,TB_CST12,TB_CST13,TB_CST14,TB_CST15,TB_CST16,TB_CST17,TB_CST18,TB_CST19,TB_CST20,TB_CST21
*/
/* <table_constraint> */   
    TB_CST ::= TB_CST1 TB_CST2 ;
    TB_CST1 ::= CONSTRAINT Identificador 
                | /* VACIO */ ;
    TB_CST2 ::= PRIMARY KEY TB_CST4 TB_CST3
                | UNIQUE TB_CST4 TB_CST3
                | FOREIGN KEY TB_CST9
                | CONNECTION TB_CST16
                | DEFAULT TB_CST22
                | CHECK TB_CST20;
    TB_CST3 ::= ParentesisAbrir Identificador TB_CST5 TB_CST6 ParentesisCerrar TB_CST7 ;
    TB_CST4 ::= CLUSTERED
                | /* VACIO */ ;
    TB_CST5 ::= ASC
                | DESC 
                | /* VACIO */;
    TB_CST6 ::= Coma Identificador TB_CST6
                | /* VACIO */ ;
    TB_CST7 ::= WITH FILLFACTOR Igual DatoEntero TB_CST8
                | TB_CST8 
                | /* VACIO */ ;
    TB_CST8 ::= ON Identificador ParentesisAbrir Identificador ParentesisCerrar
                | Identificador ;
    TB_CST9 ::= ParentesisAbrir Identificador TB_CST6 ParentesisCerrar REFERENCES Identificador TB_CST10;
    TB_CST10 ::= ParentesisAbrir Identificador TB_CST6 ParentesisCerrar TB_CST11
                | TB_CST11;
    TB_CST11 ::= ON TB_CST12 TB_CST13 TB_CST15;
    TB_CST12 ::= DELETE
                | UPDATE ;
    TB_CST13 ::= NO ACTION
                | CASCADE
                | SET TB_CST14 ;
    TB_CST14 ::= NULL
                | DEFAULT ;
    TB_CST15 ::= NOT FOR REPLICATION
                | /* VACIO */ ;
    TB_CST16 ::= ParentesisAbrir Identificador TO Identificador TB_CST17 ParentesisCerrar TB_CST18;
    TB_CST17 ::= Coma Identificador TO Identificador TB_CST17
                | /* VACIO*/;
    TB_CST18 ::= ON DELETE TB_CST19;
    TB_CST19 ::= NO ACTION
                | CASCADE;
    TB_CST20 ::= NOT FOR REPLICATION ParentesisAbrir /*SH_COND*/ ParentesisCerrar
                | ParentesisAbrir /*SH_COND*/ ParentesisCerrar;
    TB_CST21 ::= WITH VALUES
                | /* VALUES */ ;
    TB_CST22 ::= CONST_EXP TB_CST23 ;
    TB_CST23 ::= FOR Identificador TB_CST21
                | /* VACIO */ ;
    



/*
    non terminal COL_DEF,COL_DEF1,COL_DEF2,COL_DEF3,COL_DEF4,COL_DEF5,COL_DEF6,COL_DEF7,COL_DEF8,COL_DEF10
*/
/* <column_definition> */
    COL_DEF ::= Identificador DATATYPE COL_DEF1     {: System.out.println("termino coldef"); :};
    COL_DEF1 ::= COLLATE Identificador COL_DEF2
                | COL_DEF2 ;
    COL_DEF2 ::= NULL COL_DEF3
                | NOT NULL COL_DEF3
                | COL_DEF3 ;
    COL_DEF3 ::= COL_DEF5
		        | IDENTITY COL_DEF6
                | /* VACIO */;
    COL_DEF5 ::= WITH VALUES COL_DEF8
                | COL_DEF8 ;
    COL_DEF6 ::= ParentesisAbrir SEXP Coma SEXP ParentesisCerrar COL_DEF7
                | COL_DEF7 ;
    COL_DEF7 ::= NOT FOR REPLICATION COL_DEF8
                | COL_DEF8 ;
    COL_DEF8 ::= ROWGUIDCOL COL_DEF10               {: System.out.println("termino ROWGUID"); :}
                | COL_DEF10 ;
    COL_DEF10 ::= COL_CST                           {: System.out.println("termino colcst abajo"); :}
		        | /* VACIO */ ;
    


/*
    non terminals TB_IX,TB_IX1,TB_IX2,TB_IX3,TB_IX4
*/
/* <table_index> */
    TB_IX ::= INDEX Identificador ParentesisAbrir TB_IX1 ParentesisCerrar TB_IX4 ;
    TB_IX1 ::=  Identificador TB_IX2 TB_IX3 ;
    TB_IX2 ::= ASC
            | DEC
            | /* VACIO */ ; 
    TB_IX3 ::= Coma TB_IX2
            | /* VACIO */ ;
    TB_IX4 ::= WITH FILLFACTOR Igual DatoEntero 
            | /* VACIO */ ;


/*
    non terminals TABLE1,TABLE2,TABLE3,TABLE4,TABLE5
*/
/* <create_table> */
    TABLE1 ::= OBJECT ParentesisAbrir TABLE2 TABLE3 ParentesisCerrar TABLE4 FIN_AN;
    TABLE2 ::= COL_DEF
            | TB_CST                        {: System.out.println("termino tbcst"); :};
    TABLE3 ::= Coma TABLE2 TABLE3
            | /* VACIO */ ;
	TABLE4 ::= ON TABLE5
			| /* VACIO */ ;
	TABLE5 ::= Identificador ParentesisAbrir Identificador ParentesisCerrar
			| PRIMARY ;


/*
    non terminals FUNCTION1,FUNCTION2,FUNCTION3,FUNCTION4,FUNCTION5,FUNCTION6,FUNCTION7,FUNCTION8,FUNCTION9,FUNCTION10,FUNCTION11,FUNCTION12
*/
/* <create_function> */
	FUNCTION1 ::= Identificador FUNCTION2 ParentesisAbrir FUNCTION3 ParentesisCerrar RETURNS DATATYPE FUNCTION6 ;
	FUNCTION2 ::= Punto Identificador
			| /* VACIO */ ;
	FUNCTION3 ::= Arroba Identificador FUNCTION4 DATATYPE FUNCTION5 FUNCTION10
			| /* VACIO */ ;
	FUNCTION4 ::= AS
			| /* VACIO */ ;
	FUNCTION5 ::= Igual DEFV
			| /* VACIO */ ;
	FUNCTION6 ::= WITH RETURNS NULL ON NULL INPUT FUNCTION7
			| FUNCTION7 ;
	FUNCTION7 ::= FUNCTION4 BEGIN /*FUNCTION8 FUNCTION9*/ FUNCTION11 END FIN_AN ;
	/*FUNCTION8 ::= SELECT1 FIN_AN
            | INSERT0
            | DELETE1
            | UPDATE0;
	FUNCTION9 ::= FUNCTION8 FUNCTION9
			| /* VACIO  ;*/
    FUNCTION10 ::= Coma FUNCTION3
            | /* VACIO */ ;
    FUNCTION11 ::= RETURN SEXP FUNCTION12 ;
    FUNCTION12 ::= PuntoComa
            | /* VACIO */ ;


/*
    non terminals TRUNCATE1,TRUNCATE2
*/
/* <truncate> */
    TRUNCATE1 ::= TRUNCATE TABLE OBJECT TRUNCATE2 TRUNCATE2 FIN_AN;
    TRUNCATE2 ::= Coma OBJECT
                | /* VACIO */ ;



/*
    non terminals CRT,CRT1,CRT2
*/
/* <create> */
    CRT2 ::= PROC PROCEDURE1
            | PROCEDURE PROCEDURE1
            | VIEW VIEW1
			| FUNCTION FUNCTION1;


/*
    non terminal ALTER0,ALTER1,ALTER2,ALTER3,ALTER4,ALTER5,ALTER6,ALTER7,ALTER8,ALTER9,ALTER10,ALTER11,ALTER12,ALTER13,ALTER14,ALTER15,ALTER16,ALTER17,ALTER18,ALTER19,ALTER20,ALTER21,ALTER22
*/
/* <alter> */
    ALTER0 ::= ALTER ALTER1 FIN_AN;
    ALTER1 ::= TABLE ALTER2
            | DATABASE ALTER20 ALTER21
            | CRT2 ;
    ALTER2 ::= OBJECT ALTER3 ;
    ALTER3 ::= ALTER COLUMN Identificador 
            | ADD ALTER11
            | DROP ALTER22
            | WITH ALTER18 CONSTRAINT ALTER19
            | CHECK CONSTRAINT ALTER19
            | NOCHECK CONSTRAINT ALTER19 ;
    ALTER4 ::= ParentesisAbrir ALTER5 ParentesisCerrar ALTER7
            | /* VACIO */ ;
    ALTER5 ::= DatoEntero ALTER6 
            | MAX;
    ALTER6 ::=  Coma DatoEntero 
            | /* VACIO */ ;
    ALTER7 ::= COLLATE Identificador ALTER8
            | ALTER8 ;
    ALTER8 ::= NULL
            | NOT NULL
            | /* VACIO */ ;
    ALTER9 ::= DATATYPE ALTER4
            | DROP ALTER10
            | ADD ALTER10 ;
    ALTER10 ::= ROWGUIDCOL
            | NOT FOR REPLICATION ;
    ALTER11 ::= COL_DEF ALTER12
            | TB_CST ALTER12 ;
    ALTER12 ::= Coma ALTER11
            | /* VACIO */ ;
    ALTER22 ::= CONSTRAINT ALTER13
            | ALTER13 ;
    ALTER13 ::= IF EXISTS ALTER14
            | ALTER14 ;
    ALTER14 ::= Identificador
            | COLUMN ALTER15 ALTER16;
    ALTER15 ::= IF EXISTS
            | /* VACIO */ ;
    ALTER16 ::= Identificador ALTER17;
    ALTER17 ::= Coma Identificador ALTER17
            | /* VACIO */ ;
    ALTER18 ::= CHECK
            | NOCHECK ;
    ALTER19 ::= ALL
            | Identificador ;
    ALTER20 ::= Identificador
            | CURRENT ;
    ALTER21 ::= COLLATE Identificador
            | ADD FILE FLSPC ;